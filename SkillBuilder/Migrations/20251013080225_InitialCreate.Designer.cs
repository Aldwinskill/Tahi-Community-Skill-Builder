// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkillBuilder.Data;

#nullable disable

namespace SkillBuilder.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251013080225_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommunityPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "user-1",
                            Category = "",
                            CommunityId = 1,
                            Content = "Just finished my first clay pot! Excited to share with everyone.",
                            ImageUrl = "/assets/Community Pics/CompletePottery.png",
                            IsPublished = true,
                            SubmittedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "First Pottery Creation"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "user-3",
                            Category = "",
                            CommunityId = 3,
                            Content = "Making progress on a wooden sculpture. Any tips for fine detailing?",
                            ImageUrl = "/assets/Community Pics/CompleteWoodCarving.png",
                            IsPublished = true,
                            SubmittedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Carving Progress"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "user-2",
                            Category = "",
                            CommunityId = 2,
                            Content = "Starting weaving for the first time. Happy to join this community!",
                            ImageUrl = "/assets/Community Pics/CompleteWeaving.png",
                            IsPublished = true,
                            SubmittedAt = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "New to Weaving"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.AboutFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AboutFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Detailed learning paths from beginner to professional levels in traditional and contemporary art forms.",
                            IconPath = "/assets/Icons/Course.ico",
                            Title = "Structured Course"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Share insights, feedback, and experiences with fellow learners and master artisans.",
                            IconPath = "/assets/Icons/Community.ico",
                            Title = "Community Engagement"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Scheduled real-time query sessions with course instructor for personalized guidance.",
                            IconPath = "/assets/Icons/Sessions.ico",
                            Title = "Live Sessions"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Download courses for offline learning, ensuring accessibility regardless of internet connectivity.",
                            IconPath = "/assets/Icons/Download.ico",
                            Title = "Offline Access"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("SkillBuilder.Models.Artisan", b =>
                {
                    b.Property<string>("ArtisanId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationFile")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArtisanId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Artisans");

                    b.HasData(
                        new
                        {
                            ArtisanId = "A1111111",
                            FirstName = "Alice",
                            Hometown = "Vigan, Ilocos Sur",
                            Introduction = "Alice is a skilled pottery artisan teaching hand-building techniques.",
                            IsApproved = false,
                            IsArchived = false,
                            LastName = "Artisan",
                            Profession = "Pottery Artisan",
                            Role = "Artisan",
                            UserAvatar = "/assets/Avatar/Sample3.ico",
                            UserId = "user-1"
                        },
                        new
                        {
                            ArtisanId = "A1111112",
                            FirstName = "Bob",
                            Hometown = "Cebu City",
                            Introduction = "Bob is an expert in woodcarving with 10 years of experience.",
                            IsApproved = false,
                            IsArchived = false,
                            LastName = "Builder",
                            Profession = "Woodcarving Artisan",
                            Role = "Artisan",
                            UserAvatar = "/assets/Avatar/Sample6.ico",
                            UserId = "user-2"
                        },
                        new
                        {
                            ArtisanId = "A1111113",
                            FirstName = "Charlie",
                            Hometown = "Davao City",
                            Introduction = "Charlie specializes in traditional and modern weaving techniques.",
                            IsApproved = false,
                            IsArchived = false,
                            LastName = "Craftsman",
                            Profession = "Weaving Artisan",
                            Role = "Artisan",
                            UserAvatar = "/assets/Avatar/Sample9.ico",
                            UserId = "user-3"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.ArtisanApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationFile")
                        .HasColumnType("text");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ArtisanApplications");
                });

            modelBuilder.Entity("SkillBuilder.Models.ArtisanWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtisanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.HasIndex("CourseId");

                    b.ToTable("ArtisanWorks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtisanId = "A1111111",
                            Caption = "Handcrafted pottery made using traditional Vigan techniques.",
                            CourseId = 1,
                            ImageUrl = "/assets/Works/JuanWorks1.png",
                            PublishDate = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Classic Handcrafted Pottery"
                        },
                        new
                        {
                            Id = 2,
                            ArtisanId = "A1111111",
                            Caption = "A functional yet beautiful rustic clay pot for everyday use.",
                            CourseId = 2,
                            ImageUrl = "/assets/Works/JuanWorks2.png",
                            PublishDate = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Rustic Clay Pot"
                        },
                        new
                        {
                            Id = 3,
                            ArtisanId = "A1111111",
                            Caption = "An elegant pot showcasing intricate carvings and smooth finishing.",
                            CourseId = 3,
                            ImageUrl = "/assets/Works/JuanWorks3.png",
                            PublishDate = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Elegant Decorative Pot"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("MembersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "/assets/Community Pics/CompletePottery.png",
                            CoverImageUrl = "/uploads/community-banner/PotteryBanner.png",
                            CreatedAt = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = "user-1",
                            Description = "A community for learners and artisans passionate about pottery and ceramics.",
                            IsArchived = false,
                            IsPublished = true,
                            MembersCount = 125,
                            Name = "Pottery Enthusiasts"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "/assets/Community Pics/CompleteWeaving.png",
                            CoverImageUrl = "/uploads/community-banner/WeavingBanner.png",
                            CreatedAt = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = "user-2",
                            Description = "Connecting artisans and learners who love weaving traditional and modern textiles.",
                            IsArchived = false,
                            IsPublished = true,
                            MembersCount = 98,
                            Name = "Weaving Circle"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "/assets/Community Pics/CompleteWoodcarving.png",
                            CoverImageUrl = "/uploads/community-banner/WoodCarvingBanner.png",
                            CreatedAt = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatorId = "user-3",
                            Description = "A space for woodcarvers to share projects, tips, and showcase craftsmanship.",
                            IsArchived = false,
                            IsPublished = true,
                            MembersCount = 150,
                            Name = "Woodcarving Masters"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityHighlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Comments")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommunityHighlights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "/assets/Avatar/Sample1.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet.",
                            Comments = 36,
                            Image = "/assets/Community Pics/Pottery.png",
                            Name = "Maria Santos",
                            Role = "Learner"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "/assets/Avatar/Sample9.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet.",
                            Comments = 18,
                            Image = "/assets/Community Pics/Weaving.png",
                            Name = "James dela Cruz",
                            Role = "Artisan"
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "/assets/Avatar/Sample5.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet.",
                            Comments = 41,
                            Image = "/assets/Community Pics/Woodcarving.png",
                            Name = "Kim Navarro",
                            Role = "Researcher"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortMessage")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityJoinRequests");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityMemberships");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityPostReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("CommunityPostReports");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityTestimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CommunityTestimonials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarPath = "/assets/Avatar/Sample1.ico",
                            Comment = "Our platform addresses the urgent need to preserve Philippine cultural and traditional art skills that are at risk of disappearing due to modernization.",
                            Role = "Learner",
                            UserName = "Maria Santos"
                        },
                        new
                        {
                            Id = 2,
                            AvatarPath = "/assets/Avatar/Sample2.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt. Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor.",
                            Role = "Researcher",
                            UserName = "Denise Velasco"
                        },
                        new
                        {
                            Id = 3,
                            AvatarPath = "/assets/Avatar/Sample3.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt.",
                            Role = "Artisan",
                            UserName = "Pamela Cruz"
                        },
                        new
                        {
                            Id = 4,
                            AvatarPath = "/assets/Avatar/Sample4.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor aaa aaa aaa  incididunt lorem ipsum dolor sit.",
                            Role = "Artisan",
                            UserName = "Angela Tiz"
                        },
                        new
                        {
                            Id = 5,
                            AvatarPath = "/assets/Avatar/Sample5.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt. Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor.",
                            Role = "Artisan",
                            UserName = "Marlene Qul"
                        },
                        new
                        {
                            Id = 6,
                            AvatarPath = "/assets/Avatar/Sample6.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur.",
                            Role = "Artisan",
                            UserName = "Brad Kiminda"
                        },
                        new
                        {
                            Id = 7,
                            AvatarPath = "/assets/Avatar/Sample7.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt. Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor.",
                            Role = "Artisan",
                            UserName = "Michael Ramirez"
                        },
                        new
                        {
                            Id = 8,
                            AvatarPath = "/assets/Avatar/Sample8.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on aa aa aa aa adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod.",
                            Role = "Artisan",
                            UserName = "Ella Parilla"
                        },
                        new
                        {
                            Id = 9,
                            AvatarPath = "/assets/Avatar/Sample9.ico",
                            Comment = "Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem .   aaa aaa aa aaa aa aa aa aa  ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor incididunt. Lorem ipsum dolor sit amet, consectetur on adipiscing elit, eiusmod tempor.",
                            Role = "Artisan",
                            UserName = "James Dawg"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinalProjectDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinalProjectTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Video")
                        .HasColumnType("text");

                    b.Property<string>("WhatToLearn")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Pottery",
                            CreatedAt = new DateTime(2024, 5, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "A1111111",
                            Difficulty = "Beginner",
                            Duration = "15 hours",
                            FinalProjectDescription = "Design, shape, and glaze a personalized vase as your final pottery project.",
                            FinalProjectTitle = "Create Your Own Clay Vase",
                            FullDescription = "This course provides a step-by-step guide to both traditional and modern methods of pottery...",
                            ImageUrl = "/assets/Courses Pics/Pottery.png",
                            IsArchived = false,
                            IsPublished = true,
                            Link = "pottery",
                            Overview = "Pottery is the art and craft of shaping and firing clay...",
                            Requirements = "Clay, a pottery wheel or hand-building tools, access to a kiln, apron, and sponges.",
                            Thumbnail = "/assets/Courses Pics/Pottery.png",
                            Title = "Pottery",
                            Video = "/assets/Videos/Pottery.mp4",
                            WhatToLearn = "You'll learn pottery basics, hand-building, wheel throwing, and glazing techniques."
                        },
                        new
                        {
                            Id = 2,
                            Category = "Wood Carving",
                            CreatedAt = new DateTime(2024, 5, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "A1111112",
                            Difficulty = "Intermediate",
                            Duration = "29 hours",
                            FinalProjectDescription = "Apply your skills by carving a detailed animal figurine as your capstone project.",
                            FinalProjectTitle = "Carve a Wooden Animal Figurine",
                            FullDescription = "Explore the detailed world of woodcarving through this course...",
                            ImageUrl = "/assets/Courses Pics/Woodcarving.png",
                            IsArchived = false,
                            IsPublished = true,
                            Link = "woodcarving",
                            Overview = "Woodcarving is the art of shaping and sculpting wood...",
                            Requirements = "Carving knives, gouges, mallet, sandpaper, safety gloves, and carving wood (basswood recommended).",
                            Thumbnail = "/assets/Courses Pics/Woodcarving.png",
                            Title = "Woodcarving",
                            Video = "/assets/Videos/Wood Carving.mp4",
                            WhatToLearn = "You'll learn carving techniques like relief carving, whittling, chip carving, and finishing."
                        },
                        new
                        {
                            Id = 3,
                            Category = "Weaving",
                            CreatedAt = new DateTime(2024, 5, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "A1111113",
                            Difficulty = "Professional",
                            Duration = "18 hours",
                            FinalProjectDescription = "Plan and weave a wall hanging using advanced techniques to showcase your weaving skills.",
                            FinalProjectTitle = "Design a Handwoven Wall Hanging",
                            FullDescription = "This advanced course in weaving introduces students to both traditional and experimental textile design...",
                            ImageUrl = "/assets/Courses Pics/Weaving.png",
                            IsArchived = false,
                            IsPublished = true,
                            Link = "weaving",
                            Overview = "Weaving is the craft of interlacing threads or fibers...",
                            Requirements = "Table or floor loom, warp and weft yarns, weaving comb, shuttles, and scissors.",
                            Thumbnail = "/assets/Courses Pics/Weaving.png",
                            Title = "Weaving",
                            Video = "/assets/Videos/Weaving.mp4",
                            WhatToLearn = "You’ll explore techniques in tapestry weaving, loom setup, fiber selection, and pattern creation."
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseMaterials");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseModules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Order = 0,
                            Title = "Introduction"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Order = 0,
                            Title = "History"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Order = 0,
                            Title = "Session"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            Order = 0,
                            Title = "Quiz"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            Order = 0,
                            Title = "Introduction"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 2,
                            Order = 0,
                            Title = "History"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 2,
                            Order = 0,
                            Title = "Session"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 2,
                            Order = 0,
                            Title = "Quiz"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 3,
                            Order = 0,
                            Title = "Introduction"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 3,
                            Order = 0,
                            Title = "History"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 3,
                            Order = 0,
                            Title = "Session"
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 3,
                            Order = 0,
                            Title = "Quiz"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseProjectSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseProjectSubmissions");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "An excellent course! The mentor was very knowledgeable.",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 6, 4, 16, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = "A1111111"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Really enjoyed learning pottery. A few lessons were a bit fast though.",
                            CourseId = 1,
                            CreatedAt = new DateTime(2024, 6, 9, 16, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 4,
                            UserId = "A1111111"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Very hands-on and engaging! Perfect for intermediate learners.",
                            CourseId = 3,
                            CreatedAt = new DateTime(2024, 6, 14, 16, 0, 0, 0, DateTimeKind.Utc),
                            Rating = 5,
                            UserId = "A1111111"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("DigitalSignatureUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FinalProjectStatus")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SkillBuilder.Models.ModuleContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentText")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleId");

                    b.ToTable("ModuleContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentText = "Pottery intro content something anything.",
                            ContentType = "Video",
                            CourseModuleId = 1,
                            MediaUrl = "/assets/Videos/Pottery.mp4",
                            Order = 0,
                            Title = "Welcome to Pottery"
                        },
                        new
                        {
                            Id = 16,
                            ContentText = "Learn about clay, tools, and equipment.",
                            ContentType = "Image + Text",
                            CourseModuleId = 2,
                            MediaUrl = "/assets/Courses Pics/Pottery.png",
                            Order = 0,
                            Title = "Pottery Materials"
                        },
                        new
                        {
                            Id = 17,
                            ContentText = "Step by step techniques for beginners.",
                            ContentType = "Image + Text",
                            CourseModuleId = 2,
                            MediaUrl = "/assets/Courses Pics/Pottery1.png",
                            Order = 0,
                            Title = "Basic Pottery Techniques"
                        },
                        new
                        {
                            Id = 2,
                            ContentText = "History content something anything.",
                            ContentType = "Image + Text",
                            CourseModuleId = 2,
                            MediaUrl = "/assets/Courses Pics/Pottery2.png",
                            Order = 0,
                            Title = "History of Pottery"
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "Session",
                            CourseModuleId = 3,
                            Order = 0,
                            Title = "Live Pottery Session"
                        },
                        new
                        {
                            Id = 5,
                            ContentText = "Woodcarving intro content something anything.",
                            ContentType = "Video",
                            CourseModuleId = 6,
                            MediaUrl = "/assets/Videos/Wood Carving.mp4",
                            Order = 0,
                            Title = "Welcome to Woodcarving"
                        },
                        new
                        {
                            Id = 18,
                            ContentText = "Learn about wood types suitable for carving.",
                            ContentType = "Image + Text",
                            CourseModuleId = 7,
                            MediaUrl = "/assets/Courses Pics/Woodcarving.png",
                            Order = 0,
                            Title = "Wood Types"
                        },
                        new
                        {
                            Id = 19,
                            ContentText = "Introduction to essential carving tools.",
                            ContentType = "Image + Text",
                            CourseModuleId = 7,
                            MediaUrl = "/assets/Courses Pics/Woodcarving1.png",
                            Order = 0,
                            Title = "Basic Carving Tools"
                        },
                        new
                        {
                            Id = 6,
                            ContentText = "History content something anything.",
                            ContentType = "Image + Text",
                            CourseModuleId = 7,
                            MediaUrl = "/assets/Courses Pics/Woodcarving2.png",
                            Order = 0,
                            Title = "History of Woodcarving"
                        },
                        new
                        {
                            Id = 7,
                            ContentType = "Session",
                            CourseModuleId = 8,
                            Order = 0,
                            Title = "Live Woodcarving Session"
                        },
                        new
                        {
                            Id = 9,
                            ContentText = "Weaving intro content something anything.",
                            ContentType = "Video",
                            CourseModuleId = 11,
                            MediaUrl = "/assets/Videos/Weaving.mp4",
                            Order = 0,
                            Title = "Welcome to Weaving"
                        },
                        new
                        {
                            Id = 20,
                            ContentText = "Learn about threads, yarns, and tools.",
                            ContentType = "Image + Text",
                            CourseModuleId = 12,
                            MediaUrl = "/assets/Courses Pics/Weaving.png",
                            Order = 0,
                            Title = "Weaving Materials"
                        },
                        new
                        {
                            Id = 21,
                            ContentText = "Step by step weaving techniques.",
                            ContentType = "Image + Text",
                            CourseModuleId = 12,
                            MediaUrl = "/assets/Courses Pics/Weaving1.png",
                            Order = 0,
                            Title = "Basic Weaving Techniques"
                        },
                        new
                        {
                            Id = 10,
                            ContentText = "History content something anything.",
                            ContentType = "Image + Text",
                            CourseModuleId = 12,
                            MediaUrl = "/assets/Courses Pics/Weaving2.png",
                            Order = 0,
                            Title = "History of Weaving"
                        },
                        new
                        {
                            Id = 11,
                            ContentType = "Session",
                            CourseModuleId = 13,
                            Order = 0,
                            Title = "Live Weaving Session"
                        },
                        new
                        {
                            Id = 13,
                            ContentType = "Quiz",
                            CourseModuleId = 4,
                            Order = 0,
                            Title = "Pottery Quiz"
                        },
                        new
                        {
                            Id = 14,
                            ContentType = "Quiz",
                            CourseModuleId = 9,
                            Order = 0,
                            Title = "Woodcarving Quiz"
                        },
                        new
                        {
                            Id = 15,
                            ContentType = "Quiz",
                            CourseModuleId = 14,
                            Order = 0,
                            Title = "Weaving Quiz"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.ModuleProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<int>>("CompletedModules")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("CourseModuleId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleId");

                    b.ToTable("ModuleProgress");
                });

            modelBuilder.Entity("SkillBuilder.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionText")
                        .HasColumnType("text");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActioned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SkillBuilder.Models.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("text");

                    b.Property<int>("ModuleContentId")
                        .HasColumnType("integer");

                    b.Property<string>("OptionA")
                        .HasColumnType("text");

                    b.Property<string>("OptionB")
                        .HasColumnType("text");

                    b.Property<string>("OptionC")
                        .HasColumnType("text");

                    b.Property<string>("OptionD")
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModuleContentId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "Clay",
                            ModuleContentId = 13,
                            OptionA = "Wood",
                            OptionB = "Metal",
                            OptionC = "Clay",
                            OptionD = "Plastic",
                            Question = "What is the main material used in pottery?"
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "Wheel Throwing",
                            ModuleContentId = 13,
                            OptionA = "Sculpting",
                            OptionB = "Weaving",
                            OptionC = "Wheel Throwing",
                            OptionD = "Casting",
                            Question = "Which technique is used in pottery?"
                        },
                        new
                        {
                            Id = 3,
                            CorrectAnswer = "1000°C",
                            ModuleContentId = 13,
                            OptionA = "100°C",
                            OptionB = "400°C",
                            OptionC = "1000°C",
                            OptionD = "2000°C",
                            Question = "What temperature does a kiln usually reach?"
                        },
                        new
                        {
                            Id = 4,
                            CorrectAnswer = "Coating",
                            ModuleContentId = 13,
                            OptionA = "Painting",
                            OptionB = "Coating",
                            OptionC = "Mixing",
                            OptionD = "Breaking",
                            Question = "What is glazing in pottery?"
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = "Remove air bubbles",
                            ModuleContentId = 13,
                            OptionA = "Decorate it",
                            OptionB = "Remove air bubbles",
                            OptionC = "Color it",
                            OptionD = "Dry it faster",
                            Question = "Why do we wedge clay?"
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = "Chisel",
                            ModuleContentId = 14,
                            OptionA = "Pencil",
                            OptionB = "Chisel",
                            OptionC = "Brush",
                            OptionD = "Hammer",
                            Question = "What tool is essential in woodcarving?"
                        },
                        new
                        {
                            Id = 7,
                            CorrectAnswer = "Basswood",
                            ModuleContentId = 14,
                            OptionA = "Oak",
                            OptionB = "Basswood",
                            OptionC = "Mahogany",
                            OptionD = "Pine",
                            Question = "Which wood is best for beginners?"
                        },
                        new
                        {
                            Id = 8,
                            CorrectAnswer = "Cutting out small designs",
                            ModuleContentId = 14,
                            OptionA = "Removing chips",
                            OptionB = "Cutting out small designs",
                            OptionC = "Joining wood",
                            OptionD = "Painting wood",
                            Question = "What is chip carving?"
                        },
                        new
                        {
                            Id = 9,
                            CorrectAnswer = "Both A and B",
                            ModuleContentId = 14,
                            OptionA = "Gloves",
                            OptionB = "Mask",
                            OptionC = "Both A and B",
                            OptionD = "None",
                            Question = "Safety gear includes?"
                        },
                        new
                        {
                            Id = 10,
                            CorrectAnswer = "Sharp and clean",
                            ModuleContentId = 14,
                            OptionA = "Wet",
                            OptionB = "Rusty",
                            OptionC = "Sharp and clean",
                            OptionD = "Scattered",
                            Question = "How should tools be stored?"
                        },
                        new
                        {
                            Id = 11,
                            CorrectAnswer = "Loom",
                            ModuleContentId = 15,
                            OptionA = "Hook",
                            OptionB = "Loom",
                            OptionC = "Needle",
                            OptionD = "Stick",
                            Question = "What tool is used to hold threads in weaving?"
                        },
                        new
                        {
                            Id = 12,
                            CorrectAnswer = "Horizontally",
                            ModuleContentId = 15,
                            OptionA = "Vertically",
                            OptionB = "Diagonally",
                            OptionC = "Horizontally",
                            OptionD = "Randomly",
                            Question = "Weft yarns go?"
                        },
                        new
                        {
                            Id = 13,
                            CorrectAnswer = "Twill",
                            ModuleContentId = 15,
                            OptionA = "Zigzag",
                            OptionB = "Twill",
                            OptionC = "Spin",
                            OptionD = "Knot",
                            Question = "Which is a basic weave pattern?"
                        },
                        new
                        {
                            Id = 14,
                            CorrectAnswer = "Design",
                            ModuleContentId = 15,
                            OptionA = "Sound",
                            OptionB = "Texture",
                            OptionC = "Design",
                            OptionD = "Hardness",
                            Question = "Color theory helps with?"
                        },
                        new
                        {
                            Id = 15,
                            CorrectAnswer = "Structure",
                            ModuleContentId = 15,
                            OptionA = "Decoration",
                            OptionB = "Structure",
                            OptionC = "Noise",
                            OptionD = "Glazing",
                            Question = "What is the purpose of warp threads?"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.SupportSessionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeetingLink")
                        .HasColumnType("text");

                    b.Property<string>("MeetingPlatform")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("SessionTime")
                        .HasColumnType("interval");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportSessionRequests");
                });

            modelBuilder.Entity("SkillBuilder.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetOtp")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedInterests")
                        .HasColumnType("text");

                    b.Property<string>("UserAvatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("/assets/Avatar/Sample10.svg");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "A1111111",
                            CreatedAt = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "juan@example.com",
                            FirstName = "Juan",
                            IsArchived = false,
                            IsDeactivated = false,
                            IsVerified = true,
                            LastName = "Dela Cruz",
                            PasswordHash = "hashedpw",
                            Points = 0,
                            Role = "Learner",
                            UserAvatar = "/assets/Avatar/Sample10.svg"
                        },
                        new
                        {
                            Id = "user-1",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alice@test.com",
                            FirstName = "Alice",
                            IsArchived = false,
                            IsDeactivated = false,
                            IsVerified = true,
                            LastName = "Artisan",
                            PasswordHash = "dummyhash1",
                            Points = 10,
                            Role = "Learner",
                            SelectedInterests = "Crafts, Sewing",
                            UserAvatar = "/assets/Avatar/Sample3.ico"
                        },
                        new
                        {
                            Id = "user-2",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bob@test.com",
                            FirstName = "Bob",
                            IsArchived = false,
                            IsDeactivated = false,
                            IsVerified = false,
                            LastName = "Builder",
                            PasswordHash = "dummyhash2",
                            Points = 5,
                            Role = "Learner",
                            SelectedInterests = "Woodwork, DIY",
                            UserAvatar = "/assets/Avatar/Sample6.ico"
                        },
                        new
                        {
                            Id = "user-3",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "charlie@test.com",
                            FirstName = "Charlie",
                            IsArchived = false,
                            IsDeactivated = false,
                            IsVerified = true,
                            LastName = "Craftsman",
                            PasswordHash = "dummyhash3",
                            Points = 20,
                            Role = "Learner",
                            SelectedInterests = "Painting, Pottery",
                            UserAvatar = "/assets/Avatar/Sample9.ico"
                        });
                });

            modelBuilder.Entity("SkillBuilder.Models.UserInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Interest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("CommunityPost", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId");

                    b.Navigation("Author");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("SkillBuilder.Models.Admin", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.Artisan", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithOne("Artisan")
                        .HasForeignKey("SkillBuilder.Models.Artisan", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.ArtisanApplication", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.ArtisanWork", b =>
                {
                    b.HasOne("SkillBuilder.Models.Artisan", "Artisan")
                        .WithMany("Works")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("ArtisanWorks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Artisan");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SkillBuilder.Models.Community", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityJoinRequest", b =>
                {
                    b.HasOne("SkillBuilder.Models.Community", "Community")
                        .WithMany("JoinRequests")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany("CommunityJoinRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityMembership", b =>
                {
                    b.HasOne("SkillBuilder.Models.Community", "Community")
                        .WithMany("Memberships")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.CommunityPostReport", b =>
                {
                    b.HasOne("CommunityPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SkillBuilder.Models.Course", b =>
                {
                    b.HasOne("SkillBuilder.Models.Artisan", "Artisan")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseMaterial", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("Materials")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseModule", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseProjectSubmission", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("ProjectSubmissions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany("ProjectSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseReview", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.Enrollment", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.ModuleContent", b =>
                {
                    b.HasOne("SkillBuilder.Models.CourseModule", "CourseModule")
                        .WithMany("Contents")
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModule");
                });

            modelBuilder.Entity("SkillBuilder.Models.ModuleProgress", b =>
                {
                    b.HasOne("SkillBuilder.Models.CourseModule", "CourseModule")
                        .WithMany("Progresses")
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModule");
                });

            modelBuilder.Entity("SkillBuilder.Models.Notification", b =>
                {
                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.QuizQuestion", b =>
                {
                    b.HasOne("SkillBuilder.Models.ModuleContent", "ModuleContent")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("ModuleContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleContent");
                });

            modelBuilder.Entity("SkillBuilder.Models.SupportSessionRequest", b =>
                {
                    b.HasOne("SkillBuilder.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillBuilder.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillBuilder.Models.Artisan", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("SkillBuilder.Models.Community", b =>
                {
                    b.Navigation("JoinRequests");

                    b.Navigation("Memberships");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SkillBuilder.Models.Course", b =>
                {
                    b.Navigation("ArtisanWorks");

                    b.Navigation("CourseModules");

                    b.Navigation("Enrollments");

                    b.Navigation("Materials");

                    b.Navigation("ProjectSubmissions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SkillBuilder.Models.CourseModule", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("SkillBuilder.Models.ModuleContent", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("SkillBuilder.Models.User", b =>
                {
                    b.Navigation("Artisan");

                    b.Navigation("CommunityJoinRequests");

                    b.Navigation("Enrollments");

                    b.Navigation("Memberships");

                    b.Navigation("ProjectSubmissions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
