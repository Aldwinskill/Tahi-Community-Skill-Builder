@model SkillBuilder.Models.Course
@using System.Text.Json

@{
    var progress = ViewData["CourseProgress"] != null ? (double)ViewData["CourseProgress"] : 0;
    ViewData["UseCourseNavbar"] = true;
    var courseModules = Model.CourseModules.ToList();
    var moduleDataIndex = 0;
}

<style>
    .course-module-container {
        margin-top: 5rem;
        display: flex;
        width: 100%;
        background-color: #f3f3f3;
        flex-direction: column;
    }

    .course-module-header {
        width: 100%;
        background-color: #ddd;
        padding: 2rem 4rem;
        font-size: 2.2rem;
        font-weight: bold;
        color: #222;
        text-align: left;
    }

    .course-module-body {
        display: flex;
        padding: 2rem 4rem;
        gap: 2rem;
    }

    .progress-header {
        position: relative;
        background-color: #f8f8f8;
        padding: 1.5rem 4rem 3rem;
        border-bottom: 1px solid #ccc;
    }

    .course-title {
        font-size: 1.8rem;
        font-weight: bold;
        color: #222;
    }

    .course-progress-label {
        position: absolute;
        right: 4rem;
        top: 1.6rem;
        font-size: 1.2rem;
        color: #364BE9;
        font-weight: 600;
    }

    .course-progress-bar {
        position: absolute;
        bottom: 1rem;
        left: 4rem;
        right: 4rem;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
    }

        .course-progress-bar .filled {
            height: 100%;
            background-color: #344AEA;
            border-radius: 5px 0 0 5px;
            transition: width 0.4s ease-in-out;
        }

    /* Left side */
    .module-sidebar {
        width: 25%;
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
    }

        .module-sidebar h2 {
            font-size: 1.4rem;
            margin-bottom: 1.5rem;
            color: #344AEA;
        }

    .module-chapter {
        margin-bottom: 2rem;
    }

        .module-chapter h3 {
            font-size: 1.1rem;
            font-weight: bold;
            color: #444;
            margin-bottom: 0.8rem;
        }

    .module-tab {
        padding: 0.75rem 1rem;
        margin-bottom: 0.5rem;
        background-color: #E0F2FF;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        color: #333;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .module-tab.locked {
            background-color: #ccc;
            color: #888;
            cursor: not-allowed;
        }

            .module-tab.locked::after {
                content: '🔒';
                float: right;
                margin-left: 8px;
                color: #666;
            }

        .module-tab:hover:not(.locked) {
            background-color: #cde7fa;
        }

        .module-tab.active {
            background-color: #364BE9;
            color: white;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    /* Right side */
    .module-content {
        width: 75%;
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
        position: relative;
        min-height: 600px;
        display: flex;
        flex-direction: column;
    }

        .module-content h1 {
            font-size: 1.6rem;
            margin-bottom: 1rem;
            color: #344AEA;
        }

        .module-content p {
            font-size: 1rem;
            color: #444;
            line-height: 1.6;
        }

        .module-content button:disabled {
            background-color: #aaa !important;
            cursor: not-allowed !important;
            opacity: 0.6;
        }

    .centered-module-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    video {
        border-radius: 8px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.1);
    }

    .module-tab.completed {
        background-color: #c0e8c0;
        font-weight: bold;
        position: relative;
    }

    .time-option {
        background-color: #eee;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

        .time-option.selected {
            background-color: #344AEA;
            color: white;
            font-weight: bold;
        }

    .quiz-launch-btn, .session-launch-btn {
        padding: 1rem 2rem;
        background-color: #344AEA;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .quiz-launch-btn:hover, .session-launch-btn:hover {
            background-color: #263ebf;
        }

    #quizModal {
        display: none;
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

        #quizModal.show {
            display: flex;
        }

    .quizModal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 600px;
        max-width: 90%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1.5rem;
        position: relative;
    }

    /* Progress Bar */
    .quiz-progress-bar {
        width: 100%;
        height: 6px;
        background-color: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

        .quiz-progress-bar .filled {
            height: 100%;
            background-color: #344AEA;
            width: 0%;
            transition: width 0.4s ease;
        }

    /* Question Text */
    #questionText {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        text-align: center;
    }

    /* Answer Grid */
    #quizOptions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        width: 100%;
    }

    .quiz-option {
        background-color: #f1f1f1;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
        user-select: none;
    }

        .quiz-option:hover {
            background-color: #e0e0e0;
        }

        .quiz-option.selected {
            background-color: #d4e4ff;
            font-weight: bold;
        }

    /* Submit Button */
    #submitAnswerBtn {
        padding: 0.75rem 1.5rem;
        background-color: #344AEA;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        margin-top: 1rem;
        align-self: flex-end;
    }

        #submitAnswerBtn:disabled {
            background-color: #aaa;
            cursor: not-allowed;
            opacity: 0.6;
        }

    /* Feedback Popup */
    #feedbackPopup {
        position: fixed;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        background-color: #344AEA;
        color: white;
        padding: 1rem 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        display: none;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        animation: fadeInUp 0.4s ease;
    }

        #feedbackPopup.wrong {
            background-color: #e74c3c;
        }

        #feedbackPopup button {
            background-color: white;
            color: #344AEA;
            padding: 0.5rem 1.2rem;
            font-weight: 600;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s;
        }

        #feedbackPopup.wrong button {
            color: #e74c3c;
        }

    #feedbackBox {
        display: flex;
        flex-direction: column; /* ✅ Stack vertically */
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-top: 2rem;
    }

    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-box {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 500px;
        text-align: center;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }

    .modal-box {
        animation: popUp 0.3s ease-out;
    }

    .points-popup {
        display: none;
        position: fixed;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        z-index: 9999;
        animation: popUpFade 3s ease forwards;
    }

    .points-popup-content {
        background-color: #344AEA;
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-size: 1.2rem;
        font-weight: bold;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .activity-upload-form {
        margin-top: 2rem;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    .upload-group {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .activity-upload-form {
        margin-top: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .activity-upload-label {
        font-weight: 500;
        color: #333;
        margin-bottom: 0.25rem;
    }

    .activity-upload-input {
        padding: 0.4rem;
        text-align: center;
    }

    .activity-preview {
        max-width: 100%;
        max-height: 300px;
        border-radius: 8px;
        display: none;
    }

    .activity-upload-btn {
        background-color: #344AEA;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
    }

        .activity-upload-btn:hover {
            background-color: #2A3EC1;
            color: #FFFF00;
        }

</style>

<div class="course-module-container">
    <button id="resetBtn">Reset Progress</button>
    <!-- Header -->
    <div class="course-module-header progress-header">
        <span class="course-title">@Model.Title</span>
        <span class="course-progress-label">@progress%</span>
        <div class="course-progress-bar">
            <div class="filled" style="width: @progress%;"></div>
        </div>
    </div>

    <!-- Body -->
    <div class="course-module-body">
        <!-- Sidebar -->
        <div class="module-sidebar">
            <h2>Course Content</h2>
            @for (int i = 0; i < courseModules.Count; i++)
            {
                var mod = courseModules[i];
                var contents = mod.Contents.ToList();
                    <div class="module-chapter">
                    <h3>Module @(@i + 1): @mod.Title</h3>
                    @for (int j = 0; j < contents.Count; j++)
                    {
                        var lesson = contents[j];
                        <div class="module-tab @(i == 0 && j == 0 ? "active" : "locked")" data-tab="@(moduleDataIndex++)">
                            @lesson.Title
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Right Content Area -->
        <div class="module-content" id="moduleContent">
            <!-- dynamic content goes here -->
        </div>
    </div>

    <div id="sessionModal" class="modal-overlay">
        <div class="modal-box" style="max-width: 500px;">
            <h1 style="color:#344AEA; margin-bottom: 1.5rem;">Schedule a Live Session</h1>

            <!-- Date Selection -->
            <label for="sessionDate" style="display:block; margin-bottom: 0.5rem; text-align:left;">Date</label>
            <input type="date" id="sessionDate" style="width: 100%; padding: 0.5rem; margin-bottom: 1.2rem;" />

            <!-- Time Input -->
            <label for="sessionTime" style="display:block; margin-bottom: 0.5rem; text-align:left;">Time</label>
            <input type="time" id="sessionTime" style="width: 100%; padding: 0.5rem; margin-bottom: 1.2rem;" />

            <!-- Message -->
            <label for="sessionMessage" style="display:block; margin-bottom: 0.5rem; text-align:left;">Message</label>
            <textarea id="sessionMessage" placeholder="Write your message here..." style="width: 100%; padding: 0.5rem; height: 100px; margin-bottom: 1.5rem;"></textarea>

            <!-- Buttons -->
            <div style="text-align: right;">
                <button onclick="closeSessionModal()" style="padding: 0.75rem 1.5rem; margin-right: 1rem;">Cancel</button>
                <button onclick="sendSessionRequest()" class="quiz-launch-btn">Send Request</button>
            </div>
        </div>
    </div>

    <div id="quizModal">
        <div class="quizModal-content">
            <div class="quiz-progress-bar">
                <div class="filled" id="quizProgressFilled"></div>
            </div>

            <div id="quizBox">
                <h2 id="questionText">Question</h2>
                <div id="quizOptions" style="margin-top:1rem;"></div>
                <button id="submitAnswerBtn" onclick="submitAnswer()" style="margin-top:1rem;" disabled>Submit</button>
            </div>

            <div id="feedbackBox" style="display:none;">
                <p id="feedbackMsg" style="font-size: 1.1rem; text-align: center;"></p>
                <div style="display: flex; gap: 1rem;">
                    <button onclick="tryAgain()">Try Again</button>
                    <button onclick="nextQuestion()">Continue</button>
                </div>
            </div>
        </div>
    </div>

    <div id="quizCompleteModal" class="modal-overlay">
        <div class="modal-box">
            <h1 style="color:#344AEA; margin-bottom:1rem;">Quiz Complete!</h1>
            <p style="font-size:1.2rem; color:#333;">You've finished the quiz.</p>
            <p style="font-size:1.1rem; margin: 1.5rem 0; color:#444;">
                Your Score: <strong id="quizScore" style="color:#344AEA; font-size:1.3rem;">0</strong>
            </p>
            <button id="continueNextBtn" onclick="exitQuizModal()" class="quiz-launch-btn" style="margin-top:1rem;" disabled>
                Continue Course
            </button>
        </div>
    </div>

    <div id="pointsPopup" class="points-popup">
        <div class="points-popup-content">
            <span id="pointsMessage">+10 Points!</span>
        </div>
    </div>
</div>

@{
    moduleDataIndex = 0; // reset for accurate index
}

<!-- Full Logic Script -->
<script>

    window.addEventListener('DOMContentLoaded', () => {
        const moduleData = [];
        @for (int i = 0; i < courseModules.Count; i++)
        {
                var contents = courseModules[i].Contents.ToList();
                for (int j = 0; j < contents.Count; j++)
                {
                        var content = contents[j];
                        var quizList = (content.QuizQuestions ?? new List<SkillBuilder.Models.QuizQuestion>())
                                .Select(q => new
                                {
                                        question = q.Question,
                                        options = new[] { q.OptionA, q.OptionB, q.OptionC, q.OptionD },
                                        correctAnswer = q.CorrectAnswer
                                });

                        <text>
                            moduleData.push({
                                title: @Html.Raw(JsonSerializer.Serialize(content.Title)),
                                type: @Html.Raw(JsonSerializer.Serialize(content.ContentType ?? "Text")),
                                contentText: @Html.Raw(JsonSerializer.Serialize(content.ContentText ?? "")),
                                mediaUrl: @Html.Raw(JsonSerializer.Serialize(content.MediaUrl ?? "")),
                                quizQuestions: @Html.Raw(JsonSerializer.Serialize(quizList)),
                                showDetails: @Html.Raw(JsonSerializer.Serialize(i == 0 && j == 0))
                            });
                        </text>
                }
        }

        const moduleTabs = document.querySelectorAll(".module-tab");
        const moduleContent = document.getElementById("moduleContent");
        let completedModules = JSON.parse(localStorage.getItem("progress_course_@Model.Id")) || [];
        let dynamicQuizQuestions = [];
        let nextBtn = null;
        let quizCompleted = false;
        const resetBtn = document.getElementById("resetBtn");
        if (resetBtn) {
            resetBtn.addEventListener("click", resetProgress);
        }

        try {
            const stored = JSON.parse(localStorage.getItem("progress_course_@Model.Id"));
            if (Array.isArray(stored)) {
                completedModules = stored;
            }
        } catch (err) {
            completedModules = [];
        }

        function validateCompletedModules() {
            completedModules = completedModules.filter((idx, i) => {
                if (idx === 0) return true;
                return completedModules.includes(idx - 1);
            });
        }

        console.log("completedModules:", completedModules);

        function updateModuleTabs() {
            moduleTabs.forEach((tab, idx) => {
                tab.classList.remove("active", "completed", "locked");

                if (completedModules.includes(idx)) {
                    tab.classList.add("completed");
                }

                if (idx === 0 || completedModules.includes(idx - 1)) {
                    tab.classList.remove("locked");
                } else {
                    tab.classList.add("locked");
                }
            });

            const savedActiveIndex = parseInt(localStorage.getItem("active_tab_@Model.Id"));
            let targetIndex = !isNaN(savedActiveIndex) ? savedActiveIndex : 0;

            if (targetIndex !== 0 && !completedModules.includes(targetIndex - 1)) {
                targetIndex = completedModules.length > 0 ? Math.max(...completedModules) : 0;
            }

            moduleTabs.forEach(t => t.classList.remove("active"));

            if (moduleTabs[targetIndex]) {
                moduleTabs[targetIndex].classList.add("active");
                loadTab(targetIndex);
            }

            updateProgressDisplay();
        }

        function showPointsPopup(points) {
            const popup = document.getElementById("pointsPopup");
            const msg = document.getElementById("pointsMessage");

            msg.innerText = `+${points} Points!`;
            popup.style.display = "flex";

            // Update the visible points counter (UI only)
            const display = document.getElementById("pointsDisplay");
            if (display) {
                const current = parseInt(display.innerText) || 0;
                display.innerText = current + points;
            }

            setTimeout(() => {
                popup.style.display = "none";
            }, 3000);
        }

        function updateProgressDisplay() {
            if (moduleTabs.length === 0) return;
            const percentage = Math.round((new Set(completedModules).size / moduleTabs.length) * 100);
            document.querySelector(".course-progress-label").innerText = `${percentage}%`;
            document.querySelector(".course-progress-bar .filled").style.width = `${percentage}%`;
        }

        function resetProgress() {
            if (!confirm("Are you sure you want to reset your course progress?")) return;

            fetch("/Courses/ResetProgress", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ courseId: @Model.Id })
            })
            .then(response => {
                if (!response.ok) throw new Error("Failed to reset progress");
                return response.json();
            })
            .then(() => {
                localStorage.removeItem(`progress_course_@Model.Id`);
                localStorage.removeItem(`active_tab_@Model.Id`);

                completedModules = [];
                validateCompletedModules();
                updateModuleTabs();
                updateProgressDisplay();

                setTimeout(() => {
                    location.reload();
                }, 500);
            })
            .catch(err => {
                alert("An error occurred while resetting progress.");
                console.error(err);
            });
        }


        function syncProgressWithServer() {
            console.log("⏳ Syncing to server:", completedModules);
            fetch('/Courses/UpdateProgress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ courseId: '@Model.Id', completedModules })
            })
            .then(res => res.ok ? console.log("✅ Progress synced") : console.error("❌ Sync failed"))
            .catch(err => console.error("❌ Error syncing:", err));
        }

        function showNextButton(index) {
            const wrapper = document.createElement("div");
            wrapper.classList.add("next-btn-wrapper");
            wrapper.style.marginTop = "2rem";
            wrapper.style.textAlign = "right";

            const btn = document.createElement("button");
            btn.innerText = "Next";
            btn.className = "quiz-launch-btn";
            btn.onclick = () => goToNextTab(index);

            wrapper.appendChild(btn);
            moduleContent.appendChild(wrapper);
        }

        function loadTab(index) {
            const data = moduleData[index];
            moduleContent.innerHTML = `<div id="moduleInnerContent" class="centered-module-content"></div>`;
            const inner = document.getElementById("moduleInnerContent");

            if (!data || !data.type) {
                moduleContent.innerHTML = `
                    <div style="text-align:center; padding: 3rem;">
                        <h1>No content found for this lesson.</h1>
                    </div>`;
                return;
            }

            // TEXT CONTENT
            if (data.type === "Text") {
                inner.innerHTML = `
                    <h1>${data.title}</h1>
                    <p>${data.contentText}</p>
                `;
                showNextButton(index);
            }

            else if (data.type === "Activity") {
                inner.innerHTML = `
                    <h1 style="text-align:center;">${data.title}</h1>
                    <p style="text-align:center;">${data.contentText}</p>
                    <form id="activityUploadForm" class="activity-upload-form" style="display:flex; flex-direction:column; align-items:center; gap:1rem; margin-top:2rem;">
                        <label for="activityImage" class="activity-upload-label" style="font-weight:bold;">Upload your finished activity:</label>
                        <input type="file" id="activityImage" name="activityImage" accept="image/*" class="activity-upload-input" required style="padding:0.5rem;" />
                        <img id="activityPreview" class="activity-preview" src="" alt="Preview" style="max-width:300px; display:none; border-radius:8px;" />
                        <button type="submit" class="activity-upload-btn quiz-launch-btn" style="padding:0.75rem 1.5rem;">Submit Activity</button>
                    </form>
                `;

                const activityInput = document.getElementById("activityImage");
                const activityPreview = document.getElementById("activityPreview");
                const uploadForm = document.getElementById("activityUploadForm");

                // Preview image on upload
                activityInput.addEventListener("change", function () {
                    const file = this.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            activityPreview.src = e.target.result;
                            activityPreview.style.display = "block";
                        };
                        reader.readAsDataURL(file);
                    } else {
                        activityPreview.src = "";
                        activityPreview.style.display = "none";
                    }
                });

                // Submit image to server
                uploadForm.addEventListener("submit", function (e) {
                    e.preventDefault();

                    const file = activityInput.files[0];
                    if (!file) return alert("Please choose an image to upload.");

                    const formData = new FormData();
                    formData.append("courseId", "@Model.Id");
                    formData.append("activityImage", file);
                    formData.append("ModuleIndex", index);
                    formData.append("LessonTitle", data.title);

                    fetch("/api/UserProfile/UploadActivity", {
                        method: "POST",
                        body: formData
                    })
                    .then(res => {
                        if (!res.ok) throw new Error("Upload failed.");
                        return res.json();
                    })
                    .then(data => {
                        alert("✅ Activity uploaded successfully!");
                        showNextButton(index);
                    })
                    .catch(err => {
                        alert("❌ Failed to upload activity.");
                        console.error(err);
                    });
                });
            }

            // IMAGE + TEXT
            else if (data.type === "Image + Text") {
                inner.innerHTML = `
                    <h1>${data.title}</h1>
                    <img src="${data.mediaUrl}" alt="Image content" style="max-width:100%; border-radius:8px; margin-bottom:1rem;" />
                    <p>${data.contentText}</p>
                `;
                showNextButton(index);
            }

            // VIDEO
            else if (data.type === "Video") {
                const videoEl = document.createElement('video');
                videoEl.controls = true;
                videoEl.style.width = "100%";
                videoEl.innerHTML = `<source src="${data.mediaUrl}" type="video/mp4">Your browser does not support the video tag.`;
                inner.appendChild(videoEl);

                const nextBtnWrapper = document.createElement("div");
                nextBtnWrapper.style.marginTop = "2rem";
                nextBtnWrapper.style.textAlign = "right";

                nextBtn = document.createElement("button");
                nextBtn.innerText = "Next";
                nextBtn.className = "quiz-launch-btn";
                nextBtn.disabled = true;
                nextBtn.onclick = () => goToNextTab(index);

                nextBtnWrapper.appendChild(nextBtn);
                moduleContent.appendChild(nextBtnWrapper);

                videoEl.addEventListener("ended", () => {
                    nextBtn.disabled = false;
                });
            }

            // QUIZ
            else if (data.type === "Quiz") {
                inner.innerHTML = `
                    <div>
                        <h1>${data.title}</h1>
                        <p style="margin-bottom: 2rem; color: #555;">Take this quiz to continue.</p>
                        <button onclick="startDynamicQuizByIndex(${index})" class="quiz-launch-btn">Start Quiz</button>
                    </div>
                `;

                // Create a separate Next button wrapper just like in other modules
                const nextBtnWrapper = document.createElement("div");
                nextBtnWrapper.style.marginTop = "2rem";
                nextBtnWrapper.style.textAlign = "right";

                nextBtn = document.createElement("button");
                nextBtn.innerText = "Next";
                nextBtn.className = "quiz-launch-btn";
                nextBtn.disabled = true;
                nextBtn.onclick = () => goToNextTab(index);

                nextBtnWrapper.appendChild(nextBtn);
                moduleContent.appendChild(nextBtnWrapper);  // 👈 append outside the centered content
            }

            // SESSION
            else if (data.type === "Session") {
                inner.innerHTML = `
                    <div>
                        <h1>${data.title}</h1>
                        <p style="margin-bottom: 2rem; color: #555;">Request a live session to complete for a guided instruction for the course.</p>
                        <button onclick="openSessionModal()" class="session-launch-btn">Request Session</button>
                    </div>
                `;
                showNextButton(index); // ✅ allow proceeding even if not requesting
            }
        }

        function requestLiveSession(title) {
            alert(`A live session request has been sent for: ${title}`);
        }

        function saveProgress() {
            completedModules = [...new Set(completedModules)];

            const activeIndex = parseInt(localStorage.getItem("active_tab_@Model.Id"));
            const maxAllowed = Math.max(...completedModules, 0);

            if (activeIndex > maxAllowed + 1) {
                return;
            }

            localStorage.setItem(`progress_course_@Model.Id`, JSON.stringify(completedModules));
            syncProgressWithServer();
        }

        function goToNextTab(currentIndex) {
            if (currentIndex >= moduleTabs.length) return;

            if (!completedModules.includes(currentIndex)) {
                completedModules.push(currentIndex);
                saveProgress();
                const lessonType = moduleData[currentIndex]?.type || "Text";

                const points = {
                    "Text": 10,
                    "Image + Text": 15,
                    "Video": 20,
                    "Quiz": 10,
                    "Session": 60,
                    "Activity": 100,
                }[lessonType] || 5;

                showPointsPopup(points);
            }

            const nextIndex = currentIndex + 1;

            fetch('/api/ModuleProgress/CompleteModule', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    courseId: @Model.Id,
                    moduleIndex: currentIndex,
                    lessonType: moduleData[currentIndex]?.type || "Text"
                })
            });

            validateCompletedModules();
            updateModuleTabs();

            const nextTab = moduleTabs[nextIndex];

            if (nextTab) {
                nextTab.classList.remove("locked");

                localStorage.setItem("active_tab_@Model.Id", nextIndex);
                moduleTabs.forEach(t => t.classList.remove("active"));
                nextTab.classList.add("active");
                loadTab(nextIndex);
                quizCompleted = false;
            } else {
                alert("🎉 You've completed all modules!");
            }
        }

        moduleTabs.forEach(tab => {
            tab.addEventListener("click", function () {
                const index = parseInt(this.dataset.tab);

                if (this.classList.contains("locked")) return;

                localStorage.setItem("active_tab_@Model.Id", index);

                moduleTabs.forEach(t => t.classList.remove("active"));
                this.classList.add("active");
                loadTab(index);
            });
        });

        let currentQ = 0, selected = null, score = 0;

        function startDynamicQuiz(quizData) {
            console.log("Quiz Started with:", quizData);
            currentQ = 0;
            selected = null;
            score = 0;
            dynamicQuizQuestions = quizData;

            document.getElementById("quizModal").classList.add("show");
            loadDynamicQuestion();

            const nextBtn = document.getElementById("continueNextBtn");
            if (nextBtn) {
                nextBtn.disabled = true;
            }
        }

        window.startDynamicQuizByIndex = function (index) {
            const quizData = moduleData[index]?.quizQuestions || [];
            if (!quizData.length) {
                alert("No quiz data found for this module.");
                return;
            }
            startDynamicQuiz(quizData);
        };

        function exitQuizModal() {
            document.getElementById("quizModal").classList.remove("show");
            document.getElementById("quizCompleteModal").style.display = "none";

            if (nextBtn) nextBtn.disabled = false;
        }

        function loadDynamicQuestion() {
            const q = dynamicQuizQuestions[currentQ];
            selected = null;
            document.getElementById("questionText").innerText = q.question;
            document.getElementById("quizOptions").innerHTML = "";
            document.getElementById("submitAnswerBtn").disabled = true;
            document.getElementById("feedbackBox").style.display = "none";
            document.getElementById("quizBox").style.display = "block";

            const progress = Math.round((currentQ / dynamicQuizQuestions.length) * 100);
            document.getElementById("quizProgressFilled").style.width = `${progress}%`;

            q.options.forEach((option, i) => {
                const btn = document.createElement("div");
                btn.innerText = option;
                btn.className = "quiz-option";
                btn.onclick = () => {
                    document.querySelectorAll(".quiz-option").forEach(el => el.classList.remove("selected"));
                    btn.classList.add("selected");
                    selected = i;
                    document.getElementById("submitAnswerBtn").disabled = false;
                };
                document.getElementById("quizOptions").appendChild(btn);
            });
        }

        function showFeedback(correct) {
            const box = document.getElementById("feedbackBox");
            const msg = document.getElementById("feedbackMsg");

            if (!box || !msg) {
                console.error("⚠️ Missing #feedbackBox or #feedbackMsg in DOM.");
                return;
            }

            box.classList.remove("wrong", "correct");

            if (correct) {
                msg.innerText = "✅ Correct! Well done!";
            } else {
                msg.innerText = "❌ Wrong! Please try again.";
                box.classList.add("wrong");
            }

            box.style.display = "flex";
            document.getElementById("quizBox").style.display = "none";
        }

        function submitAnswer() {
            const q = dynamicQuizQuestions[currentQ];
            const isCorrect = q.options[selected] === q.correctAnswer;

            if (isCorrect) score++;
            showFeedback(isCorrect);
        }

        function tryAgain() {
            loadDynamicQuestion();
        }

        function nextQuestion() {
            currentQ++;
            if (currentQ < dynamicQuizQuestions.length) loadDynamicQuestion();
            else showQuizComplete();
        }

        function showQuizComplete() {
            document.getElementById("quizModal").classList.remove("show");
            document.getElementById("quizCompleteModal").style.display = "flex";

            if (!quizCompleted) {
                showPointsPopup(80);
                quizCompleted = true;
            }

            document.getElementById("quizScore").innerText =
                `${score} / ${dynamicQuizQuestions.length} (${Math.round((score / dynamicQuizQuestions.length) * 100)}%)`;

            document.getElementById("quizProgressFilled").style.width = `100%`;

            const nextBtn = document.getElementById("continueNextBtn");
            if (nextBtn) nextBtn.disabled = false;
        }

        window.openSessionModal = function () {
            document.getElementById("sessionModal").style.display = "flex";
        };

        window.closeSessionModal = function () {
            document.getElementById("sessionModal").style.display = "none";
        };

        window.selectTime = function (button) {
            button.classList.add("selected");
            document.getElementById("customTime").value = "";
        };

        window.sendSessionRequest = function () {
            const date = document.getElementById("sessionDate").value;
            const time = document.getElementById("sessionTime").value;
            const message = document.getElementById("sessionMessage").value;

            if (!date || !time || !message.trim()) {
                alert("Please fill out all fields.");
                return;
            }

            const selectedTabIndex = parseInt(localStorage.getItem("active_tab_@Model.Id")) || 0;
            const currentModule = moduleData[selectedTabIndex];
            const courseId = @Model.Id;
            const courseTitle = @Html.Raw(JsonSerializer.Serialize(Model.Title));
            const lessonTitle = currentModule?.title || "Untitled";

            const payload = {
                CourseId: courseId,
                Title: `Live Session Request - ${lessonTitle}`,
                Message: message,
                SessionDate: date,
                SessionTime: time
            };

            fetch('/SupportSession/CreateRequest', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) throw new Error("Failed to send session request.");
                return res.json();
            })
            .then(data => {
                alert("✅ Session request sent!");
                closeSessionModal();
            })
            .catch(err => {
                alert("❌ An error occurred while sending your request.");
                console.error(err);
            });
        };

        validateCompletedModules();
        updateModuleTabs();

        console.log("Module Data:", moduleData);

        window.submitAnswer = submitAnswer;
        window.tryAgain = tryAgain;
        window.nextQuestion = nextQuestion;
        window.exitQuizModal = exitQuizModal;
        window.openSessionModal = openSessionModal;
        window.closeSessionModal = closeSessionModal;
    });
</script>