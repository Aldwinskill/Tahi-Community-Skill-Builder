@model SkillBuilder.Models.Course
@using System.Text.Json

@{
    var progress = ViewData["CourseProgress"] != null ? (double)ViewData["CourseProgress"] : 0;
    ViewData["UseCourseNavbar"] = true;
    var courseModules = Model.CourseModules.ToList();
    var moduleDataIndex = 0;
    var userId = User.FindFirst("UserId")?.Value;
    var finalProject = Model.ProjectSubmissions.FirstOrDefault(p => p.UserId == userId);
}

<style>
    .course-module-container {
        margin-top: 5rem;
        display: flex;
        width: 100%;
        background-color: #f3f3f3;
        flex-direction: column;
    }

    .course-module-header {
        width: 100%;
        background-color: #ddd;
        padding: 2rem 4rem;
        font-size: 2.2rem;
        font-weight: bold;
        color: #222;
        text-align: left;
    }

    .course-module-body {
        display: flex;
        padding: 2rem 4rem;
        gap: 2rem;
    }

    .progress-header {
        position: relative;
        background-color: #f8f8f8;
        padding: 1.5rem 4rem 3rem;
        border-bottom: 1px solid #ccc;
    }

    .course-title {
        font-size: 1.8rem;
        font-weight: bold;
        color: #222;
    }

    .course-progress-label {
        position: absolute;
        right: 4rem;
        top: 1.6rem;
        font-size: 1.2rem;
        color: #364BE9;
        font-weight: 600;
    }

    .course-progress-bar {
        position: absolute;
        bottom: 1rem;
        left: 4rem;
        right: 4rem;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
    }

        .course-progress-bar .filled {
            height: 100%;
            background-color: #344AEA;
            border-radius: 5px 0 0 5px;
            transition: width 0.4s ease-in-out;
        }

    /* Left side */
    .module-sidebar {
        width: 25%;
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
    }

        .module-sidebar h2 {
            font-size: 1.4rem;
            margin-bottom: 1.5rem;
            color: #344AEA;
        }

    .module-chapter {
        margin-bottom: 2rem;
    }

        .module-chapter h3 {
            font-size: 1.1rem;
            font-weight: bold;
            color: #444;
            margin-bottom: 0.8rem;
        }

    .module-tab {
        padding: 0.75rem 1rem;
        margin-bottom: 0.5rem;
        background-color: #E0F2FF;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        color: #333;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .module-tab.locked {
            background-color: #ccc;
            color: #888;
            cursor: not-allowed;
        }

            .module-tab.locked::after {
                content: '🔒';
                float: right;
                margin-left: 8px;
                color: #666;
            }

        .module-tab:hover:not(.locked) {
            background-color: #cde7fa;
        }

        .module-tab.active {
            background-color: #364BE9;
            color: white;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    /* Right side */
    .module-content {
        width: 75%;
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.06);
        position: relative;
        min-height: 600px;
        display: flex;
        flex-direction: column;
    }

        .module-content h1 {
            font-size: 1.6rem;
            margin-bottom: 1rem;
            color: #344AEA;
        }

        .module-content p {
            font-size: 1rem;
            color: #444;
            line-height: 1.6;
        }

        .module-content button:disabled {
            background-color: #aaa !important;
            cursor: not-allowed !important;
            opacity: 0.6;
        }

    .centered-module-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    video {
        border-radius: 8px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.1);
    }

    .module-tab.completed {
        background-color: #c0e8c0;
        font-weight: bold;
        position: relative;
    }

    .time-option {
        background-color: #eee;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }

        .time-option.selected {
            background-color: #344AEA;
            color: white;
            font-weight: bold;
        }

    .quiz-launch-btn, .session-launch-btn {
        padding: 1rem 2rem;
        background-color: #344AEA;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .quiz-launch-btn:hover, .session-launch-btn:hover {
            background-color: #263ebf;
        }

    #quizModal {
        display: none;
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

        #quizModal.show {
            display: flex;
        }

    .quizModal-content {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 600px;
        max-width: 90%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1.5rem;
        position: relative;
    }

    /* Progress Bar */
    .quiz-progress-bar {
        width: 100%;
        height: 6px;
        background-color: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

        .quiz-progress-bar .filled {
            height: 100%;
            background-color: #344AEA;
            width: 0%;
            transition: width 0.4s ease;
        }

    /* Question Text */
    #questionText {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        text-align: center;
    }

    /* Answer Grid */
    #quizOptions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        width: 100%;
    }

    .quiz-option {
        background-color: #f1f1f1;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
        user-select: none;
    }

        .quiz-option:hover {
            background-color: #e0e0e0;
        }

        .quiz-option.selected {
            background-color: #d4e4ff;
            font-weight: bold;
        }

    /* Submit Button */
    #submitAnswerBtn {
        padding: 0.75rem 1.5rem;
        background-color: #344AEA;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        margin-top: 1rem;
        align-self: flex-end;
    }

        #submitAnswerBtn:disabled {
            background-color: #aaa;
            cursor: not-allowed;
            opacity: 0.6;
        }

    /* Feedback Popup */
    #feedbackPopup {
        position: fixed;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        background-color: #344AEA;
        color: white;
        padding: 1rem 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        display: none;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        animation: fadeInUp 0.4s ease;
    }

        #feedbackPopup.wrong {
            background-color: #e74c3c;
        }

        #feedbackPopup button {
            background-color: white;
            color: #344AEA;
            padding: 0.5rem 1.2rem;
            font-weight: 600;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s;
        }

        #feedbackPopup.wrong button {
            color: #e74c3c;
        }

    #feedbackBox {
        display: flex;
        flex-direction: column; /* ✅ Stack vertically */
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-top: 2rem;
    }

    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-box {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        width: 500px;
        text-align: center;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }

    .modal-box {
        animation: popUp 0.3s ease-out;
    }

    .points-popup {
        display: none;
        position: fixed;
        top: 5rem;
        left: 50%;
        transform: translateX(-50%);
        z-index: 9999;
        animation: popUpFade 3s ease forwards;
    }

    .points-popup-content {
        background-color: #344AEA;
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-size: 1.2rem;
        font-weight: bold;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    /* Overlay background */
    .session-success-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1002;
    }

    /* Hidden state */
    .hidden {
        display: none;
    }

    /* Modal container */
    .session-success-content {
        background: white;
        padding: 2rem 2.5rem;
        border-radius: 1rem;
        text-align: center;
        width: 400px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* Title styling */
    .success-title {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.8rem;
        text-align: left;
    }

    /* Message styling */
    .success-message {
        font-size: 1rem;
        margin-bottom: 1.5rem;
        text-align: left;
    }

    .session-modal-buttons {
        display: flex;
        justify-content: left;
    }

    /* Button styling */
    .btn-primary {
        background: #3b5bff;
        color: white;
        padding: 0.8rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s;
    }

        .btn-primary:hover {
            background: #2f46cc;
        }

    .tahi-cc-modal {
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.6);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .tahi-cc-modal-content {
        background-color: #fff;
        padding: 2rem;
        border-radius: 14px;
        width: 420px;
        max-width: 90%;
        position: relative;
    }

    .tahi-cc-modal-close {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 1.6rem;
        cursor: pointer;
    }

    .tahi-cc-star-rating .tahi-cc-star {
        font-size: 2rem;
        color: #ccc;
        cursor: pointer;
    }

        .tahi-cc-star-rating .tahi-cc-star.filled {
            color: #FFD700;
        }

    .tahi-cc-comment {
        width: 100%;
        margin-top: 1rem;
        padding: 0.5rem;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 0.95rem;
    }

    .tahi-cc-btn {
        margin-top: 1rem;
        background-color: #344AEA;
        color: #fff;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background 0.2s ease;
    }

        .tahi-cc-btn:hover {
            background-color: #2A3EC1;
        }

    #tahi-cc-submit-btn:disabled {
        background-color: #aaa;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
    }

    #sendSessionRequest:disabled {
        background-color: #aaa;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .final-project-upload {
        display: none;
    }

    #giveFeedbackBtn {
        background: #007bff;
        color: #fff;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        transition: background 0.2s ease;
    }

        #giveFeedbackBtn:hover:not(:disabled) {
            background: #0056b3;
        }

        #giveFeedbackBtn:disabled {
            background: #aaa;
            cursor: not-allowed;
        }

    .final-submit-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        z-index: 9999;
        justify-content: center;
        align-items: center;
    }

        .final-submit-modal .modal-box {
            background: #fff;
            padding: 2rem;
            border-radius: 12px;
            max-width: 500px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

            .final-submit-modal .modal-box h2 {
                margin-bottom: 1rem;
            }

            .final-submit-modal .modal-box p {
                margin-bottom: 2rem;
            }

            .final-submit-modal .modal-box button {
                padding: 0.75rem 1.5rem;
                background: #007bff;
                color: #fff;
                border: none;
                border-radius: 8px;
                font-weight: 600;
                cursor: pointer;
            }
</style>

<div class="course-module-container">
    @* <button id="resetBtn">Reset Progress</button> *@
    <!-- Header -->
    <div class="course-module-header progress-header">
        <span class="course-title">@Model.Title</span>
        <span class="course-progress-label">@progress%</span>
        <div class="course-progress-bar">
            <div class="filled" style="width: @progress%;"></div>
        </div>
    </div>

    <!-- Body -->
    <div class="course-module-body">
        <!-- Sidebar -->
        <div class="module-sidebar">
            <h2>Course Content</h2>
            @for (int i = 0; i < courseModules.Count; i++)
            {
                var mod = courseModules[i];

                if (mod == null || mod.Contents == null || !mod.Contents.Any())
                {
                    continue; // 👈 skip empty/ghost modules
                }

                var contents = mod.Contents.ToList();
                <div class="module-chapter">
                    <h3>Module @(@i + 1): @mod.Title</h3>
                    @for (int j = 0; j < contents.Count; j++)
                    {
                        var lesson = contents[j];
                        <div class="module-tab @(i == 0 && j == 0 ? "active" : "locked")" data-tab="@(moduleDataIndex++)">
                            @lesson.Title
                        </div>
                    }
                </div>
            }

            <div class="module-chapter">
                <h3>Final Project</h3>
                <div class="module-tab final-project-tab locked" data-index="@courseModules.Count">
                    Final Project
                </div>
            </div>
        </div>

        <!-- Right Content Area -->
        <div class="module-content" id="moduleContent">

        </div>
    </div>

    <div id="sessionModal" class="modal-overlay">
        <div class="modal-box" style="max-width: 500px;">
            <h1 style="color:#344AEA; margin-bottom: 1.5rem;">Schedule a Live Session</h1>

            <!-- Date Selection -->
            <label for="sessionDate" style="display:block; margin-bottom: 0.5rem; text-align:left;">Date</label>
            <input type="date" id="sessionDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" style="width: 100%; padding: 0.5rem; margin-bottom: 1.2rem;" />

            <!-- Time Input -->
            <label for="sessionTime" style="display:block; margin-bottom: 0.5rem; text-align:left;">Time</label>
            <input type="time" id="sessionTime" style="width: 100%; padding: 0.5rem; margin-bottom: 1.2rem;" />

            <!-- Message -->
            <label for="sessionMessage" style="display:block; margin-bottom: 0.5rem; text-align:left;">Message</label>
            <textarea id="sessionMessage" placeholder="Write your message here..." style="width: 100%; padding: 0.5rem; height: 100px; margin-bottom: 1.5rem;"></textarea>

            <!-- Buttons -->
            <div style="text-align: right;">
                <button onclick="closeSessionModal()" style="padding: 0.75rem 1.5rem; margin-right: 1rem;">Cancel</button>
                <button id="sendSessionRequest" onclick="sendSessionRequest()" class="session-launch-btn" disabled>Send Request</button>
            </div>
        </div>
    </div>

    <div id="quizModal">
        <div class="quizModal-content">
            <div class="quiz-progress-bar">
                <div class="filled" id="quizProgressFilled"></div>
            </div>

            <div id="quizBox">
                <h2 id="questionText">Question</h2>
                <div id="quizOptions" style="margin-top:1rem;"></div>
                <button id="submitAnswerBtn" onclick="submitAnswer()" style="margin-top:1rem;" disabled>Submit</button>
            </div>

            <div id="feedbackBox" style="display:none;">
                <p id="feedbackMsg" style="font-size: 1.1rem; text-align: center;"></p>
                <div style="display: flex; gap: 1rem;">
                    <button id="tryAgainBtn" onclick="tryAgain()">Try Again</button>
                    <button onclick="nextQuestion()">Continue</button>
                </div>
            </div>
        </div>
    </div>

    <div id="quizCompleteModal" class="modal-overlay">
        <div class="modal-box">
            <h1 style="color:#344AEA; margin-bottom:1rem;">Quiz Complete!</h1>
            <p style="font-size:1.2rem; color:#333;">You've finished the quiz.</p>
            <p style="font-size:1.1rem; margin: 1.5rem 0; color:#444;">
                Your Score: <strong id="quizScore" style="color:#344AEA; font-size:1.3rem;">0</strong>
            </p>
            <button id="continueNextBtn" onclick="exitQuizModal()" class="quiz-launch-btn" style="margin-top:1rem;" disabled>
                Continue Course
            </button>
        </div>
    </div>

    <div id="pointsPopup" class="points-popup">
        <div class="points-popup-content">
            <span id="pointsMessage">+10 Points!</span>
        </div>
    </div>

    <div id="sessionSuccessModal" class="session-success-modal hidden">
        <div class="session-success-content">
            <h2 class="success-title">Your request has been sent!</h2>
            <p class="success-message">
                We will notify you about your request.<br>Stay tuned!
            </p>
            <div class="session-modal-buttons">
                <button class="btn-primary" onclick="closeSuccessModal()">Back To Course</button>
            </div>
        </div>
    </div>

    <div id="tahi-course-completion-modal" class="tahi-cc-modal" style="display:none;">
        <div class="tahi-cc-modal-content">

            <!-- Rating Section -->
            <div id="tahi-cc-rating-section">
                <h2 class="tahi-cc-modal-title">Rate this Course</h2>
                <div id="tahi-cc-star-rating" class="tahi-cc-star-rating">
                    <span class="tahi-cc-star" data-value="1">&#9733;</span>
                    <span class="tahi-cc-star" data-value="2">&#9733;</span>
                    <span class="tahi-cc-star" data-value="3">&#9733;</span>
                    <span class="tahi-cc-star" data-value="4">&#9733;</span>
                    <span class="tahi-cc-star" data-value="5">&#9733;</span>
                </div>
                <textarea id="tahi-cc-comment" class="tahi-cc-comment" placeholder="Optional message to the artisan" rows="4"></textarea>
                <button id="tahi-cc-submit-btn" class="tahi-cc-btn" disabled>Submit Review</button>
            </div>

            <!-- Congratulations Section -->
            <div id="tahi-cc-congrats-section" style="display:none; text-align:center;">
                <h2>🎉 Thank You for your Support! 🎉</h2>
                <p>You’ve successfully submitted a rating!</p>
                <button id="tahi-cc-close-btn" class="tahi-cc-btn">Close</button>
            </div>
        </div>
    </div>

    <div id="finalProjectSuccessModal" class="final-submit-modal">
        <div class="modal-box">
            <h2>🎉 Congratulations!</h2>
            <p>
                You have successfully submitted your Final Project.<br />
                Now, just wait for the Artisan to approve your work to receive your Certificate.
            </p>
            <button id="closeFinalProjectModal">Great!</button>
        </div>
    </div>

</div>

@{
    moduleDataIndex = 0; // reset for accurate index
}

<!-- Full Logic Script -->
<script>

    window.addEventListener('DOMContentLoaded', () => {
        const moduleData = [];
        @for (int i = 0; i < courseModules.Count; i++)
        {
            var contents = courseModules[i].Contents.ToList();
            for (int j = 0; j < contents.Count; j++)
            {
                var content = contents[j];
                var quizList = (content.QuizQuestions ?? new List<SkillBuilder.Models.QuizQuestion>())
                    .Select(q => new
                    {
                                question = q.Question,
                                options = new[] { q.OptionA, q.OptionB, q.OptionC, q.OptionD },
                                correctAnswer = q.CorrectAnswer
                    });

                <text>
                    moduleData.push({
                        title: @Html.Raw(JsonSerializer.Serialize(content.Title)),
                        type: @Html.Raw(JsonSerializer.Serialize(content.ContentType ?? "Text")),
                        contentText: @Html.Raw(JsonSerializer.Serialize(content.ContentText ?? "")),
                        mediaUrl: @Html.Raw(JsonSerializer.Serialize(content.MediaUrl ?? "")),
                        quizQuestions: @Html.Raw(JsonSerializer.Serialize(quizList)),
                        showDetails: @Html.Raw(JsonSerializer.Serialize(i == 0 && j == 0))
                    });
                </text>
            }
        }

        const regularTabs = Array.from(document.querySelectorAll(".module-tab"))
        .filter(tab => !tab.classList.contains("final-project-tab"));

        let currentQuizModuleIndex = null;
        const finalProjectTab = document.querySelector(".final-project-tab");
        const moduleContent = document.getElementById("moduleContent");
        const userId = "@User.FindFirst("UserId")?.Value";
        const storageKey = `progress_course_${userId}_@Model.Id`;
        const completedQuizzesKey = `completedQuizzes_${userId}_@Model.Id`;
        const activeTabKey = `active_tab_${userId}_@Model.Id`;
        let completedModules = [];
        try {
            const stored = JSON.parse(localStorage.getItem(storageKey));
            if (Array.isArray(stored) && stored.every(idx => typeof idx === "number")) {
                completedModules = stored;
            }
        } catch (err) {
            completedModules = [];
        }
        let dynamicQuizQuestions = [];
        let nextBtn = null;
        let quizCompleted = false;

        const resetBtn = document.getElementById("resetBtn");
        if (resetBtn) {
            resetBtn.addEventListener("click", resetProgress);
        }

        function checkFinalProjectUnlock() {
            const moduleTabs = document.querySelectorAll(".module-tab:not(.final-project-tab)");
            const allCompleted = Array.from(moduleTabs).length > 0 && Array.from(moduleTabs).every(tab => tab.classList.contains("completed"));

            const finalProjectTabEl = document.querySelector(".final-project-tab");
            if (finalProjectTabEl) {
                if (allCompleted) {
                    finalProjectTabEl.classList.remove("locked");
                } else {
                    finalProjectTabEl.classList.add("locked");
                    finalProjectTabEl.classList.remove("active"); // don't show active unless unlocked + chosen
                }
            }
        }

        if (!Array.isArray(completedModules)) completedModules = [];
        validateCompletedModules();

        function validateCompletedModules() {
            if (!Array.isArray(completedModules)) completedModules = [];

            // Only keep a module if previous one is completed
            const validated = [];
            completedModules.sort((a,b) => a-b);
            for (let i = 0; i < completedModules.length; i++) {
                const idx = completedModules[i];
                if (idx === 0 || validated.includes(idx - 1)) {
                    validated.push(idx);
                }
            }

            // ✅ DO NOT remove final project here
            completedModules = validated;
        }

        console.log("completedModules:", completedModules);

        function updateModuleTabs() {
            // update classes on regularTabs
            regularTabs.forEach((tab, idx) => {
                tab.classList.remove("active", "completed", "locked");

                if (completedModules.includes(idx)) {
                    tab.classList.add("completed");
                }

                if (idx === 0 || completedModules.includes(idx - 1)) {
                    tab.classList.remove("locked"); // first module unlocked
                } else {
                    tab.classList.add("locked");
                }
                checkFinalProjectUnlock();
            });
            // Handle finalProjectTab class (locked/unlocked) relative to regular tabs completion
            if (finalProjectTab) {
                // Unlock final project only when all regular tabs completed
                if (completedModules.length === regularTabs.length) {
                    finalProjectTab.classList.remove("locked");
                } else {
                    finalProjectTab.classList.add("locked");
                }
            }

            // Restore last active (supports numeric index or "finalProject")
            const savedActive = localStorage.getItem(activeTabKey);

            // If finalProject was last active, load it and bail out
            if (savedActive === "finalProject") {
                // clear any active class on regular tabs
                regularTabs.forEach(t => t.classList.remove("active"));
                finalProjectTab?.classList.add("active");
                loadFinalProject();
                updateProgressDisplay();
                return;
            }

            // otherwise parse numeric
            const parsed = parseInt(savedActive, 10);
            let targetIndex = (!isNaN(parsed) ? parsed : 0);

            // targetIndex must be bounded to regularTabs length
            if (targetIndex < 0) targetIndex = 0;
            if (targetIndex >= regularTabs.length) {
                targetIndex = completedModules.length > 0 ? Math.max(...completedModules) : 0;
            }

            // set active on the chosen regular tab
            regularTabs.forEach(t => t.classList.remove("active"));
            if (regularTabs[targetIndex]) {
                regularTabs[targetIndex].classList.add("active");
                loadTab(targetIndex); // safe: targetIndex maps to moduleData
            }

            updateProgressDisplay();
        }

        function showPointsPopup(points) {
            const popup = document.getElementById("pointsPopup");
            const msg = document.getElementById("pointsMessage");

            msg.innerText = `+${points} Points!`;
            popup.style.display = "flex";

            // Update the visible points counter (UI only)
            const display = document.getElementById("pointsDisplay");
            if (display) {
                const current = parseInt(display.innerText) || 0;
                display.innerText = current + points;
            }

            setTimeout(() => {
                popup.style.display = "none";
            }, 3000);
        }

        function updateProgressDisplay() {
            if (regularTabs.length === 0) return;

            let completedCount = new Set(completedModules).size;
            const totalModules = regularTabs.length;

            const finalProjectCompleted = localStorage.getItem(`finalProjectCompleted_${userId}_@Model.Id`) === "true";

            // ✅ Add final project to count if completed
            if (finalProjectCompleted) completedCount += 1;

            const displayPercentage = Math.round((completedCount / (totalModules + 1)) * 100);

            document.querySelector(".course-progress-label").innerText = `${displayPercentage}%`;
            document.querySelector(".course-progress-bar .filled").style.width = `${displayPercentage}%`;
        }

        function resetProgress() {
            if (!confirm("Are you sure you want to reset your course progress?")) return;

            fetch("/Courses/ResetProgress", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ courseId: @Model.Id })
            })
            .then(response => {
                if (!response.ok) throw new Error("Failed to reset progress");
                return response.json();
            })
            .then(() => {
                // Remove all relevant localStorage keys
                localStorage.removeItem(storageKey);
                localStorage.removeItem(activeTabKey);
                localStorage.removeItem(completedQuizzesKey);
                localStorage.removeItem(`finalProjectCompleted_${userId}_@Model.Id`);

                // Reset in-memory progress
                completedModules = [];
                validateCompletedModules();
                updateModuleTabs();
                updateProgressDisplay();

                // Optional: reload page to fully refresh the UI
                setTimeout(() => location.reload(), 500);
            })
            .catch(err => {
                alert("An error occurred while resetting progress.");
                console.error(err);
            });
        }


        function syncProgressWithServer() {
            console.log("⏳ Syncing to server:", completedModules);
            fetch('/Courses/UpdateProgress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ courseId: '@Model.Id', completedModules })
            })
            .then(res => res.ok ? console.log("✅ Progress synced") : console.error("❌ Sync failed"))
            .catch(err => console.error("❌ Error syncing:", err));
        }

        function showNextButton(index) {
            const wrapper = document.createElement("div");
            wrapper.classList.add("next-btn-wrapper");
            wrapper.style.marginTop = "2rem";
            wrapper.style.textAlign = "right";

            const btn = document.createElement("button");
            btn.innerText = "Next";
            btn.className = "quiz-launch-btn";
            btn.onclick = () => goToNextTab(index);

            wrapper.appendChild(btn);
            moduleContent.appendChild(wrapper);
        }

        function loadTab(index) {
            const data = moduleData[index];
            moduleContent.innerHTML = `<div id="moduleInnerContent" class="centered-module-content"></div>`;
            const inner = document.getElementById("moduleInnerContent");

            if (!data || !data.type) {
                moduleContent.innerHTML = `
                    <div style="text-align:center; padding: 3rem;">
                        <h1>No content found for this lesson.</h1>
                    </div>`;
                return;
            }

            // TEXT CONTENT
            if (data.type === "Text") {
                inner.innerHTML = `
                    <h1>${data.title}</h1>
                    <p>${data.contentText}</p>
                `;
                showNextButton(index);
            }

            // IMAGE + TEXT
            else if (data.type === "Image + Text") {
                inner.innerHTML = `
                    <h1>${data.title}</h1>
                    <img src="${data.mediaUrl}" alt="Image content" style="max-width:100%; border-radius:8px; margin-bottom:1rem;" />
                    <p>${data.contentText}</p>
                `;
                showNextButton(index);
            }

            // VIDEO
            else if (data.type === "Video") {
                const videoEl = document.createElement('video');
                videoEl.controls = true;
                videoEl.style.width = "100%";
                videoEl.innerHTML = `<source src="${data.mediaUrl}" type="video/mp4">Your browser does not support the video tag.`;
                inner.appendChild(videoEl);

                const nextBtnWrapper = document.createElement("div");
                nextBtnWrapper.style.marginTop = "2rem";
                nextBtnWrapper.style.textAlign = "right";

                nextBtn = document.createElement("button");
                nextBtn.innerText = "Next";
                nextBtn.className = "quiz-launch-btn";
                nextBtn.disabled = true;
                nextBtn.onclick = () => goToNextTab(index);

                nextBtnWrapper.appendChild(nextBtn);
                moduleContent.appendChild(nextBtnWrapper);

                videoEl.addEventListener("ended", () => {
                    nextBtn.disabled = false;
                });
            }

            // QUIZ
            else if (data.type === "Quiz") {
                inner.innerHTML = `
                    <div>
                        <h1>${data.title}</h1>
                        <p style="margin-bottom: 2rem; color: #555;">Take this quiz to continue.</p>
                        <button onclick="startDynamicQuizByIndex(${index})" class="quiz-launch-btn">Start Quiz</button>
                    </div>
                `;

                // Create a separate Next button wrapper just like in other modules
                const nextBtnWrapper = document.createElement("div");
                nextBtnWrapper.style.marginTop = "2rem";
                nextBtnWrapper.style.textAlign = "right";

                nextBtn = document.createElement("button");
                nextBtn.innerText = "Next";
                nextBtn.className = "quiz-launch-btn";
                nextBtn.disabled = true;
                nextBtn.onclick = () => goToNextTab(index);

                nextBtnWrapper.appendChild(nextBtn);
                moduleContent.appendChild(nextBtnWrapper);

                nextBtn.disabled = !isQuizCompleted(index);
            }

            // SESSION
            else if (data.type === "Session") {
                inner.innerHTML = `
                    <div>
                        <h1>${data.title}</h1>
                        <p style="margin-bottom: 2rem; color: #555;">
                            Request a live session for guided instruction (optional).
                        </p>
                        <button id="sessionLaunchBtn" class="session-launch-btn">Request Session</button>
                    </div>
                `;

                showNextButton(index); // Next button always enabled

                const sessionBtn = document.getElementById("sessionLaunchBtn");

                // Fetch latest request from server
                fetch(`/SupportSession/GetLatestSessionRequest?courseId=${@Model.Id}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data && data.status && data.status !== "Declined") {
                            sessionBtn.disabled = true;
                            sessionBtn.innerText = "Session Requested";
                        }
                    });

                sessionBtn.onclick = () => {
                    openSessionModal();

                    const originalSend = window.sendSessionRequest;
                    window.sendSessionRequest = async function() {
                        await originalSend();

                        // Disable button after successful request
                        sessionBtn.disabled = true;
                        sessionBtn.innerText = "Session Requested";
                    }
                };
            }
        }

        function loadFinalProject() {
            moduleContent.innerHTML = `<div id="moduleInnerContent" class="centered-module-content"></div>`;
            const inner = document.getElementById("moduleInnerContent");
            // Values injected from server → course creator’s inputs
            const finalProjectData = {title: @Html.Raw(JsonSerializer.Serialize(Model.FinalProjectTitle)),description: @Html.Raw(JsonSerializer.Serialize(Model.FinalProjectDescription))};

            inner.innerHTML = `
                <div class="final-project-wrapper" style="
                    max-width: 700px;
                    margin: 0 auto;
                    padding: 2rem;
                    background: #fff;
                    border-radius: 12px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                ">
                    <h1 style="font-size:1.8rem; margin-bottom:1rem; text-align:center;">Final Project</h1>

                    <div style="margin-bottom:2rem; text-align:center;">
                        <h3 style="margin-bottom:0.5rem; color:#333;">
                            ${finalProjectData?.title ?? "Untitled Final Project"}
                        </h3>
                        <p style="color:#666;">
                            ${finalProjectData?.description ?? "No description provided."}
                        </p>
                    </div>

                    <hr style="margin:2rem 0;" />

                    <h2 style="font-size:1.3rem; margin-bottom:1rem;">Your Submission</h2>

                    <div class="form-group" style="margin-bottom:1.5rem;">
                        <label for="finalProjectSubmissionTitle" style="font-weight:600;">Project Title *</label>
                        <input type="text" id="finalProjectSubmissionTitle" class="form-control"
                                placeholder="Enter your project title"
                                style="width:100%; padding:0.75rem; border:1px solid #ccc; border-radius:8px;" />
                    </div>

                    <div class="form-group" style="margin-bottom:1.5rem;">
                        <label for="finalProjectSubmissionCaption" style="font-weight:600;">Caption / Description *</label>
                        <textarea id="finalProjectSubmissionCaption" class="form-control" rows="3"
                                    placeholder="Enter a brief caption"
                                    style="width:100%; padding:0.75rem; border:1px solid #ccc; border-radius:8px;"></textarea>
                    </div>

                    <div class="form-group" style="margin-bottom:1.5rem;">
                        <label for="finalProjectImage" style="font-weight:600;">Upload Image *</label>
                        <input type="file" id="finalProjectImage" class="form-control" accept="image/*"
                                style="display:block; margin-top:0.5rem;" />
                    </div>

                    <div id="finalProjectPreview" style="margin-top:1rem; text-align:center;"></div>

                    <button id="submitFinalProjectBtn" class="btn-primary"
                            style="margin-top:2rem; width:100%; padding:0.75rem; border:none; border-radius:8px; background:#007bff; color:#fff; font-weight:600; cursor:pointer;">
                        Submit Final Project
                    </button>
                </div>
            `;

            // ✅ attach preview handler
            document.getElementById("finalProjectImage")
                .addEventListener("change", function () {
                    previewFinalProject(this);
                });

            // ✅ attach submit handler
            document.getElementById("submitFinalProjectBtn")
                .addEventListener("click", submitFinalProject);

            const finalProjectCompleted = localStorage.getItem(`finalProjectCompleted_${userId}_@Model.Id`) === "true";
            if (finalProjectCompleted) {
                const submitBtn = document.getElementById("submitFinalProjectBtn");
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.innerText = "Submitted";
                }
                addFeedbackButton();
            }
        }

        // make sure it's accessible globally
        window.loadFinalProject = loadFinalProject;

        // ✅ Handles preview before submitting
        function previewFinalProject(input) {
            const previewContainer = document.getElementById("finalProjectPreview");
            previewContainer.innerHTML = "";

            const file = input.files[0];
            if (!file) return;

            if (!file.type.startsWith("image")) {
                alert("Only image files are allowed.");
                input.value = "";
                return;
            }

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.style.maxWidth = "100%";
            img.style.borderRadius = "8px";
            previewContainer.appendChild(img);
        }

        // ✅ make it globally available
        window.previewFinalProject = previewFinalProject;

        // ✅ Final Project submission
        async function submitFinalProject() {
            const title = document.getElementById("finalProjectSubmissionTitle")?.value.trim();
            const caption = document.getElementById("finalProjectSubmissionCaption")?.value.trim();
            const file = document.getElementById("finalProjectImage")?.files[0];
            const submitBtn = document.getElementById("submitFinalProjectBtn");

            if (!title) return alert("Please enter a project title.");
            if (!caption) return alert("Please enter a project caption.");
            if (!file) return alert("Please upload your project file.");

            submitBtn.disabled = true;
            submitBtn.innerText = "Submitting...";

            const formData = new FormData();
            formData.append("Title", title);
            formData.append("Description", caption);
            formData.append("File", file);
            formData.append("CourseId", "@Model.Id");

            try {
                const response = await fetch(`/Courses/SubmitFinalProject`, {
                    method: "POST",
                    body: formData
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    // Show modal instead of alert
                    const modal = document.getElementById("finalProjectSuccessModal");
                    const closeBtn = document.getElementById("closeFinalProjectModal");

                    if (modal) modal.style.display = "flex";

                    closeBtn.onclick = () => {
                        modal.style.display = "none";
                        // Optional: refresh or update progress
                        updateProgressDisplay(true);
                    };

                    // Disable submit button to prevent multiple submissions
                    submitBtn.disabled = true;
                    submitBtn.innerText = "Submitted";

                    // Persist Final Project completion for this user
                    localStorage.setItem(`finalProjectCompleted_${userId}_@Model.Id`, "true");

                    // Add the "Give Feedback" button dynamically
                    addFeedbackButton();
                } else {
                    alert(result.message || "Failed to submit project.");
                    submitBtn.disabled = false;
                    submitBtn.innerText = "Submit Final Project";
                }
            } catch (err) {
                console.error(err);
                alert("An error occurred while submitting the project.");
                submitBtn.disabled = false;
                submitBtn.innerText = "Submit Final Project";
            }
        }

        function addFeedbackButton() {
            if (document.getElementById("giveFeedbackBtn")) return; // prevent duplicates

            const wrapper = document.createElement("div");
            wrapper.style.position = "absolute";  // relative to module
            wrapper.style.bottom = "1.5rem";
            wrapper.style.right = "1.5rem";
            wrapper.style.zIndex = 10; // above module content

            const btn = document.createElement("button");
            btn.id = "giveFeedbackBtn";
            btn.innerText = "Give Feedback";
            btn.onclick = () => openTahiModal();

            wrapper.appendChild(btn);

            // append inside module content area
            const moduleContent = document.getElementById("moduleContent");
            moduleContent.style.position = "relative"; // ensure button positions correctly
            moduleContent.appendChild(wrapper);
        }

        function saveProgress() {
            completedModules = [...new Set(completedModules)];

            const activeIndex = parseInt(localStorage.getItem(activeTabKey));
            const maxAllowed = Math.max(...completedModules, 0);

            if (activeIndex > maxAllowed + 1) {
                return;
            }

            localStorage.setItem(storageKey, JSON.stringify(completedModules));
            syncProgressWithServer();
        }

        function goToNextTab(currentIndex) {
            if (currentIndex >= regularTabs.length) return;

            const isFinalProject = currentIndex === regularTabs.length - 1;

            if (!completedModules.includes(currentIndex)) {
                completedModules.push(currentIndex);
                saveProgress();

                const lessonType = moduleData[currentIndex]?.type || "Text";

                // Points logic
                let points = {
                    "Text": 10,
                    "Image + Text": 15,
                    "Video": 20,
                    "Quiz": 10,
                    "Session": 60
                }[lessonType] || 5;

                if (isFinalProject) {
                    points = 100; // final project points
                }

                showPointsPopup(points);
            }

            validateCompletedModules();
            updateModuleTabs();
            checkFinalProjectUnlock();

            const nextIndex = currentIndex + 1;
            const nextTab = regularTabs[nextIndex];

            if (nextTab) {
                nextTab.classList.remove("locked");
                localStorage.setItem("active_tab_@Model.Id", nextIndex);
                regularTabs.forEach(t => t.classList.remove("active"));
                nextTab.classList.add("active");
                loadTab(nextIndex);
                quizCompleted = false;
            } else if (currentIndex === regularTabs.length - 1) {
                // Next step: go to Final Project
                completedModules.push(currentIndex); // mark current as completed
                saveProgress();
                validateCompletedModules();
                updateModuleTabs();
                checkFinalProjectUnlock();

                // unlock and activate final project
                finalProjectTab?.classList.remove("locked");
                regularTabs.forEach(t => t.classList.remove("active"));
                finalProjectTab?.classList.add("active");

                // Persist state and load final project
                localStorage.setItem("active_tab_@Model.Id", "finalProject");
                loadFinalProject();
            } else {
                openTahiModal(); // show completion modal
            }
        }

        // --- Regular module tabs (numeric) ---
        regularTabs.forEach(tab => {
            tab.addEventListener("click", function () {
                if (this.classList.contains("locked")) return;
                const index = parseInt(this.dataset.tab, 10);
                localStorage.setItem(activeTabKey, String(index));
                regularTabs.forEach(t => t.classList.remove("active"));
                this.classList.add("active");
                loadTab(index);
            });
        });

        // --- Final Project tab (separate) ---
        if (finalProjectTab) {
            finalProjectTab.addEventListener("click", function () {
                if (this.classList.contains("locked")) return;
                localStorage.setItem(activeTabKey, "finalProject");
                regularTabs.forEach(t => t.classList.remove("active"));
                this.classList.add("active");
                loadFinalProject();
            });
        }

        let currentQ = 0, selected = null, score = 0;

        function startDynamicQuiz(quizData) {
            console.log("Quiz Started with:", quizData);
            currentQ = 0;
            selected = null;
            score = 0;
            dynamicQuizQuestions = quizData;

            document.getElementById("quizModal").classList.add("show");
            loadDynamicQuestion();

            const nextBtn = document.getElementById("continueNextBtn");
            if (nextBtn) {
                nextBtn.disabled = true;
            }
        }

        window.startDynamicQuizByIndex = function(index) {
            currentQuizModuleIndex = index;  // store current module index
            const quizData = moduleData[index]?.quizQuestions || [];
            if (!quizData.length) {
                alert("No quiz data found for this module.");
                return;
            }
            startDynamicQuiz(quizData);
        };

        function exitQuizModal() {
            document.getElementById("quizModal").classList.remove("show");
            document.getElementById("quizCompleteModal").style.display = "none";

            if (nextBtn) nextBtn.disabled = false;
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function loadDynamicQuestion() {
            const q = dynamicQuizQuestions[currentQ];
            selected = null;
            document.getElementById("questionText").innerText = q.question;
            document.getElementById("quizOptions").innerHTML = "";
            document.getElementById("submitAnswerBtn").disabled = true;
            document.getElementById("feedbackBox").style.display = "none";
            document.getElementById("quizBox").style.display = "block";

            const progress = Math.round((currentQ / dynamicQuizQuestions.length) * 100);
            document.getElementById("quizProgressFilled").style.width = `${progress}%`;

            // ✅ Shuffle options before rendering
            const shuffledOptions = shuffleArray([...q.options]);

            shuffledOptions.forEach((option, i) => {
                const btn = document.createElement("div");
                btn.innerText = option;
                btn.className = "quiz-option";
                btn.onclick = () => {
                    document.querySelectorAll(".quiz-option").forEach(el => el.classList.remove("selected"));
                    btn.classList.add("selected");
                    selected = i;
                    document.getElementById("submitAnswerBtn").disabled = false;
                };
                document.getElementById("quizOptions").appendChild(btn);
            });

            // Store the correct answer index relative to shuffled options
            q.shuffledOptions = shuffledOptions; // add this
        }

        function showFeedback(correct) {
            const box = document.getElementById("feedbackBox");
            const msg = document.getElementById("feedbackMsg");
            const tryAgainBtn = document.getElementById("tryAgainBtn");
            const continueBtn = document.getElementById("continueNextBtn");

            if (!box || !msg) return;

            box.classList.remove("wrong", "correct");

            if (correct) {
                msg.innerText = "✅ Correct! Well done!";
                box.classList.add("correct");

                // Correct → only continue enabled
                tryAgainBtn.style.display = "none";
                continueBtn.disabled = false;

            } else {
                msg.innerText = "❌ Wrong! Please try again.";
                box.classList.add("wrong");

                // Wrong → both try again and continue enabled
                tryAgainBtn.style.display = "inline-block";
                continueBtn.disabled = false;
            }

            box.style.display = "flex";
            document.getElementById("quizBox").style.display = "none";
        }

        function submitAnswer() {
            const q = dynamicQuizQuestions[currentQ];
            const chosenOption = q.shuffledOptions[selected]; // use shuffled options
            const isCorrect = chosenOption === q.correctAnswer;

            if (isCorrect) score++;
            showFeedback(isCorrect);
        }

        function tryAgain() {
            const feedbackBox = document.getElementById("feedbackBox");
            if(feedbackBox) feedbackBox.style.display = "none";

            loadDynamicQuestion();
        }

        function nextQuestion() {
            currentQ++;
            if (currentQ < dynamicQuizQuestions.length) loadDynamicQuestion();
            else showQuizComplete();
        }

        function showQuizComplete() {
            document.getElementById("quizModal").classList.remove("show");
            const modal = document.getElementById("quizCompleteModal");
            modal.style.display = "flex";

            const nextBtn = document.getElementById("continueNextBtn");
            const scorePercent = Math.round((score / dynamicQuizQuestions.length) * 100);

            const header = modal.querySelector("h1");
            const message = modal.querySelector("p:nth-of-type(1)");
            const scoreDisplay = document.getElementById("quizScore");

            scoreDisplay.innerText = `${score} / ${dynamicQuizQuestions.length} (${scorePercent}%)`;

            document.getElementById("quizProgressFilled").style.width = `100%`;
            nextBtn.disabled = false;

            if (scorePercent < 51) {
                // ❌ User failed
                header.innerText = "Quiz Failed!";
                header.style.color = "#FF4B5C"; // red
                message.innerText = "You did not reach the passing score. Please try again.";
                nextBtn.innerText = "Try Again";
                nextBtn.onclick = () => {
                    modal.style.display = "none";
                    startDynamicQuiz(dynamicQuizQuestions); // restart same quiz
                };
            } else {
                // ✅ User passed
                header.innerText = "Quiz Complete!";
                header.style.color = "#344AEA"; // blue
                message.innerText = "You've finished the quiz.";
                nextBtn.innerText = "Continue Course";
                nextBtn.onclick = () => {
                    modal.style.display = "none";
                    if (currentQuizModuleIndex !== null) goToNextTab(currentQuizModuleIndex);
                };

                // Only mark quiz completed if passed
                markQuizCompleted(currentQuizModuleIndex);
                if (!quizCompleted) {
                    showPointsPopup(80); // award points
                    quizCompleted = true;
                }
            }
        }

        function isQuizCompleted(index) {
            const stored = JSON.parse(localStorage.getItem(completedQuizzesKey)) || [];
            return stored.includes(index);
        }

        function markQuizCompleted(index) {
            const stored = JSON.parse(localStorage.getItem(completedQuizzesKey)) || [];
            if (!stored.includes(index)) stored.push(index);
            localStorage.setItem(completedQuizzesKey, JSON.stringify(stored));
        }

        window.openSessionModal = function () {
            const modal = document.getElementById("sessionModal");
            modal.style.display = "flex";

            // Get inputs and button dynamically
            const sendBtn = document.getElementById("sendSessionRequest");
            const dateInput = document.getElementById("sessionDate");
            const timeInput = document.getElementById("sessionTime");
            const messageInput = document.getElementById("sessionMessage");

            // Ensure send button starts disabled
            sendBtn.disabled = true;

            function checkInputs() {
                sendBtn.disabled = !(dateInput.value && timeInput.value && messageInput.value.trim());
            }

            // Attach input listeners
            dateInput.addEventListener("input", checkInputs);
            timeInput.addEventListener("input", checkInputs);
            messageInput.addEventListener("input", checkInputs);
        };

        window.closeSessionModal = function () {
            const modal = document.getElementById("sessionModal");
            modal.style.display = "none";

            const sendBtn = document.getElementById("sendSessionRequest");
            const dateInput = document.getElementById("sessionDate");
            const timeInput = document.getElementById("sessionTime");
            const messageInput = document.getElementById("sessionMessage");

            dateInput.value = "";
            timeInput.value = "";
            messageInput.value = "";
            sendBtn.disabled = true;

            document.querySelectorAll(".time-option.selected").forEach(btn => btn.classList.remove("selected"));
        };

        window.addEventListener("keydown", function (event) {
            if (event.key === "Escape") {
                const modal = document.getElementById("sessionModal");
                if (modal && modal.style.display === "flex") {
                    window.closeSessionModal();
                }
            }
        });

        window.selectTime = function (button) {
            button.classList.add("selected");
            document.getElementById("customTime").value = "";
        };

        window.openSuccessModal = function () {
            document.getElementById("sessionSuccessModal").classList.remove("hidden");
        };

        window.closeSuccessModal = function () {
            document.getElementById("sessionSuccessModal").classList.add("hidden");
        };

        window.sendSessionRequest = function () {
            const date = document.getElementById("sessionDate").value;
            const time = document.getElementById("sessionTime").value;
            const message = document.getElementById("sessionMessage").value;
            const selectedTabIndex = parseInt(localStorage.getItem(activeTabKey)) || 0;
            const currentModule = moduleData[selectedTabIndex];
            const courseId = @Model.Id;
            const lessonTitle = currentModule?.title || "Untitled";

            const payload = {
                CourseId: courseId,
                Title: `Live Session Request - ${lessonTitle}`,
                Message: message,
                SessionDate: date,
                SessionTime: time
            };

            fetch('/SupportSession/CreateRequest', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) throw new Error("Failed to send session request.");
                return res.json();
            })
            .then(data => {
                // Show success modal instead of alert
                openSuccessModal();
                closeSessionModal();

                if (window.opener && window.opener.refreshPendingRequests) {
                    window.opener.refreshPendingRequests();
                }
            })
            .catch(err => {
                alert("❌ An error occurred while sending your request.");
                console.error(err);
            });
        };

        validateCompletedModules();
        updateModuleTabs();
        checkFinalProjectUnlock();

        console.log("Module Data:", moduleData);

        window.submitAnswer = submitAnswer;
        window.tryAgain = tryAgain;
        window.nextQuestion = nextQuestion;
        window.exitQuizModal = exitQuizModal;
        window.openSessionModal = openSessionModal;
        window.closeSessionModal = closeSessionModal;

        window.addEventListener('beforeunload', function(e) {
            const quizModal = document.getElementById("quizModal");
            if (quizModal && quizModal.classList.contains("show")) {
                e.preventDefault();
                e.returnValue = ''; // modern browsers require this
            }
        });

        let tahiCCSelectedRating = 0;

        const submitBtn = document.getElementById("tahi-cc-submit-btn");

        if (submitBtn) {
            submitBtn.disabled = true;

            // Star click logic
            document.querySelectorAll("#tahi-cc-star-rating .tahi-cc-star").forEach(star => {
                star.addEventListener("click", function() {
                    tahiCCSelectedRating = parseInt(this.dataset.value);
                    updateTahiCCStars(tahiCCSelectedRating);
                    submitBtn.disabled = tahiCCSelectedRating === 0;
                });
            });

            // Submit review
            submitBtn.addEventListener("click", async () => {
                if (tahiCCSelectedRating === 0) return alert("Please select a rating.");

                const comment = document.getElementById("tahi-cc-comment").value;
                const courseId = parseInt("@Model.Id");

                try {
                    const res = await fetch("/Courses/SubmitReview", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ courseId, rating: tahiCCSelectedRating, comment })
                    });
                    const data = await res.json();
                    if (!data.success) throw new Error("Failed to submit review");

                    // Mark rating as sent
                    localStorage.setItem(`course_${courseId}_ratingSent`, true);

                    // Show Congrats section
                    document.getElementById("tahi-cc-rating-section").style.display = "none";
                    document.getElementById("tahi-cc-congrats-section").style.display = "block";


                } catch (err) {
                    console.error(err);
                    alert("Failed to submit review.");
                }
            });
        }

        // Open modal
        function openTahiModal() {
            const modal = document.getElementById("tahi-course-completion-modal");
            modal.style.display = "flex";

            // Disable closing unless rating submitted
            modal.addEventListener("click", e => e.stopPropagation());

            const submitBtn = document.getElementById("tahi-cc-submit-btn");
            submitBtn.disabled = true; // must select a star first

            tahiCCSelectedRating = 0; // now works
            updateTahiCCStars(0);
            document.getElementById("tahi-cc-comment").value = "";
        }

        // Update star visuals
        function updateTahiCCStars(rating) {
            document.querySelectorAll("#tahi-cc-star-rating .tahi-cc-star").forEach(star => {
                const value = parseInt(star.dataset.value);
                star.classList.toggle("filled", value <= rating);
            });
        }

        window.openTahiModal = openTahiModal;

        const courseLink = "@Model.Link";

        document.getElementById("tahi-cc-close-btn").addEventListener("click", () => {
            // Redirect to course details page
            window.location.href = `/Courses?selectedCourse=${courseLink}`;
        });

    });

</script>