@model SkillBuilder.Models.ViewModels.CommunityDetailsViewModel
@{
    var community = Model.SelectedCommunity;
    var currentUserId = User.FindFirst("UserId")?.Value;
    bool isOwner = Model.IsOwner;
    bool isJoined = Model.IsJoined;

    var fullName = User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ?? "";

    // Split full name into first and last (basic split on first space)
    var nameParts = fullName.Split(' ', 2);
    var currentUserFirstName = nameParts.Length > 0 ? nameParts[0] : "";
    var currentUserLastName = nameParts.Length > 1 ? nameParts[1] : "";

    var currentUserAvatar = User.FindFirst("AvatarUrl")?.Value ?? "/assets/Avatar/Sample10.svg";
    var currentUserIsVerified = User.FindFirst("IsVerified")?.Value == "True";
    var currentUserIsDeactivated = User.FindFirst("IsDeactivated")?.Value == "True";
    var userDisabled = !currentUserIsVerified || currentUserIsDeactivated;
}

<style>
    /* ===================== Scoped styles for community-details ===================== */
    .community-details-section {
        padding: 2rem;
    }

    .community-details-cover {
        position: relative; 
        height: 200px;
        background: #f0f0f0;
        display: flex;
        justify-content: flex-start; 
        align-items: flex-end;
        padding-left: 2rem; 
    }

    .community-details-avatar {
        position: absolute;
        bottom: -60px;
        left: 2rem; 
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        border: 4px solid #fff;
        box-shadow: 0 0 6px rgba(0,0,0,0.2); 
    }

    .community-details-title {
        margin-left: 10rem;
    }

    .community-details-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 1rem 0;
    }

        .community-details-top .community-details-btn {
            padding: 0.5rem 1rem;
            background-color: #344AEA;
            color: #fff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

            .community-details-top .community-details-btn:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

    .community-details-main {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .community-details-left {
        flex: 0 0 65%; /* fixed 80% width */
    }

    .community-details-right {
        flex: 0 0 33%; /* fixed 20% width */
    }

    /* Posts & Cards */
    .community-details-posts .community-details-post-card {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

        .community-details-posts .community-details-post-card h3 {
            margin: 0 0 0.5rem 0;
        }

        .community-details-posts .community-details-post-card p {
            margin: 0 0 0.5rem 0;
        }

    /* Info card */
    .community-details-info-card {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

    /* Modal Overlay */
    .community-details-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .community-details-modal-content {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .community-details-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        background: #344AEA;
        color: #fff;
        cursor: pointer;
        font-size: 14px;
    }

        .community-details-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

    .community-details-modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

        .community-details-modal-content h2 {
            margin-bottom: 0.5rem;
        }

        .community-details-modal-content p {
            margin-bottom: 1.5rem;
            color: #555;
        }

    .community-details-modal-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    /* Create post form/modal */
    .community-details-create-post-form {
        margin-bottom: 1rem;
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

        .community-details-create-post-form input,
        .community-details-create-post-form textarea {
            width: 100%;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid #ccc;
        }

        .community-details-create-post-form button {
            background: #344AEA;
            color: #fff;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

    .community-details-posts-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2001;
    }

    .community-details-posts-modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 600px;
        max-width: 95%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .community-details-posts-title {
        font-size: 1.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 0.25rem;
    }

    .community-details-posts-subtitle {
        text-align: center;
        color: #555;
        margin-bottom: 1.5rem;
    }

    .community-details-posts-field {
        margin-bottom: 1.5rem;
    }

        .community-details-posts-field label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .community-details-posts-field input,
        .community-details-posts-field textarea {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 0.95rem;
        }

    .community-details-posts-charcount {
        font-size: 0.8rem;
        color: #888;
        float: right;
        margin-top: 0.25rem;
    }

    .community-details-posts-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .community-details-posts-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        border: none;
    }

        .community-details-posts-btn.primary {
            background: #344AEA;
            color: #fff;
        }

        .community-details-posts-btn.secondary {
            background: #f0f0f0;
            color: #333;
        }

        .community-details-posts-btn:disabled {
            background-color: #ccc;
            color: #666;
            cursor: not-allowed;
            opacity: 0.7;
        }

    .comments-section {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .comments-list {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        max-height: 200px;
        overflow-y: auto;
        padding-right: 0.25rem;
    }

    .comment {
        display: flex;
        gap: 0.5rem;
        align-items: flex-start;
        background: #f3f4f6;
        border-radius: 6px;
        padding: 0.5rem;
        font-size: 0.875rem;
        word-break: break-word;
    }

        .comment .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-size: cover;
            background-position: center;
        }

    .comment-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        flex: 1;
    }

        .comment-content .comment-header {
            font-weight: 600;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .comment-content .comment-header .timestamp {
                font-weight: 400;
                font-size: 0.75rem;
                color: #555;
            }

        .comment-content .comment-text {
            font-size: 0.85rem;
            color: #333;
        }

    .comments-section textarea {
        width: 100%;
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        resize: none;
        font-size: 0.85rem;
    }

    .comments-section button {
        align-self: flex-end;
        margin-top: 0.25rem;
        padding: 0.3rem 0.75rem;
        background: #344AEA;
        color: #fff;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.85rem;
    }

    .comment-btn {
        background: none;
        border: none;
    }

    /* Post options (3 dots menu) */
    .post-options {
        position: relative;
        margin-left: auto;
    }

    .post-options-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #555;
    }

    .post-options-menu {
        display: none;
        position: absolute;
        top: 25px;
        right: 0;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 6px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        min-width: 130px;
        z-index: 100;
    }

        .post-options-menu button {
            display: block;
            width: 100%;
            text-align: left;
            background: none;
            border: none;
            padding: 0.6rem 1rem;
            cursor: pointer;
            font-size: 0.9rem;
            color: #333;
        }

            .post-options-menu button:hover {
                background-color: #f3f3f3;
            }

            .post-options-menu button.report {
                color: #d33;
            }

                .post-options-menu button.report:hover {
                    background-color: #feeaea;
                }
    /* ===== COMMON MODAL STYLES ===== */
    .communityDetailsModalOverlay,
    .community-details-deletepost-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }

    .communityDetailsModalBox,
    .community-details-deletepost-modal-content {
        background: #fff;
        border-radius: 12px;
        padding: 2rem;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 0 12px rgba(0,0,0,0.15);
        position: relative;
        text-align: left;
    }

        .communityDetailsModalBox h3,
        .community-details-deletepost-modal-content h3 {
            margin-top: 0;
            margin-bottom: 1rem;
            font-size: 1.25rem;
            font-weight: 700;
        }

        .communityDetailsModalBox p,
        .community-details-deletepost-modal-content p {
            margin-bottom: 1rem;
            color: #555;
            font-size: 0.95rem;
        }

    /* ===== Buttons Container ===== */
    .communityDetailsModalActions,
    .community-details-form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }

    /* ===== Buttons ===== */
    .communityDetailsModalBtn,
    .community-details-btn-cancel,
    .community-details-btn-delete {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        border: none;
        font-size: 0.95rem;
    }

        .communityDetailsModalBtn.confirm,
        .community-details-btn-delete {
            background: #344AEA;
            color: #fff;
        }

        .communityDetailsModalBtn.cancel,
        .community-details-btn-cancel {
            background: #f0f0f0;
            color: #333;
        }

        .communityDetailsModalBtn.confirm:hover,
        .community-details-btn-delete:hover {
            background: #1e33c9;
        }

        .communityDetailsModalBtn.cancel:hover,
        .community-details-btn-cancel:hover {
            background: #ddd;
        }

    /* ===== Edit Post Modal (imitates Create Post) ===== */
    #communityDetailsEditPostModal .communityDetailsModalBox {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    #communityDetailsEditPostContent {
        width: 100%;
        min-height: 120px;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1px solid #ddd;
        font-size: 0.95rem;
    }

    /* ===== Report Post Modal ===== */
    #communityDetailsReportModal .communityDetailsModalBox select,
    #communityDetailsReportModal .communityDetailsModalBox textarea {
        width: 100%;
        padding: 0.6rem 1rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }

    #communityDetailsReportModal .communityDetailsModalBox select {
        height: 38px;
    }

    #communityDetailsReportModal .communityDetailsModalActions {
        justify-content: flex-end;
    }

    /* Overlay */
    #adminDeletePostModal {
        display: none; /* hidden by default */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        /* Modal content */
        #adminDeletePostModal .community-details-posts-modal-content {
            background: #fff;
            padding: 2rem;
            border-radius: 8px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }

    #communityDetailsAcceptPolicyBtn {
        padding: 0.7rem 1.5rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: background 0.3s, color 0.3s;
    }

        /* Disabled state */
        #communityDetailsAcceptPolicyBtn:disabled {
            background-color: #ccc;
            color: #666;
            cursor: not-allowed;
        }

        /* Enabled state */
        #communityDetailsAcceptPolicyBtn:not(:disabled) {
            background-color: #344AEA;
            color: #fff;
        }

            #communityDetailsAcceptPolicyBtn:not(:disabled):hover {
                background-color: #1e33c9;
            }
</style>

<section class="community-details-section">
    <!-- Cover Image -->
    <div class="community-details-cover"
         style="background-image: url('@(string.IsNullOrEmpty(community.CoverImageUrl) ? "/uploads/community-banner/default-banner.png" : community.CoverImageUrl)'); background-size: cover; background-position: center;">
        <div class="community-details-avatar"
             style="background-image:url('@(string.IsNullOrEmpty(community.AvatarUrl) ? "/uploads/community-profile/default-profile.jpg" : community.AvatarUrl)');">
        </div>
    </div>

    <!-- Top Info -->
    <div class="community-details-top">
        <h1 class="community-details-title">@community.Name</h1>
        <div style="display:flex; gap:0.5rem;">
            @if (!isOwner && !isJoined && !Model.IsAdmin)
            {
                <button class="community-details-btn"
                        id="communityDetailsJoinBtn"
                        @(userDisabled ? "disabled title='Your account is not verified or is deactivated'" : "")>
                    Join
                </button>
            }
            @if (!Model.IsAdmin && (isOwner || isJoined))
            {
                <button class="community-details-btn" id="communityDetailsCreatePostBtn">Create Post</button>
            }
        </div>
    </div>

    <!-- Main Layout -->
    <div class="community-details-main">
        <!-- Left: Posts -->
        <div class="community-details-left community-details-posts">
            
            <!-- Create Post Modal -->
            <div id="communityDetailsCreatePostModal" class="community-details-posts-modal-overlay" style="display:none;">
                <div class="community-details-posts-modal-content">
                    <h2 class="community-details-posts-title">Create a Post</h2>
                    <p class="community-details-posts-subtitle">
                        Share your thoughts, ask questions, or start a discussion in this community!
                    </p>

                    <form id="communityDetailsCreatePostForm" class="community-details-posts-form"
                          enctype="multipart/form-data" method="post"
                          action="@Url.Action("CreatePostInsideCommunity", "Community")">

                        <!-- Hidden CommunityId -->
                        <input type="hidden" name="CommunityId" value="@community.Id" />

                        <!-- Title -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostTitle">Start with a title.</label>
                            <input type="text" name="Title" id="communityDetailsPostTitle" maxlength="100" placeholder="Please enter a title :)" required />
                            <small class="community-details-posts-charcount" id="communityDetailsPostTitleCount">0/100 maximum characters</small>
                        </div>

                        <!-- Content -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostContent">Provide more details.</label>
                            <textarea name="Content" id="communityDetailsPostContent" maxlength="1000" placeholder="Provide more details" required></textarea>
                            <small class="community-details-posts-charcount" id="communityDetailsPostContentCount">0/1000 maximum characters</small>
                        </div>

                        <!-- Image -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostImage">Attach an image (optional)</label>
                            <input type="file" name="Image" id="communityDetailsPostImage" accept="image/*" />
                            <div id="communityDetailsPostImagePreviewContainer" style="margin-top:0.5rem;">
                                <img id="communityDetailsPostImagePreview" style="max-width:100%; border-radius:8px; display:none;" />
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="community-details-posts-actions">
                            <button type="submit" class="community-details-posts-btn primary" id="communityDetailsPostSubmit" disabled>Post</button>
                            <button type="button" class="community-details-posts-btn secondary" id="communityDetailsPostCancel">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>

            @if (Model.Posts != null && Model.Posts.Any())
            {
                @foreach (var post in Model.Posts)
                {
                    <div class="community-details-post-card" data-post-id="@post.Id">

                        <div style="display:flex; justify-content:space-between; align-items:center;">
                            <h3>@post.Title</h3>
                            <div class="post-options">
                                <button class="post-options-btn" onclick="togglePostMenu(@post.Id)">⋮</button>
                                <div class="post-options-menu" id="post-menu-@post.Id">
                                    @if (Model.IsAdmin)
                                    {
                                        <button onclick="openAdminDeletePostModal(@post.Id)">Delete Post (Admin)</button>
                                    }
                                    else if (post.AuthorId == currentUserId)
                                    {
                                        <button onclick="editPost(@post.Id)">Edit Post</button>
                                        <button onclick="deletePost(@post.Id)">Delete Post</button>
                                    }
                                    else
                                    {
                                        <button class="report" onclick="reportPost(@post.Id)">Report Post</button>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <img src="@post.ImageUrl" style="max-width:100%; margin:0.5rem 0; border-radius:6px;" />
                        }

                        <p>@post.Content</p>
                        <small>By @post.AuthorName on @(post.SubmittedAt.ToString("MMM dd, yyyy"))</small>

                        <!-- Comments -->
                        <div style="margin-top:0.5rem; display:flex; gap:1rem; font-size:0.9rem;">
                            <button class="comment-btn" onclick="toggleComments(@post.Id)">💬 <span id="comment-count-@post.Id">@post.CommentsCount</span></button>
                        </div>

                        <!-- Comments Section -->
                        <div class="comments-section" id="comments-section-@post.Id" style="display:none; margin-top:0.5rem;">
                            <div class="comments-list" id="comments-list-@post.Id"></div>
                            <textarea id="comment-input-@post.Id" placeholder="Write a comment..." rows="2"></textarea>
                            <button onclick="addComment(@post.Id)">Post Comment</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="community-details-post-card">
                    <p style="text-align:center; color:#777;">
                        @if (Model.IsAdmin)
                        {
                            @:No posts yet.
                        }
                        else
                        {
                            @:No posts yet. Be the first to contribute!
                        }
                    </p>
                </div>
            }
        </div>

        <!-- Right: Info Card -->
        <div class="community-details-right">
            <div class="community-details-info-card">
                <h2 class="community-details-info-title">@community.Name</h2>
                <p>@community.Description</p>
                <p><strong>Members:</strong> @community.MembersCount</p>
            </div>
        </div>
    </div>
</section>

<!-- Policy Modal -->
<div id="communityDetailsPolicyModal" class="community-details-modal-overlay" style="display:none;">
    <div class="community-details-modal-content"
         style="max-width:600px; text-align:left; overflow-y:auto; max-height:80vh; padding:2rem; border-radius:12px; box-shadow:0 8px 24px rgba(0,0,0,0.2); background:#fff; font-family:Arial, sans-serif;">

        <!-- Header -->
        <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:1.5rem;">
            <h2 style="margin:0; font-size:1.75rem; font-weight:700; color:#344AEA;">Community Policy</h2>
            <button onclick="communityDetailsClosePolicyModal()"
                    style="background:none; border:none; font-size:1.5rem; cursor:pointer; color:#555;">
                &times;
            </button>
        </div>

        <!-- Introduction -->
        <p style="font-size:1rem; line-height:1.6; color:#444; margin-bottom:1.5rem;">
            Welcome! This is a space for tradition lovers of all skill levels to connect, learn, and grow.
            To keep things positive and helpful, please follow these simple guidelines:
        </p>

        <hr style="margin:1rem 0; border:none; border-top:1px solid #eee;">

        <!-- Do Section -->
        <h3 style="color:#2F855A; font-weight:600; margin-bottom:0.5rem;">✅ Do:</h3>
        <ul style="margin-bottom:1.5rem; padding-left:1.2rem; color:#444;">
            <li>Share your pottery (finished or in progress)</li>
            <li>Ask questions and offer respectful feedback</li>
            <li>Encourage and support other members</li>
            <li>Credit original artists when sharing work</li>
            <li>Share tips, tools, and inspiration</li>
        </ul>

        <!-- Don't Section -->
        <h3 style="color:#C53030; font-weight:600; margin-bottom:0.5rem;">❌ Don't:</h3>
        <ul style="margin-bottom:1.5rem; padding-left:1.2rem; color:#444;">
            <li>Post hateful, offensive, or inappropriate content</li>
            <li>Spam or promote products outside allowed channels</li>
            <li>Steal or claim others’ work as your own</li>
            <li>Give unsafe advice—safety first with kilns, glazes, etc.</li>
        </ul>

        <!-- Breaking Rules -->
        <h3 style="color:#DD6B20; font-weight:600; margin-bottom:0.5rem;">⚠️ Breaking the Rules:</h3>
        <ul style="margin-bottom:1.5rem; padding-left:1.2rem; color:#444;">
            <li>First: Reminder</li>
            <li>Second: Warning</li>
            <li>Third: Deactivated (temporary or permanent)</li>
        </ul>

        <p style="font-size:0.95rem; color:#555; margin-bottom:1.5rem;">
            By joining, you agree to keep this space respectful, creative, and safe.
            Thanks for being part of the clay-loving community!
        </p>

        <!-- Single Checkbox -->
        <div style="margin-bottom:1.5rem; display:flex; align-items:center; gap:0.5rem; font-size:0.95rem;">
            <input type="checkbox" id="communityPolicyAgree" style="width:18px; height:18px; cursor:pointer;">
            <label for="communityPolicyAgree" style="cursor:pointer;">Do you agree to follow this policy?</label>
        </div>

        <!-- Actions -->
        <div class="community-details-modal-actions" style="display:flex; justify-content:center; margin-top:1.5rem;">
            <button id="communityDetailsAcceptPolicyBtn" class="accept-btn" disabled>
                Accept & Next
            </button>
        </div>
    </div>
</div>

<!-- Join Modal (short message) -->
<div id="communityDetailsJoinModal" class="community-details-modal-overlay" style="display:none;">
    <div class="community-details-modal-content">
        <h2>Join Community</h2>
        <p>Tell us why you want to join this community:</p>
        <textarea id="communityJoinMessage" placeholder="Write a short message..." style="width:100%; min-height:80px; padding:0.5rem; margin-bottom:1rem;"></textarea>
        <div class="community-details-modal-actions">
            <button class="community-details-btn" id="communityDetailsConfirmJoinBtn" disabled>Join Now</button>
            <button class="community-details-btn" id="communityDetailsCancelBtn" style="background:#ccc; color:#333;">Cancel</button>
        </div>
    </div>
</div>

<!-- REPORT POST MODAL -->
<div id="communityDetailsReportModal" class="community-details-posts-modal-overlay" style="display:none;">
    <div class="community-details-posts-modal-content">
        <h2 class="community-details-posts-title">Report Post</h2>
        <p class="community-details-posts-subtitle">Please select the reason for reporting this post:</p>

        <form id="communityDetailsReportForm" class="community-details-posts-form">
            <!-- Reason -->
            <div class="community-details-posts-field">
                <label for="communityDetailsReportReason">Reason</label>
                <select id="communityDetailsReportReason" name="Reason" required>
                    <option value="">-- Select Reason --</option>
                    <option value="Spam">Spam</option>
                    <option value="Inappropriate Content">Inappropriate Content</option>
                    <option value="Harassment">Harassment</option>
                    <option value="Other">Other</option>
                </select>
            </div>

            <!-- Details -->
            <div class="community-details-posts-field">
                <label for="communityDetailsReportDetails">Additional details (optional)</label>
                <textarea id="communityDetailsReportDetails" name="Details" class="communityDetailsModalTextarea" placeholder="Provide more details..." rows="4"></textarea>
            </div>

            <!-- Actions -->
            <div class="community-details-posts-actions">
                <button type="button" id="communityDetailsReportCancelBtn" class="community-details-posts-btn secondary">Cancel</button>
                <button type="submit" id="communityDetailsReportSubmitBtn" class="community-details-posts-btn primary">Submit Report</button>
            </div>
        </form>
    </div>
</div>

<!-- EDIT POST MODAL -->
<div id="communityDetailsEditPostModal" class="community-details-posts-modal-overlay" style="display:none;">
    <div class="community-details-posts-modal-content">
        <h2 class="community-details-posts-title">Edit Post</h2>
        <p class="community-details-posts-subtitle">Update your post content below.</p>

        <form id="communityDetailsEditPostForm" class="community-details-posts-form"
              enctype="multipart/form-data" method="post">

            <!-- Hidden PostId -->
            <input type="hidden" id="communityDetailsEditPostId" name="PostId" />

            <!-- Title -->
            <div class="community-details-posts-field">
                <label for="communityDetailsEditPostTitle">Edit title.</label>
                <input type="text" name="Title" id="communityDetailsEditPostTitle" maxlength="100" placeholder="Update the title :)" required />
                <small class="community-details-posts-charcount" id="communityDetailsEditPostTitleCount">0/100 maximum characters</small>
            </div>

            <!-- Content -->
            <div class="community-details-posts-field">
                <label for="communityDetailsEditPostContent">Edit details.</label>
                <textarea name="Content" id="communityDetailsEditPostContent" maxlength="1000" placeholder="Update your post..." required></textarea>
                <small class="community-details-posts-charcount" id="communityDetailsEditPostContentCount">0/1000 maximum characters</small>
            </div>

            <!-- Image -->
            <div class="community-details-posts-field">
                <label for="communityDetailsEditPostImage">Update image (optional)</label>
                <input type="file" name="Image" id="communityDetailsEditPostImage" accept="image/*" />
                <div id="editPostImageContainer" style="position: relative; display: none;">
                    <img id="communityDetailsEditPostImagePreview"
                         src=""
                         alt="Post image preview"
                         style="max-height: 200px; width: auto; display: block; border-radius: 8px; margin-top: 8px;">
                    <button id="removeEditPostImageBtn"
                            type="button"
                            style="position: absolute; top: 4px; right: 4px; background: rgba(0,0,0,0.6); color: white; border: none; border-radius: 4px; padding: 2px 6px; cursor: pointer;">
                        ✕
                    </button>
                </div>
            </div>

            <!-- Actions -->
            <div class="community-details-posts-actions">
                <button type="submit" class="community-details-posts-btn primary" id="communityDetailsEditSaveBtn">Save Changes</button>
                <button type="button" class="community-details-posts-btn secondary" id="communityDetailsEditCancelBtn">Cancel</button>
            </div>
        </form>
    </div>
</div>

<!-- ===== Delete Post Modal ===== -->
<div id="communityDetailsDeletePostModal" class="community-details-posts-modal-overlay" style="display:none;">
    <div class="community-details-posts-modal-content">
        <h2 class="community-details-posts-title">Delete Post</h2>
        <p class="community-details-posts-subtitle">Are you sure you want to delete this post? This action cannot be undone.</p>
        <input type="hidden" id="communityDetailsDeletePostId" />

        <div class="community-details-posts-actions">
            <button type="button" class="community-details-posts-btn secondary" onclick="communityDetailsCloseDeletePostModal()">Cancel</button>
            <button type="button" class="community-details-posts-btn primary" onclick="communityDetailsConfirmDeletePost()">Delete</button>
        </div>
    </div>
</div>

<!-- Admin Delete Post Modal -->
<div id="adminDeletePostModal" class="community-details-posts-modal-overlay" style="display:none;">
    <div class="community-details-posts-modal-content">
        <h2 class="community-details-posts-title">Delete Post</h2>
        <p class="community-details-posts-subtitle">Are you sure you want to delete this post as an admin? This will notify the author.</p>
        <input type="hidden" id="adminDeletePostId" />
        <div class="community-details-posts-actions">
            <button type="button" class="community-details-posts-btn secondary">Cancel</button>
            <button type="button" class="community-details-posts-btn primary">Delete</button>
        </div>
    </div>
</div>

<script>
    const agreeCheckbox = document.getElementById('communityPolicyAgree');
    const acceptBtn = document.getElementById('communityDetailsAcceptPolicyBtn');

    // Enable button only when checked
    agreeCheckbox.addEventListener('change', () => {
        acceptBtn.disabled = !agreeCheckbox.checked;
    });

    acceptBtn.addEventListener('click', () => {
        // Add your accept logic here
        communityDetailsClosePolicyModal();
    });

    function communityDetailsClosePolicyModal() {
        document.getElementById('communityDetailsPolicyModal').style.display = 'none';
    }

    let selectedPostId = null;
    let selectedAdminPostId = null;

    // Open modal
    function openAdminDeletePostModal(postId) {
        selectedAdminPostId = postId;
        document.getElementById('adminDeletePostModal').style.display = 'flex';
    }

    // Close modal
    function closeAdminDeletePostModal() {
        selectedAdminPostId = null;
        document.getElementById('adminDeletePostModal').style.display = 'none';
    }

    // Cancel button
    document.querySelector('#adminDeletePostModal .community-details-posts-btn.secondary')
        .addEventListener('click', closeAdminDeletePostModal);

    // Confirm delete button
    document.querySelector('#adminDeletePostModal .community-details-posts-btn.primary')
        .addEventListener('click', async () => {
            if (!selectedAdminPostId) return;

            try {
                const formData = new FormData();
                formData.append("postId", selectedAdminPostId);

                const response = await fetch('/Community/AdminDeletePost', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    const postCard = document.querySelector(`.community-details-post-card[data-post-id='${selectedAdminPostId}']`);
                    if (postCard) postCard.remove();

                    let savedComments = JSON.parse(localStorage.getItem("postComments")) || {};
                    delete savedComments[selectedAdminPostId];
                    localStorage.setItem("postComments", JSON.stringify(savedComments));

                    window.location.reload();
                } else {
                    alert(result.message || "Failed to delete post");
                }
            } catch (err) {
                console.error(err);
                alert("Error deleting post");
            } finally {
                closeAdminDeletePostModal();
            }
        });

    // Toggle post menu
    function togglePostMenu(postId) {
        const menu = document.getElementById(`post-menu-${postId}`);
        menu.style.display = menu.style.display === "block" ? "none" : "block";
    }

    document.addEventListener("click", (event) => {
        const allMenus = document.querySelectorAll("[id^='post-menu-']");

        allMenus.forEach(menu => {
            // Skip if click is inside menu or its button
            const postId = menu.id.replace("post-menu-", "");
            const button = document.querySelector(`[onclick="togglePostMenu(${postId})"]`);

            if (!menu.contains(event.target) && !button?.contains(event.target)) {
                menu.style.display = "none";
            }
        });
    });

    function updateEditSaveButtonState() {
        const saveBtn = document.getElementById("communityDetailsEditSaveBtn");
        const titleEl = document.getElementById("communityDetailsEditPostTitle");
        const contentEl = document.getElementById("communityDetailsEditPostContent");
        const imageInput = document.getElementById("communityDetailsEditPostImage");

        if (!saveBtn || !titleEl || !contentEl || !window._editOriginal) {
            if (saveBtn) saveBtn.disabled = true;
            return;
        }

        const curTitle = titleEl.value.trim();
        const curContent = contentEl.value.trim();
        const orig = window._editOriginal;

        const titleChanged = curTitle !== orig.title;
        const contentChanged = curContent !== orig.content;
        const imageChanged = (imageInput.files && imageInput.files.length > 0);
        const removed = orig.removeImage === true;

        const dirty = titleChanged || contentChanged || imageChanged || removed;
        saveBtn.disabled = !dirty;
    }

    // Edit Post
    function editPost(postId) {
        selectedPostId = postId;
        const postCard = document.querySelector(`.community-details-post-card[data-post-id='${postId}']`);
        if (!postCard) return;

        const title = postCard.querySelector(".community-post-title")?.innerText
                      || postCard.querySelector("h3")?.innerText || "";
        const content = postCard.querySelector("p")?.innerText || "";
        const existingImage = postCard.querySelector("img")?.src || "";

        document.getElementById("communityDetailsEditPostTitle").value = title;
        document.getElementById("communityDetailsEditPostContent").value = content;
        document.getElementById("communityDetailsEditPostId").value = postId;

        const imagePreview = document.getElementById("communityDetailsEditPostImagePreview");
        const imageContainer = document.getElementById("editPostImageContainer");
        const removeBtn = document.getElementById("removeEditPostImageBtn");
        const imageInput = document.getElementById("communityDetailsEditPostImage");

        if (existingImage) {
            imagePreview.src = existingImage;
            imageContainer.style.display = "block";
            imagePreview.style.display = "block";
        } else {
            imageContainer.style.display = "none";
            imagePreview.src = "";
        }

        if (imageInput) imageInput.value = "";

        // Store the original snapshot
        window._editOriginal = {
            title: title.trim(),
            content: content.trim(),
            imageSrc: existingImage || "",
            removeImage: false
        };

        // Disable save until changes occur
        document.getElementById("communityDetailsEditSaveBtn").disabled = true;
        document.getElementById("communityDetailsEditPostModal").style.display = "flex";
        updateEditSaveButtonState();

        // Hook up remove image button
        removeBtn.onclick = () => {
            imagePreview.src = "";
            imageContainer.style.display = "none";
            window._editOriginal.removeImage = true; // mark as removed
            updateEditSaveButtonState();
        };
    }

    // Delete Post
    function deletePost(postId) {
        selectedPostId = postId;
        document.getElementById("communityDetailsDeletePostId").value = postId;
        document.getElementById("communityDetailsDeletePostModal").style.display = "flex";
    }

    // Report Post
    function reportPost(postId) {
        selectedPostId = postId;
        document.getElementById("communityDetailsReportModal").style.display = "flex";
    }

    // Edit Modal
    document.getElementById("communityDetailsEditCancelBtn").addEventListener("click", () => {
        document.getElementById("communityDetailsEditPostModal").style.display = "none";
    });

    document.getElementById("communityDetailsEditSaveBtn").addEventListener("click", async (e) => {
        e.preventDefault(); // prevent default form submission

        const newTitle = document.getElementById("communityDetailsEditPostTitle").value.trim();
        const newContent = document.getElementById("communityDetailsEditPostContent").value.trim();
        const newImage = document.getElementById("communityDetailsEditPostImage")?.files[0];

        if (!newTitle || !newContent) return alert("Title and content cannot be empty");

        try {
            const formData = new FormData();
            formData.append("PostId", selectedPostId);
            formData.append("Title", newTitle);
            formData.append("Content", newContent);
            formData.append("RemoveImage", window._editOriginal.removeImage ? "true" : "false");
            if (newImage) formData.append("Image", newImage);

            const response = await fetch('/Community/EditPost', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {

                // Close edit modal
                document.getElementById("communityDetailsEditPostModal").style.display = "none";

                // Show success modal
                window.location.reload();
            } else {
                alert(result.message || "Failed to edit post");
            }
        } catch (err) {
            console.error(err);
            alert("Error editing post");
        }
    });

    // Delete Modal
    function communityDetailsCloseDeletePostModal() {
        document.getElementById("communityDetailsDeletePostModal").style.display = "none";
    }

    async function communityDetailsConfirmDeletePost() {
        const postId = document.getElementById("communityDetailsDeletePostId").value;
        try {
            const formData = new FormData();
            formData.append("postId", postId);

            const response = await fetch('/Community/DeletePost', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (result.success) {
                // 🗑️ Remove post card
                const postCard = document.querySelector(`.community-details-post-card[data-post-id='${postId}']`);
                if (postCard) postCard.remove();

                // 🧹 Remove post comments from localStorage
                let savedComments = JSON.parse(localStorage.getItem("postComments")) || {};
                delete savedComments[postId];
                localStorage.setItem("postComments", JSON.stringify(savedComments));

                // ✅ Close modal and refresh UI
                communityDetailsCloseDeletePostModal();
                window.location.reload();
            } else alert(result.message || "Failed to delete post");
        } catch(err){ console.error(err); alert("Error deleting post"); }
    }

    // Report Modal
    document.getElementById("communityDetailsReportCancelBtn").addEventListener("click", () => {
        document.getElementById("communityDetailsReportModal").style.display = "none";
    });

    document.getElementById("communityDetailsReportSubmitBtn").addEventListener("click", async () => {
        const reason = document.getElementById("communityDetailsReportReason").value;
        const details = document.getElementById("communityDetailsReportDetails").value.trim();
        if(!reason) return alert("Please select a reason");

        try {
            const formData = new FormData();
            formData.append("PostId", selectedPostId);
            formData.append("Reason", reason);
            formData.append("Details", details);

            const response = await fetch('/Community/ReportPost', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if(result.success){
                alert("Post reported successfully");
                document.getElementById("communityDetailsReportModal").style.display = "none";
            } else alert(result.message || "Failed to report post");
        } catch(err){ console.error(err); alert("Error reporting post"); }
    });

    // Close modals when clicking outside
    document.querySelectorAll(".communityDetailsModalOverlay").forEach(modal => {
        modal.addEventListener("click", e => {
            if(e.target === modal) modal.style.display = "none";
        });
    });

    const currentUserId = "@currentUserId";
    const currentUserFirstName = "@currentUserFirstName";
    const currentUserLastName = "@currentUserLastName";
    const currentUserAvatar = "@currentUserAvatar";
    const userDisabled = @userDisabled.ToString().ToLower();

    // LocalStorage helpers (comments only now)
    function getPostComments() { return JSON.parse(localStorage.getItem("postComments")) || {}; }
    function setPostComments(comments) { localStorage.setItem("postComments", JSON.stringify(comments)); }

    // Toggle comments
    function toggleComments(postId){
        const section = document.getElementById(`comments-section-${postId}`);
        section.style.display = section.style.display === "none" ? "flex" : "none";
    }

    // Add comment
    function addComment(postId){
        const input = document.getElementById(`comment-input-${postId}`);
        const list = document.getElementById(`comments-list-${postId}`);
        const commentText = input.value.trim();
        if(!commentText) return;

        const commentData = {
            userId: currentUserId,
            firstName: currentUserFirstName,
            lastName: currentUserLastName,
            avatarUrl: currentUserAvatar,
            text: commentText,
            createdAt: new Date().toISOString()
        };

        let savedComments = getPostComments();
        if(!savedComments[postId]) savedComments[postId] = [];
        savedComments[postId].push(commentData);
        setPostComments(savedComments);

        renderComment(list, commentData);

        const countEl = document.getElementById(`comment-count-${postId}`);
        countEl.innerText = savedComments[postId].length;

        input.value = "";
    }

    function renderComment(list, commentData){
        const commentEl = document.createElement("div");
        commentEl.classList.add("comment");
        commentEl.innerHTML = `
            <div class="avatar" style="background-image:url('${commentData.avatarUrl}'); width:32px; height:32px;"></div>
            <div class="comment-content">
                <div class="comment-header">${commentData.firstName} ${commentData.lastName} <span class="timestamp">${timeAgo(commentData.createdAt)}</span></div>
                <div class="comment-text">${commentData.text}</div>
            </div>
        `;
        list.appendChild(commentEl);
    }

    function timeAgo(timestamp){
        const now = new Date();
        const diff = Math.floor((now - new Date(timestamp))/1000);
        if(diff < 60) return `${diff} seconds ago`;
        if(diff < 3600) return `${Math.floor(diff/60)} minutes ago`;
        if(diff < 86400) return `${Math.floor(diff/3600)} hours ago`;
        if(diff < 604800) return `${Math.floor(diff/86400)} days ago`;
        return `${Math.floor(diff/604800)} weeks ago`;
    }

    document.addEventListener("DOMContentLoaded", () => {
        const titleEl = document.getElementById("communityDetailsEditPostTitle");
        const contentEl = document.getElementById("communityDetailsEditPostContent");
        const imageInputEl = document.getElementById("communityDetailsEditPostImage");

        if (titleEl) titleEl.addEventListener('input', updateEditSaveButtonState);
        if (contentEl) contentEl.addEventListener('input', updateEditSaveButtonState);
        if (imageInputEl) imageInputEl.addEventListener('change', updateEditSaveButtonState);

        if (userDisabled) {
            document.querySelectorAll(".comment-btn").forEach(btn => {
                btn.disabled = true;
                btn.style.cursor = "not-allowed";
            });

            document.querySelectorAll(".comments-section textarea, .comments-section button").forEach(el => {
                el.disabled = true;
                el.style.cursor = "not-allowed";
            });
        }

        // Restore comments
        const savedComments = getPostComments();
        for (let postId in savedComments) {
            const list = document.getElementById(`comments-list-${postId}`);
            if (!list) continue;

            savedComments[postId].forEach(commentData => {
                commentData.firstName = commentData.firstName || "Unknown";
                commentData.lastName = commentData.lastName || "";
                commentData.avatarUrl = commentData.avatarUrl || "/assets/Avatar/Sample10.svg";

                renderComment(list, commentData);
            });

            const countEl = document.getElementById(`comment-count-${postId}`);
            if (countEl) countEl.innerText = savedComments[postId].length;
        }

        async function removeJoinRequest(communityId) {
            const joinBtn = document.getElementById('communityDetailsJoinBtn');
            if (!joinBtn) return;

            try {
                // Call server to delete/cancel join request
                const formData = new FormData();
                formData.append('communityId', communityId);

                const response = await fetch('/Community/DeleteJoinRequest', { method: 'POST', body: formData });
                const data = await response.json();

                if (response.ok && data.success) {
                    // ✅ After deletion, check database if any request exists
                    try {
                        const checkResponse = await fetch(`/Community/HasJoinRequest?communityId=${communityId}`);
                        const checkData = await checkResponse.json();

                        if (checkResponse.ok && checkData.success) {
                            if (checkData.hasRequest) {
                                joinBtn.disabled = true;
                                joinBtn.style.cursor = "not-allowed";
                                joinBtn.innerText = "Request Sent";
                            } else {
                                joinBtn.disabled = false;
                                joinBtn.style.cursor = "pointer";
                                joinBtn.innerText = "Join";
                            }
                        } else {
                            console.error(checkData.message || "Failed to check join request");
                        }
                    } catch (err) {
                        console.error("Error checking join request after removal:", err);
                    }
                } else {
                    alert(data.message || "Failed to remove join request");
                }
            } catch (err) {
                console.error(err);
                alert("Error removing join request");
            }
        }

        // Join & Policy Modal
        function initJoinPolicyModal() {
            const joinBtn = document.getElementById('communityDetailsJoinBtn');
            const policyModal = document.getElementById('communityDetailsPolicyModal');
            const acceptPolicyBtn = document.getElementById('communityDetailsAcceptPolicyBtn');

            const joinModal = document.getElementById('communityDetailsJoinModal');
            const confirmJoinBtn = document.getElementById('communityDetailsConfirmJoinBtn');
            const cancelJoinBtn = document.getElementById('communityDetailsCancelBtn');
            const joinMessage = document.getElementById('communityJoinMessage');

            const communityId = '@community.Id';

            // ✅ Check database for existing join request
            (async () => {
                if (!joinBtn) return;

                try {
                    const response = await fetch(`/Community/HasJoinRequest?communityId=${communityId}`);
                    const data = await response.json();

                    if (response.ok && data.success) {
                        if (data.hasRequest) {
                            joinBtn.disabled = true;
                            joinBtn.style.cursor = "not-allowed";
                            joinBtn.innerText = "Request Sent";
                        } else {
                            joinBtn.disabled = false;
                            joinBtn.style.cursor = "pointer";
                            joinBtn.innerText = "Join";
                        }
                    } else {
                        console.error(data.message || "Failed to check join request");
                    }
                } catch (err) {
                    console.error("Error checking join request:", err);
                }
            })();

            // Step 1: User clicks main join -> show policy modal
            joinBtn?.addEventListener('click', () => {
                policyModal.style.display = 'flex';
            });

            // Step 2: Accept policy -> show join message modal
            acceptPolicyBtn?.addEventListener('click', () => {
                policyModal.style.display = 'none';
                joinModal.style.display = 'flex';
            });

            // Enable join button when user types a message
            joinMessage.addEventListener('input', () => {
                confirmJoinBtn.disabled = !joinMessage.value.trim();
            });

            // Cancel join modal
            cancelJoinBtn?.addEventListener('click', () => joinModal.style.display = 'none');

            // Close join modal by clicking outside
            joinModal?.addEventListener('click', e => { if(e.target === joinModal) joinModal.style.display = 'none'; });

            // Close policy modal function
            window.communityDetailsClosePolicyModal = () => policyModal.style.display = 'none';
            policyModal?.addEventListener('click', e => { if(e.target === policyModal) communityDetailsClosePolicyModal(); });

            // Final join submit
            confirmJoinBtn?.addEventListener('click', async () => {
                const message = joinMessage.value.trim();

                try {
                    const formData = new FormData();
                    formData.append('communityId', communityId);
                    formData.append('joinMessage', message);

                    const response = await fetch('/Community/Join', { method: 'POST', body: formData });
                    const data = await response.json();

                    if(response.ok && data.success){
                        // Disable main Join button after successful request
                        joinBtn.disabled = true;
                        joinBtn.style.cursor = "not-allowed";
                        joinBtn.innerText = "Request Sent";

                        joinModal.style.display = 'none';

                        // Update members count
                        const membersInfo = document.querySelector('.community-details-info-card p strong');
                        if(membersInfo) membersInfo.parentNode.innerHTML = `<strong>Members:</strong> ${data.membersCount}`;

                        // Reload the page if needed
                        window.location.reload();
                    } else {
                        alert(data.message || 'Failed to join community.');
                    }
                } catch(err) {
                    console.error(err);
                    alert('Error joining community');
                }
            });
        }

        // Create Post Modal
        function initCreatePostModal() {
            const createPostBtn = document.getElementById('communityDetailsCreatePostBtn');
            const createPostModal = document.getElementById('communityDetailsCreatePostModal');
            const createPostForm = document.getElementById('communityDetailsCreatePostForm');
            const postsContainer = document.querySelector('.community-details-posts');
            const postCancelBtn = document.getElementById('communityDetailsPostCancel');
            const postSubmitBtn = document.getElementById('communityDetailsPostSubmit');

            const postTitleInput = document.getElementById('communityDetailsPostTitle');
            const postContentInput = document.getElementById('communityDetailsPostContent');
            const postImageInput = document.getElementById('communityDetailsPostImage');
            const postImagePreview = document.getElementById('communityDetailsPostImagePreview');

            createPostBtn?.addEventListener('click', () => {
                createPostModal.style.display = 'flex';
                postSubmitBtn.disabled = true;
            });

            function communityDetailsCloseCreatePostModal() {
                createPostModal.style.display = 'none';
                createPostForm.reset();
                postImagePreview.style.display = 'none';
            }

            postCancelBtn?.addEventListener('click', communityDetailsCloseCreatePostModal);
            createPostModal?.addEventListener('click', e => { if(e.target === createPostModal) communityDetailsCloseCreatePostModal(); });

            [postTitleInput, postContentInput].forEach(input => {
                input?.addEventListener('input', () => {
                    const title = postTitleInput.value.trim();
                    const content = postContentInput.value.trim();
                    postSubmitBtn.disabled = !title || !content;
                });
            });

            postImageInput?.addEventListener('change', e => {
                const file = e.target.files[0];
                if(file){
                    postImagePreview.src = URL.createObjectURL(file);
                    postImagePreview.style.display = 'block';
                } else {
                    postImagePreview.style.display = 'none';
                }
            });

            createPostForm?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(createPostForm);

                try {
                    const response = await fetch(createPostForm.action, { method: 'POST', body: formData });
                    const result = await response.json();

                    if(result.success){
                        // Close the create post modal
                        communityDetailsCloseCreatePostModal();
                        window.location.reload();
                    } else {
                        alert(result.message || 'Failed to create post.');
                    }
                } catch(err){
                    console.error(err);
                    alert('Error creating post');
                }
            });

            document.addEventListener('keydown', e => {
                if(e.key === "Escape") communityDetailsCloseCreatePostModal();
            });
        }

        // Initialize everything
        initJoinPolicyModal();
        initCreatePostModal();
    });
</script>