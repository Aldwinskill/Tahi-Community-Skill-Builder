@model SkillBuilder.Models.ViewModels.CommunityDetailsViewModel
@{
    var community = Model.SelectedCommunity;
    var currentUserId = User.FindFirst("UserId")?.Value;
    bool isOwner = Model.IsOwner;
    bool isJoined = Model.IsJoined;

    var fullName = User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ?? "";

    // Split full name into first and last (basic split on first space)
    var nameParts = fullName.Split(' ', 2);
    var currentUserFirstName = nameParts.Length > 0 ? nameParts[0] : "";
    var currentUserLastName = nameParts.Length > 1 ? nameParts[1] : "";

    var currentUserAvatar = User.FindFirst("AvatarUrl")?.Value ?? "/assets/Avatar/Sample10.svg";
    var currentUserIsVerified = User.FindFirst("IsVerified")?.Value == "True";
    var currentUserIsDeactivated = User.FindFirst("IsDeactivated")?.Value == "True";
    var userDisabled = !currentUserIsVerified || currentUserIsDeactivated;
}

<style>
    /* ===================== Scoped styles for community-details ===================== */
    .community-details-section {
        padding: 2rem;
    }

    .community-details-cover {
        position: relative; 
        height: 200px;
        background: #f0f0f0;
        display: flex;
        justify-content: flex-start; 
        align-items: flex-end;
        padding-left: 2rem; 
    }

    .community-details-avatar {
        position: absolute;
        bottom: -60px;
        left: 2rem; 
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background-size: cover;
        background-position: center;
        border: 4px solid #fff;
        box-shadow: 0 0 6px rgba(0,0,0,0.2); 
    }

    .community-details-title {
        margin-left: 10rem;
    }

    .community-details-top {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 1rem 0;
    }

        .community-details-top .community-details-btn {
            padding: 0.5rem 1rem;
            background-color: #344AEA;
            color: #fff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

            .community-details-top .community-details-btn:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

    .community-details-main {
        display: flex;
        gap: 2rem;
        margin-top: 2rem;
    }

    .community-details-left,
    .community-details-right {
        flex: 1;
    }

    /* Posts & Cards */
    .community-details-posts .community-details-post-card {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

        .community-details-posts .community-details-post-card h3 {
            margin: 0 0 0.5rem 0;
        }

        .community-details-posts .community-details-post-card p {
            margin: 0 0 0.5rem 0;
        }

    /* Info card */
    .community-details-info-card {
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

    /* Modal Overlay */
    .community-details-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .community-details-modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 400px;
        max-width: 90%;
        text-align: center;
        position: relative;
    }

        .community-details-modal-content h2 {
            margin-bottom: 0.5rem;
        }

        .community-details-modal-content p {
            margin-bottom: 1.5rem;
            color: #555;
        }

    .community-details-modal-actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    /* Create post form/modal */
    .community-details-create-post-form {
        margin-bottom: 1rem;
        background: #fff;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 0 6px rgba(0,0,0,0.1);
    }

        .community-details-create-post-form input,
        .community-details-create-post-form textarea {
            width: 100%;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid #ccc;
        }

        .community-details-create-post-form button {
            background: #344AEA;
            color: #fff;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

    .community-details-posts-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }

    .community-details-posts-modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 600px;
        max-width: 95%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .community-details-posts-title {
        font-size: 1.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 0.25rem;
    }

    .community-details-posts-subtitle {
        text-align: center;
        color: #555;
        margin-bottom: 1.5rem;
    }

    .community-details-posts-field {
        margin-bottom: 1.5rem;
    }

        .community-details-posts-field label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .community-details-posts-field input,
        .community-details-posts-field textarea {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 0.95rem;
        }

        .community-details-posts-field textarea {
            min-height: 120px;
            resize: vertical;
        }

    .community-details-posts-charcount {
        font-size: 0.8rem;
        color: #888;
        float: right;
        margin-top: 0.25rem;
    }

    .community-details-posts-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .community-details-posts-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        border: none;
    }

        .community-details-posts-btn.primary {
            background: #344AEA;
            color: #fff;
        }

        .community-details-posts-btn.secondary {
            background: #f0f0f0;
            color: #333;
        }

        .community-details-posts-btn:disabled {
            background-color: #ccc;
            color: #666;
            cursor: not-allowed;
            opacity: 0.7;
        }

    .comments-section {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .comments-list {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        max-height: 200px;
        overflow-y: auto;
        padding-right: 0.25rem;
    }

    .comment {
        display: flex;
        gap: 0.5rem;
        align-items: flex-start;
        background: #f3f4f6;
        border-radius: 6px;
        padding: 0.5rem;
        font-size: 0.875rem;
        word-break: break-word;
    }

        .comment .avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-size: cover;
            background-position: center;
        }

    .comment-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        flex: 1;
    }

        .comment-content .comment-header {
            font-weight: 600;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .comment-content .comment-header .timestamp {
                font-weight: 400;
                font-size: 0.75rem;
                color: #555;
            }

        .comment-content .comment-text {
            font-size: 0.85rem;
            color: #333;
        }

    .comments-section textarea {
        width: 100%;
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid #ccc;
        resize: none;
        font-size: 0.85rem;
    }

    .comments-section button {
        align-self: flex-end;
        margin-top: 0.25rem;
        padding: 0.3rem 0.75rem;
        background: #344AEA;
        color: #fff;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.85rem;
    }

    .like-btn {
        background: none;
        border: none;
    }

    .comment-btn {
        background: none;
        border: none;
    }
</style>

<section class="community-details-section">
    <!-- Cover Image -->
    <div class="community-details-cover"
         style="background-image: url('@(string.IsNullOrEmpty(community.CoverImageUrl) ? "/uploads/community-banner/default-banner.png" : community.CoverImageUrl)'); background-size: cover; background-position: center;">
        <div class="community-details-avatar"
             style="background-image:url('@(string.IsNullOrEmpty(community.AvatarUrl) ? "/uploads/community-profile/default-profile.jpg" : community.AvatarUrl)');">
        </div>
    </div>

    <!-- Top Info -->
    <div class="community-details-top">
        <h1 class="community-details-title">@community.Name</h1>
        <div style="display:flex; gap:0.5rem;">
            @if (!isOwner && !isJoined)
            {
                <button class="community-details-btn"
                        id="communityDetailsJoinBtn"
                        @(userDisabled ? "disabled title='Your account is not verified or is deactivated'" : "")>
                    Join
                </button>
            }
            <button class="community-details-btn" id="communityDetailsCreatePostBtn" @(isOwner || isJoined ? "" : "disabled")>Create Post</button>
        </div>
    </div>

    <!-- Main Layout -->
    <div class="community-details-main">
        <!-- Left: Posts -->
        <div class="community-details-left community-details-posts">
            
            <!-- Create Post Modal -->
            <div id="communityDetailsCreatePostModal" class="community-details-posts-modal-overlay" style="display:none;">
                <div class="community-details-posts-modal-content">
                    <h2 class="community-details-posts-title">Create a Post</h2>
                    <p class="community-details-posts-subtitle">
                        Share your thoughts, ask questions, or start a discussion in this community!
                    </p>

                    <form id="communityDetailsCreatePostForm" class="community-details-posts-form"
                          enctype="multipart/form-data" method="post"
                          action="@Url.Action("CreatePostInsideCommunity", "Community")">

                        <!-- Hidden CommunityId -->
                        <input type="hidden" name="CommunityId" value="@community.Id" />

                        <!-- Title -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostTitle">Start with a title.</label>
                            <input type="text" name="Title" id="communityDetailsPostTitle" maxlength="100" placeholder="Please enter a title :)" required />
                            <small class="community-details-posts-charcount" id="communityDetailsPostTitleCount">0/100 maximum characters</small>
                        </div>

                        <!-- Content -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostContent">Provide more details.</label>
                            <textarea name="Content" id="communityDetailsPostContent" maxlength="1000" placeholder="Provide more details" required></textarea>
                            <small class="community-details-posts-charcount" id="communityDetailsPostContentCount">0/1000 maximum characters</small>
                        </div>

                        <!-- Image -->
                        <div class="community-details-posts-field">
                            <label for="communityDetailsPostImage">Attach an image (optional)</label>
                            <input type="file" name="Image" id="communityDetailsPostImage" accept="image/*" />
                            <div id="communityDetailsPostImagePreviewContainer" style="margin-top:0.5rem;">
                                <img id="communityDetailsPostImagePreview" style="max-width:100%; border-radius:8px; display:none;" />
                            </div>
                        </div>

                        <!-- Actions -->
                        <div class="community-details-posts-actions">
                            <button type="submit" class="community-details-posts-btn primary" id="communityDetailsPostSubmit" disabled>Post</button>
                            <button type="button" class="community-details-posts-btn secondary" id="communityDetailsPostCancel">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>

            @if (Model.Posts != null && Model.Posts.Any())
            {
                @foreach (var post in Model.Posts)
                {
                    <div class="community-details-post-card" data-post-id="@post.Id">
                        <h3>@post.Title</h3>

                        @if (!string.IsNullOrEmpty(post.ImageUrl))
                        {
                            <img src="@post.ImageUrl" style="max-width:100%; margin:0.5rem 0; border-radius:6px;" />
                        }

                        <p>@post.Content</p>
                        <small>By @post.AuthorName on @(post.SubmittedAt.ToString("MMM dd, yyyy"))</small>

                        <!-- Likes & Comments -->
                        <div style="margin-top:0.5rem; display:flex; gap:1rem; font-size:0.9rem;">
                            <button class="like-btn" onclick="likePost(@post.Id)">❤️ <span id="like-count-@post.Id">@post.Likes</span></button>
                            <button class="comment-btn" onclick="toggleComments(@post.Id)">💬 <span id="comment-count-@post.Id">@post.CommentsCount</span></button>
                        </div>

                        <!-- Comments Section -->
                        <div class="comments-section" id="comments-section-@post.Id" style="display:none; margin-top:0.5rem;">
                            <div class="comments-list" id="comments-list-@post.Id"></div>
                            <textarea id="comment-input-@post.Id" placeholder="Write a comment..." rows="2"></textarea>
                            <button onclick="addComment(@post.Id)">Post</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="community-details-post-card">
                    <p style="text-align:center; color:#777;">No posts yet. Be the first to contribute!</p>
                </div>
            }
        </div>

        <!-- Right: Info Card -->
        <div class="community-details-right">
            <div class="community-details-info-card">
                <h2 class="community-details-info-title">@community.Name</h2>
                <p>@community.Description</p>
                <p><strong>Members:</strong> @community.MembersCount</p>
            </div>
        </div>
    </div>
</section>

<!-- Join & Policy Modals (same as before) -->
<div id="communityDetailsJoinModal" class="community-details-modal-overlay" style="display:none;">
    <div class="community-details-modal-content">
        <h2>Join Community</h2>
        <p>Join community to participate in this conversation</p>
        <div class="community-details-modal-actions">
            <button class="community-details-btn" id="communityDetailsConfirmJoinBtn">Join Now</button>
            <button class="community-details-btn" id="communityDetailsCancelBtn" style="background:#ccc; color:#333;">Cancel</button>
        </div>
    </div>
</div>

<div id="communityDetailsPolicyModal" class="community-details-modal-overlay" style="display:none;">
    <div class="community-details-modal-content" style="max-width:600px; text-align:left; overflow-y:auto; max-height:80vh; padding:2rem;">
        <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:1rem;">
            <h2>Community Policy</h2>
            <button onclick="communityDetailsClosePolicyModal()" style="background:none; border:none; font-size:1.5rem; cursor:pointer;">&times;</button>
        </div>
        <p>
            Welcome! This is a space for pottery lovers of all skill levels to connect, learn, and grow.<br>
            To keep things positive and helpful, please follow these simple guidelines:
        </p>

        <hr style="margin:1rem 0;">

        <h3>Do:</h3>
        <ul>
            <li>Share your pottery (finished or in progress)</li>
            <li>Ask questions and offer respectful feedback</li>
            <li>Encourage and support other members</li>
            <li>Credit original artists when sharing work</li>
            <li>Share tips, tools, and inspiration</li>
        </ul>

        <h3>Don't:</h3>
        <ul>
            <li>Post hateful, offensive, or inappropriate content</li>
            <li>Spam or promote products outside the allowed channels</li>
            <li>Steal or claim others’ work as your own</li>
            <li>Give unsafe advice—safety first with kilns, glazes, etc.</li>
        </ul>

        <h3>Breaking the Rules:</h3>
        <ul>
            <li>First: Reminder</li>
            <li>Second: Warning</li>
            <li>Third: Ban (temporary or permanent)</li>
        </ul>

        <p>
            By joining, you agree to keep this space respectful, creative, and safe.<br>
            Thanks for being part of the clay-loving community!
        </p>

        <div class="community-details-modal-actions" style="justify-content:flex-end; margin-top:1.5rem;">
            <button class="community-details-btn" id="communityDetailsFinalJoinBtn" style="background:#344AEA; color:#fff;">Join</button>
        </div>
    </div>
</div>

<script>
    const currentUserId = "@currentUserId";
    const currentUserFirstName = "@currentUserFirstName";
    const currentUserLastName = "@currentUserLastName";
    const currentUserAvatar = "@currentUserAvatar";
    const userDisabled = @userDisabled.ToString().ToLower();

    // LocalStorage helpers
    function getLikedPostsByUser() { return JSON.parse(localStorage.getItem("likedPostsByUser")) || {}; }
    function setLikedPostsByUser(data) { localStorage.setItem("likedPostsByUser", JSON.stringify(data)); }

    function getLikeCounts() { return JSON.parse(localStorage.getItem("likeCounts")) || {}; }
    function setLikeCounts(counts) { localStorage.setItem("likeCounts", JSON.stringify(counts)); }

    function getPostComments() { return JSON.parse(localStorage.getItem("postComments")) || {}; }
    function setPostComments(comments) { localStorage.setItem("postComments", JSON.stringify(comments)); }

    // Like a post
    function likePost(postId) {
        const btn = document.querySelector(`.community-details-post-card[data-post-id="${postId}"] .like-btn`);
        const countEl = document.getElementById(`like-count-${postId}`);

        let likedPostsByUser = getLikedPostsByUser();
        let likeCounts = getLikeCounts();

        if(!likedPostsByUser[currentUserId]) likedPostsByUser[currentUserId] = [];

        let currentLikes = likeCounts[postId] || 0;

        if(likedPostsByUser[currentUserId].includes(postId)){
            likedPostsByUser[currentUserId] = likedPostsByUser[currentUserId].filter(id => id !== postId);
            currentLikes = Math.max(0, currentLikes - 1);
            btn.classList.remove("liked");
        } else {
            likedPostsByUser[currentUserId].push(postId);
            currentLikes += 1;
            btn.classList.add("liked");
        }

        likeCounts[postId] = currentLikes;
        setLikedPostsByUser(likedPostsByUser);
        setLikeCounts(likeCounts);

        countEl.innerText = currentLikes;
    }

    // Toggle comments
    function toggleComments(postId){
        const section = document.getElementById(`comments-section-${postId}`);
        section.style.display = section.style.display === "none" ? "flex" : "none";
    }

    // Add comment
    function addComment(postId){
        const input = document.getElementById(`comment-input-${postId}`);
        const list = document.getElementById(`comments-list-${postId}`);
        const commentText = input.value.trim();
        if(!commentText) return;

        const commentData = {
            userId: currentUserId,
            firstName: currentUserFirstName,  // use Razor variable
            lastName: currentUserLastName,    // use Razor variable
            avatarUrl: currentUserAvatar,     // use Razor variable
            text: commentText,
            createdAt: new Date().toISOString()
        };

        let savedComments = getPostComments();
        if(!savedComments[postId]) savedComments[postId] = [];
        savedComments[postId].push(commentData);
        setPostComments(savedComments);

        renderComment(list, commentData);

        const countEl = document.getElementById(`comment-count-${postId}`);
        countEl.innerText = savedComments[postId].length;

        input.value = "";
    }

    function renderComment(list, commentData){
        const commentEl = document.createElement("div");
        commentEl.classList.add("comment");
        commentEl.innerHTML = `
            <div class="avatar" style="background-image:url('${commentData.avatarUrl}'); width:32px; height:32px;"></div>
            <div class="comment-content">
                <div class="comment-header">${commentData.firstName} ${commentData.lastName} <span class="timestamp">${timeAgo(commentData.createdAt)}</span></div>
                <div class="comment-text">${commentData.text}</div>
            </div>
        `;
        list.appendChild(commentEl);
    }

    function timeAgo(timestamp){
        const now = new Date();
        const diff = Math.floor((now - new Date(timestamp))/1000);
        if(diff < 60) return `${diff} seconds ago`;
        if(diff < 3600) return `${Math.floor(diff/60)} minutes ago`;
        if(diff < 86400) return `${Math.floor(diff/3600)} hours ago`;
        if(diff < 604800) return `${Math.floor(diff/86400)} days ago`;
        return `${Math.floor(diff/604800)} weeks ago`;
    }

    document.addEventListener("DOMContentLoaded", () => {
        if (userDisabled) {
            document.querySelectorAll(".like-btn, .comment-btn").forEach(btn => {
                btn.disabled = true;
                btn.style.cursor = "not-allowed";
            });

            document.querySelectorAll(".comments-section textarea, .comments-section button").forEach(el => {
                el.disabled = true;
                el.style.cursor = "not-allowed";
            });
        }

        const likedPostsByUser = getLikedPostsByUser();
        const likeCounts = getLikeCounts();
        const userId = currentUserId;
        const likedPosts = likedPostsByUser[userId] || [];

        likedPosts.forEach(postId => {
            const btn = document.querySelector(`.post-card[data-post-id="${postId}"] .like-btn`);
            if (btn) btn.classList.add("liked");
        });

        for (let postId in likeCounts) {
            const countEl = document.getElementById(`like-count-${postId}`);
            if (countEl) countEl.innerText = likeCounts[postId];
        }

        // Restore comments
        const savedComments = getPostComments();
        for (let postId in savedComments) {
            const list = document.getElementById(`comments-list-${postId}`);
            if (!list) continue;

            savedComments[postId].forEach(commentData => {
                // Fallback to current user info if old data missing
                commentData.firstName = commentData.firstName || "Unknown";
                commentData.lastName = commentData.lastName || "";
                commentData.avatarUrl = commentData.avatarUrl || "/assets/Avatar/Sample10.svg";

                renderComment(list, commentData);
            });

            const countEl = document.getElementById(`comment-count-${postId}`);
            if (countEl) countEl.innerText = savedComments[postId].length;
        }

        // Join & Policy Modal
        function initJoinPolicyModal() {
            const joinBtn = document.getElementById('communityDetailsJoinBtn');
            const joinModal = document.getElementById('communityDetailsJoinModal');
            const cancelBtn = document.getElementById('communityDetailsCancelBtn');
            const confirmJoinBtn = document.getElementById('communityDetailsConfirmJoinBtn');
            const policyModal = document.getElementById('communityDetailsPolicyModal');
            const finalJoinBtn = document.getElementById('communityDetailsFinalJoinBtn');

            if(joinBtn) joinBtn.addEventListener('click', () => joinModal.style.display = 'flex');
            cancelBtn?.addEventListener('click', () => joinModal.style.display = 'none');
            joinModal?.addEventListener('click', e => { if(e.target === joinModal) joinModal.style.display = 'none'; });
            confirmJoinBtn?.addEventListener('click', () => {
                joinModal.style.display = 'none';
                policyModal.style.display = 'flex';
            });

            function communityDetailsClosePolicyModal() { policyModal.style.display = 'none'; }
            policyModal?.addEventListener('click', e => { if(e.target === policyModal) communityDetailsClosePolicyModal(); });

            finalJoinBtn?.addEventListener('click', async () => {
                const communityId = '@community.Id';
                try {
                    const formData = new FormData();
                    formData.append('communityId', communityId);

                    const response = await fetch('/Community/Join', { method: 'POST', body: formData });
                    const data = await response.json();

                    if(response.ok && data.success){
                        alert(data.message);
                        policyModal.style.display = 'none';
                        if(joinBtn) joinBtn.style.display = 'none';
                        document.querySelector('.community-details-top button[disabled]')?.removeAttribute('disabled');
                        const membersInfo = document.querySelector('.community-details-info-card p strong');
                        if(membersInfo) membersInfo.parentNode.innerHTML = `<strong>Members:</strong> ${data.membersCount}`;
                    } else {
                        alert(data.message || 'Failed to join community.');
                    }
                } catch(err){
                    console.error(err);
                    alert('Error joining community');
                }
            });
        }

        // Create Post Modal
        function initCreatePostModal() {
            const createPostBtn = document.getElementById('communityDetailsCreatePostBtn');
            const createPostModal = document.getElementById('communityDetailsCreatePostModal');
            const createPostForm = document.getElementById('communityDetailsCreatePostForm');
            const postsContainer = document.querySelector('.community-details-posts');
            const postCancelBtn = document.getElementById('communityDetailsPostCancel');
            const postSubmitBtn = document.getElementById('communityDetailsPostSubmit');

            const postTitleInput = document.getElementById('communityDetailsPostTitle');
            const postContentInput = document.getElementById('communityDetailsPostContent');
            const postImageInput = document.getElementById('communityDetailsPostImage');
            const postImagePreview = document.getElementById('communityDetailsPostImagePreview');

            createPostBtn?.addEventListener('click', () => {
                createPostModal.style.display = 'flex';
                postSubmitBtn.disabled = true;
            });

            function communityDetailsCloseCreatePostModal() {
                createPostModal.style.display = 'none';
                createPostForm.reset();
                postImagePreview.style.display = 'none';
            }

            postCancelBtn?.addEventListener('click', communityDetailsCloseCreatePostModal);
            createPostModal?.addEventListener('click', e => { if(e.target === createPostModal) communityDetailsCloseCreatePostModal(); });

            [postTitleInput, postContentInput].forEach(input => {
                input?.addEventListener('input', () => {
                    const title = postTitleInput.value.trim();
                    const content = postContentInput.value.trim();
                    postSubmitBtn.disabled = !title || !content;
                });
            });

            postImageInput?.addEventListener('change', e => {
                const file = e.target.files[0];
                if(file){
                    postImagePreview.src = URL.createObjectURL(file);
                    postImagePreview.style.display = 'block';
                } else {
                    postImagePreview.style.display = 'none';
                }
            });

            createPostForm?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(createPostForm);

                try {
                    const response = await fetch(createPostForm.action, { method: 'POST', body: formData });
                    const result = await response.json();

                    if(result.success){
                        let imageHTML = result.post.imageUrl
                            ? `<img src="${result.post.imageUrl}" alt="Post image" style="max-width:100%; margin:0.5rem 0; border-radius:6px;">`
                            : '';

                        const newPost = document.createElement('div');
                        newPost.classList.add('community-details-post-card');
                        newPost.innerHTML = `
                            <h3>${result.post.title}</h3>
                            ${imageHTML}
                            <p>${result.post.content}</p>
                            <small>By ${result.post.authorName} on ${new Date(result.post.submittedAt).toLocaleDateString('en-US',{month:'short',day:'2-digit',year:'numeric'})}</small>
                        `;

                        const placeholder = postsContainer.querySelector('p[style*="text-align:center"]');
                        if (placeholder) placeholder.parentNode.remove();

                        postsContainer.prepend(newPost);
                        communityDetailsCloseCreatePostModal();
                    } else {
                        alert(result.message || 'Failed to create post.');
                    }
                } catch(err){
                    console.error(err);
                    alert('Error creating post');
                }
            });

            document.addEventListener('keydown', e => {
                if(e.key === "Escape") communityDetailsCloseCreatePostModal();
            });
        }

        // Initialize everything
        initJoinPolicyModal();
        initCreatePostModal();
    });
</script>