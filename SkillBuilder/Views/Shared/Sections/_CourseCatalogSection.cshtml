@model List<SkillBuilder.Models.Course>

@{
    var filterQuery = Context.Request.Query["filter"].ToString().ToLower();
}

<style>
    .course-section {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        padding: 6.5rem 0;
        background-color: #f9f9f9;
        min-height: 100vh;
    }

    .course-content-row {
        display: flex;
        gap: 2rem;
        flex-grow: 1;
        padding: 0 4rem;
        box-sizing: border-box;
    }

    .course-sidebar {
        width: 25%;
        background: #fff;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        font-family: Arial, sans-serif;
        color: #333;
        height: 100vh;
        overflow-y: auto;
        position: sticky;
        top: 0;
    }

        .course-sidebar h1 {
            font-size: 28px;
            margin-bottom: 1rem;
            font-weight: bold;
        }

        .course-sidebar h5 {
            font-size: 18px;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
            font-weight: 600;
        }

    .course-checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

        .course-checkbox-group label {
            cursor: pointer;
            font-size: 14px;
            user-select: none;
        }

        .course-checkbox-group input[type="checkbox"] {
            margin-right: 8px;
            cursor: pointer;
            vertical-align: middle;
            width: 16px;
            height: 16px;
        }

    .course-main {
        width: 75%;
        display: flex;
        flex-direction: column;
        gap: 2rem;
        overflow-x: hidden;
    }

    .course-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        justify-content: flex-start;
    }

    .course-card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        width: 280px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transition: transform 0.2s ease-in-out;
    }

        .course-card:hover {
            transform: translateY(-4px);
        }

        .course-card img {
            width: 100%;
            height: 160px;
            object-fit: cover;
        }

    .course-card-body {
        padding: 16px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .course-card-title {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 8px;
        color: #222;
    }

    .course-card-description {
        font-size: 14px;
        color: #555;
        margin-bottom: 14px;
        flex-grow: 1;
    }

    .course-card-meta {
        display: flex;
        justify-content: space-between;
        font-size: 13px;
        color: #888;
    }

        .course-card-meta .icon {
            width: 16px;
            height: 16px;
            margin-right: 4px;
            vertical-align: middle;
        }

    .course-card-link {
        text-decoration: none;
        color: inherit;
    }
</style>

<section class="course-section">
    <div class="course-content-row">
        <aside class="course-sidebar">
            <h1>Filter by</h1>

            <h5>Classes</h5>
            <div class="course-checkbox-group" id="classes-filter">
                <label><input type="checkbox" value="Weaving" /> Weaving</label>
                <label><input type="checkbox" value="Pottery" /> Pottery</label>
                <label><input type="checkbox" value="Paper Crafts" /> Paper Crafts</label>
                <label><input type="checkbox" value="Wood Carving" /> Wood Carving</label>
                <label><input type="checkbox" value="Shoemaking" /> Shoemaking</label>
                <label><input type="checkbox" value="Embroidery" /> Embroidery</label>
            </div>

            <h5>Level</h5>
            <div class="course-checkbox-group" id="level-filter">
                <label><input type="checkbox" value="Beginner" /> Beginner</label>
                <label><input type="checkbox" value="Intermediate" /> Intermediate</label>
                <label><input type="checkbox" value="Professional" /> Professional</label>
            </div>
        </aside>

        <div class="course-main">
            <div class="course-grid" id="courseCardsGrid">
                @foreach (var course in Model)
                {
                    <a href="@Url.Action("CourseCatalog", "Courses", new { selectedCourse = course.Link })" class="course-card-link">
                        <div class="course-card" data-classes="@course.Category" data-level="@course.Difficulty">
                            <img src="@course.ImageUrl" alt="@course.Title" />
                            <div class="course-card-body">
                                <h2 class="course-card-title">@course.Title</h2>
                                <p class="course-card-description">@course.Overview</p>
                                <div class="course-card-meta">
                                    <span><img src="/assets/Icons/Time.ico" class="icon" /> @course.Duration</span>
                                    <span><img src="/assets/Icons/Users.ico" class="icon" /> @course.UserCount</span>
                                    <span><img src="/assets/Icons/Star.ico" class="icon" /> @course.AverageRating.ToString("0.0")</span>
                                </div>
                            </div>
                        </div>
                    </a>
                }
            </div>
        </div>
    </div>
</section>

<script>
    // Helper to get checked values from a filter group
    function getCheckedValues(groupId) {
        return Array.from(document.querySelectorAll(`#${groupId} input[type="checkbox"]:checked`))
            .map(cb => cb.value.toLowerCase());
    }

    function filterCourses() {
        const selectedClasses = getCheckedValues("classes-filter");
        const selectedLevels = getCheckedValues("level-filter");

        const courseCards = document.querySelectorAll(".course-card");

        courseCards.forEach(card => {
            const courseCategory = card.getAttribute("data-classes")?.toLowerCase() || "";
            const courseLevel = card.getAttribute("data-level")?.toLowerCase() || "";
            const courseTitle = card.querySelector(".course-card-title").textContent.toLowerCase();

            const matchesClass = selectedClasses.length === 0 || selectedClasses.some(c =>
                courseCategory.includes(c) || courseTitle.includes(c)
            );

            const matchesLevel = selectedLevels.length === 0 || selectedLevels.includes(courseLevel);

            card.parentElement.style.display = (matchesClass && matchesLevel) ? "block" : "none";
        });
    }

    // Auto-check box based on query string
    window.addEventListener("DOMContentLoaded", () => {
        const filterFromQuery = "@filterQuery";

        if (filterFromQuery) {
            document.querySelectorAll('#classes-filter input[type="checkbox"]').forEach(cb => {
                if (cb.value.toLowerCase() === filterFromQuery) {
                    cb.checked = true;
                }
            });
        }

        // Run initial filtering
        filterCourses();
    });

    // Bind filter logic on checkbox changes
    document.querySelectorAll('.course-checkbox-group input[type="checkbox"]').forEach(cb => {
        cb.addEventListener('change', filterCourses);
    });

    window.addEventListener('load', () => {
        const url = new URL(window.location.href);
        if (url.searchParams.has('search')) {
            url.searchParams.delete('search');
            window.history.replaceState({}, document.title, url.pathname); // Removes ?search=...
        }
    });
</script>