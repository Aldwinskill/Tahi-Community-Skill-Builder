<!-- Login Modal -->
<style>
    /* ========== LOGIN MODAL ========== */
    .password-wrapper input {
        margin-bottom: 0 !important;
    }

    .password-wrapper {
        margin-bottom: 1rem;
        position: relative;
        display: flex;
        align-items: center;
    }

    .toggle-password {
        position: absolute;
        right: 0.75rem;
        cursor: pointer;
        user-select: none;
        font-size: 1.2rem;
        height: 100%;
        display: flex;
        align-items: center;
    }

    .forgot-password {
        font-size: 0.7rem;
        margin-bottom: 1.5rem;
        text-align: right;
    }

    .login-btn:enabled {
        background-color: #0056b3;
        color: white;
        cursor: pointer;
    }

    .signup-redirect {
        font-size: 0.8rem;
        text-align: center;
        margin-top: 1rem;
    }
</style>

<!-- Login Modal -->
<style>
    .password-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

        .password-wrapper input {
            margin-bottom: 0 !important;
        }

    .toggle-password {
        position: absolute;
        right: 0.75rem;
        cursor: pointer;
        user-select: none;
        font-size: 1.2rem;
        display: flex;
        align-items: center;
        height: 100%;
    }

    .forgot-password {
        font-size: 0.7rem;
        margin-bottom: 1.5rem;
        text-align: right;
    }

    .login-btn:enabled {
        background-color: #0056b3;
        color: white;
        cursor: pointer;
    }

    .signup-redirect {
        font-size: 0.8rem;
        text-align: center;
        margin-top: 1rem;
    }

    .reset-error {
        color: red;
        font-size: 0.75rem;
        margin-top: -0.5rem;
        margin-bottom: 0.8rem;
        display: block;
        font-weight: 500;
    }

    #forgot-email-stage h2{
        font-weight: 600;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    #forgot-email-stage p {
        font-weight: 500;
        font-size: 0.80rem;
        margin-bottom: 1rem;
    }

    #send-otp-btn {
        background-color: #aaa;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
        padding: 0.5rem 1rem;
        border: none;
    }

        #send-otp-btn:disabled:hover {
            background-color: #aaa;
        }

        #send-otp-btn:enabled {
            color: white;
            background: #364BE9;
            cursor: pointer;
            opacity: 1;
            transition: all 0.2s ease;
        }

        #send-otp-btn:enabled:hover {
            background: #2a34c6;
        }

    #otp-stage {
        display:none;
    }

    #otp-stage h2{
        font-weight: 600;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    #otp-stage p {
        font-weight: 500;
        font-size: 0.80rem;
        margin-bottom: 1rem;
    }

    #otp-submit-btn {
        background-color: #aaa;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
        padding: 0.5rem 1rem;
        border: none;
    }

        #otp-submit-btn:enabled {
            color: white;
            background: #364BE9;
            cursor: pointer;
            opacity: 1;
            transition: all 0.2s ease;
        }

        #otp-submit-btn:enabled:hover {
            background: #2a34c6;
        }

    #reset-password-stage {
        display:none;
    }

    #reset-password-stage h2 {
        font-weight: 600;
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    #reset-password-enter {
        font-weight: 500;
        font-size: 0.80rem;
        margin-bottom: 1rem;
    }

    #reset-password-btn {
        background-color: #aaa;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
        padding: 0.5rem 1rem;
        border: none;
    }
    
        #reset-password-btn:enabled {
            color: white;
            background: #364BE9;
            cursor: pointer;
            opacity: 1;
            transition: all 0.2s ease;
        }

        #reset-password-btn:enabled:hover {
            background: #2a34c6;
        }

    #back-to-login-btn {
        margin-top:1rem; 
        padding:0.5rem 1rem; 
        background:#364BE9; 
        color:white; 
        border:none; 
        cursor:pointer;
    }

    #reset-success-stage {
        display:none; 
        text-align:center; 
        padding: -2rem;
    }

    #resend-otp {
        background: none;
        color: #666;
        cursor: not-allowed;
        opacity: 0.6;
        padding: 0.5rem 1rem;
        border: none;
        transition: all 0.2s ease;
    }

        #resend-otp:enabled {
            color: black;
            cursor: pointer;
            opacity: 1;
        }

</style>

<div id="login-modal" class="auth-modal">
    <div class="auth-modal-container">
        <!-- Left Side -->
        <div class="auth-modal-left">
            <img src="~/assets/Background Pics/LogInBG.png" />
        </div>

        <!-- Right Side -->
        <div class="auth-modal-right">
            <span id ="login-close-btn" class="auth-close-btn" onclick="closeModal('login-modal', true)">&times;</span>

            <div id="login-main-content">
                <h2>Log in to <span style="color: #364BE9">Tahi</span></h2>

                <!-- Social Logins -->
                <div class="social-login">
                    <button id="btn-google-login"><img src="~/assets/Logos/Google.svg">Continue with Google</button>
                    <button id="btn-facebook-login"><img src="~/assets/Logos/FacebookLogo.svg">Continue with Facebook</button>
                </div>

                <div class="separator"><span>or</span></div>

                <!-- Email/Password Login -->
                <form id="login-form">
                    <label for="login-email">Email</label>
                    <input type="email" id="login-email" required />

                    <label for="login-password">Password</label>
                    <div class="password-wrapper">
                        <input type="password" id="login-password" required />
                        <span class="toggle-password" onclick="togglePasswordVisibility('login-password', this)">👁️‍🗨️</span>
                    </div>

                    <div class="forgot-password">
                        <a href="#" onclick="showForgotPasswordForm(event)">Forgot your password?</a>
                    </div>

                    <button type="submit" class="modal-btn login-btn" disabled>Log In</button>
                    <p class="login-error-message" style="color:red;font-size:0.8rem;margin-top:0.5rem;text-align:center;"></p>

                    <p class="signup-redirect">Don't have an account yet? <a href="#" onclick="switchToSignup()">Sign up</a></p>
                </form>
            </div>

            <!-- Updated Forgot Password / OTP Flow -->
            <div id="forgot-password-form" style="display:none; position:relative;">
                <!-- Back Button -->
                <button type="button" class="back-social-btn" onclick="showLoginForm(event)">←</button>
                
                <!-- Email Stage -->
                <div id="forgot-email-stage">
                    <h2>Forgot Password</h2>
                    <p>Enter your email and we'll send you instructions to reset your password.</p>

                    <input type="email" id="forgot-email" placeholder="Email" />
                    <p id="password-email-error" class="reset-error" style="display: none;">⚠️ Please enter a valid email.</p>
                    <button type="button" id="send-otp-btn" disabled>Send Instruction</button>

                    <p class="forgot-error-message" style="color:red;font-size:0.8rem;margin-top:0.5rem;text-align:center;"></p>
                </div>

                <!-- OTP Stage -->
                <div id="otp-stage">
                    <h2>Forgot Password</h2>
                    <p>If the email is valid, you will receive a One Time Password (OTP) via email. Enter it below.</p>

                    <input type="text" id="otp-input" placeholder="Enter 6-digit OTP" maxlength="6" />
                    <p id="password-number-error" class="reset-error" style="display: none;">⚠️ Only letters are allowed.</p>
                    <button type="button" id="otp-submit-btn" disabled>Submit</button>

                    <p style="text-align:center;margin-top:1rem;">
                        Didn’t receive code? <button type="button" id="resend-otp">Resend</button>
                    </p>

                    <p class="otp-error-message" style="color:red;font-size:0.8rem;margin-top:0.5rem;text-align:center;"></p>
                </div>

                <!-- Reset Password Stage -->
                <div id="reset-password-stage">
                    <h2>Reset Password</h2>
                    <p id="reset-password-enter">Enter your new password below.</p>

                    <!-- New Password -->
                    <div class="password-wrapper">
                        <input type="password" id="reset-password" placeholder="New Password" />
                        <span class="toggle-password" data-target="reset-password">👁️</span>
                    </div>

                    <!-- Password Requirements (under new password only) -->
                    <div id="reset-password-requirements" class="password-requirements" style="display: none; margin-top: -1.5rem;">
                        <p id="req-length-reset" data-text="Minimum 8 characters">❌ Minimum 8 characters</p>
                        <p id="req-uppercase-reset" data-text="At least one uppercase letter">❌ At least one uppercase letter</p>
                        <p id="req-number-reset" data-text="At least one number">❌ At least one number</p>
                        <p id="req-symbol-reset" data-text="At least one symbol (!#^*_-)">❌ At least one symbol (!#^*-)</p>
                    </div>

                    <!-- Confirm Password -->
                    <div class="password-wrapper">
                        <input type="password" id="reset-confirm" placeholder="Confirm New Password" />
                        <span class="toggle-password" data-target="reset-confirm">👁️</span>
                    </div>

                    <!-- Warning for mismatch -->
                    <p id="reset-confirm-warning" class="reset-error" style="display: none; margin-top: -1.5rem;">⚠️ Passwords do not match.</p>

                    <button type="button" id="reset-password-btn" disabled>Reset Password</button>
                    <p class="reset-error-message" style="color:red;font-size:0.8rem;margin-top:0.5rem;text-align:center;"></p>
                </div>

                <!-- Password Reset Success Stage -->
                <div id="reset-success-stage">
                    <h2>Password Successfully Updated!</h2>
                    <button type="button" id="back-to-login-btn">Great!</button>
                </div>

            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // ---------- Initialize Appwrite ----------
        // if (!window.appwriteClient) {
        //     window.appwriteClient = new Appwrite.Client()
        //         .setEndpoint("https:fra.cloud.appwrite.io/v1")
        //         .setProject("689ad4040030d8902c02");
        //     window.appwriteAccount = new Appwrite.Account(window.appwriteClient);
        // }

        // const SUCCESS_URL = "https:localhost:7049/oauth/success";

        // ---------- OAuth Buttons ----------
        // const googleBtn = document.getElementById("btn-google-login");
        // const facebookBtn = document.getElementById("btn-facebook-login");

        // googleBtn?.addEventListener("click", () => {
        //     window.appwriteAccount.createOAuth2Session(
        //         "google",
        //         SUCCESS_URL,
        //         "https:localhost:7049/?error=OAuthFailed",
        //         ["openid", "email", "profile"]
        //     );
        // });

        // facebookBtn?.addEventListener("click", () => {
        //     window.appwriteAccount.createOAuth2Session(
        //         "facebook",
        //         SUCCESS_URL,
        //         "https:localhost:7049/?error=OAuthFailed"
        //     );
        // });

        // ---------- Login ----------
        const emailInput = document.getElementById('login-email');
        const passwordInput = document.getElementById('login-password');
        const loginBtn = document.querySelector('.login-btn');
        const loginErrorMsg = document.querySelector('.login-error-message');

        function checkLoginInputs() {
            loginBtn.disabled = !(emailInput.value.trim() && passwordInput.value);
        }
        emailInput.addEventListener('input', checkLoginInputs);
        passwordInput.addEventListener('input', checkLoginInputs);

        document.getElementById('login-form')?.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = emailInput.value.trim();
            const password = passwordInput.value;

            try {
                const res = await fetch('/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                const data = await res.json();

                if (res.ok && data.success) {
                    localStorage.setItem("userRole", data.role);
                    localStorage.setItem("userId", data.userId);
                    localStorage.setItem("isVerified", data.isVerified);

                    const redirectMap = {
                        "Learner": `/UserProfile/${data.userId}`,
                        "Artisan": `/ArtisanProfile/${data.userId}`,
                        "Admin": `/AdminProfile/${data.userId}`
                    };
                    window.location.href = redirectMap[data.role] || "/";
                } else {
                    loginErrorMsg.textContent = data.message || "Login failed.";
                }
            } catch (err) {
                console.error(err);
                loginErrorMsg.textContent = "Something went wrong. Try again.";
            }
        });

        // ---------- Toggle Password ----------
        window.togglePasswordVisibility = function(inputId, icon) {
            const input = document.getElementById(inputId);
            input.type = input.type === "password" ? "text" : "password";
            if(icon) icon.textContent = input.type === "password" ? "👁️‍🗨️" : "🙈";
        };

        // ---------- Forgot / OTP / Reset ----------
        const forgotEmailInput = document.getElementById('forgot-email');
        const sendOtpBtn = document.getElementById('send-otp-btn');
        const otpInput = document.getElementById('otp-input');
        const otpSubmitBtn = document.getElementById('otp-submit-btn');
        const resendOtpLink = document.getElementById('resend-otp');

        const otpErrorMsg = document.querySelector('.otp-error-message');
        const forgotErrorMsg = document.querySelector('.forgot-error-message');

        const resetStage = document.getElementById('reset-password-stage');
        const resetPasswordInput = document.getElementById('reset-password');
        const confirmResetInput = document.getElementById('reset-confirm');
        const resetBtn = document.getElementById('reset-password-btn');
        const resetErrorMsg = document.querySelector('.reset-error-message');
        const emailErrorMsg = document.getElementById('password-email-error');
        const otpErrorMsgInline = document.getElementById('password-number-error');

        // Enable Send OTP
        forgotEmailInput?.addEventListener('input', () => {
            const email = forgotEmailInput.value.trim();
            const isValidEmail = new RegExp("^[^\\s]+@@[^\\s]+\\.[^\\s]+$").test(email);

            if (email.length > 0 && !isValidEmail) {
                emailErrorMsg.style.display = 'block';
            } else {
                emailErrorMsg.style.display = 'none';
            }

            sendOtpBtn.disabled = !isValidEmail;
        });

        // Enable OTP submit
        otpInput?.addEventListener('input', () => {
            const otp = otpInput.value.trim();
            const isNumeric = /^\d*$/.test(otp);

            if (!isNumeric) {
                otpErrorMsgInline.style.display = 'block';
            } else {
                otpErrorMsgInline.style.display = 'none';
            }

            if (otp.length === 6 && /^\d{6}$/.test(otp)) {
                otpSubmitBtn.disabled = false;
            } else {
                otpSubmitBtn.disabled = true;
            }
        });

        // Send OTP
        sendOtpBtn?.addEventListener('click', async () => {
            const email = forgotEmailInput.value.trim();
            forgotErrorMsg.textContent = '';

            if (!email) return (forgotErrorMsg.textContent = 'Please enter your email.');

            sendOtpBtn.disabled = true;
            sendOtpBtn.innerText = "Sending...";

            try {
                const res = await fetch('/forgot-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
                const data = await res.json();

                if (res.ok) {
                    document.getElementById('forgot-email-stage').style.display = 'none';
                    document.getElementById('otp-stage').style.display = 'block';
                    toggleCloseButton();

                } else {
                    forgotErrorMsg.textContent = data.message || 'Failed to send instructions.';
                    sendOtpBtn.disabled = false;
                    sendOtpBtn.innerText = "Send Instruction";
                }
            } catch (err) {
                console.error(err);
                forgotErrorMsg.textContent = 'Something went wrong. Try again.';
                sendOtpBtn.disabled = false;
                sendOtpBtn.innerText = "Send Instruction";
            }
        });

        // Verify OTP
        otpSubmitBtn?.addEventListener('click', async () => {
            const email = forgotEmailInput.value.trim();
            const otp = otpInput.value.trim();
            otpErrorMsg.textContent = '';

            if (otp.length !== 6 || !/^\d{6}$/.test(otp)) return (otpErrorMsg.textContent = 'OTP must be 6 digits.');

            otpSubmitBtn.disabled = true;
            otpSubmitBtn.innerText = "Verifying...";

            try {
                const res = await fetch('/verify-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, otp })
                });
                const data = await res.json();

                if (res.ok && data.success) {
                    document.getElementById('otp-stage').style.display = 'none';
                    resetStage.style.display = 'block';
                    toggleCloseButton();
                    initializeResetPassword(email);
                } else {
                    otpErrorMsg.textContent = data.message || 'Invalid OTP. Please try again.';
                }
            } catch (err) {
                console.error(err);
                otpErrorMsg.textContent = 'Something went wrong. Try again.';
                otpSubmitBtn.disabled = false; 
                otpSubmitBtn.innerText = "Submit";
            }
        });

        resendOtpLink?.addEventListener('click', async (e) => {
            e.preventDefault();
            const email = forgotEmailInput.value.trim();
            if (!email) {
                forgotErrorMsg.textContent = "Please enter your email first.";
                return;
            }

            // Show "Resending..."
            resendOtpLink.textContent = "Resending...";
            resendOtpLink.style.pointerEvents = "none"; // temporarily prevent double-click

            try {
                const res = await fetch('/resend-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
                const data = await res.json();

                if (res.ok && data.success) {
                    otpErrorMsg.textContent = '';
                    startResendCooldown(60); // Only now we disable for 60s
                } else {
                    otpErrorMsg.textContent = data.message || "Failed to resend OTP.";
                    resendOtpLink.textContent = "Resend";
                    resendOtpLink.style.pointerEvents = "auto";
                }
            } catch (err) {
                console.error(err);
                otpErrorMsg.textContent = "Something went wrong. Try again.";
                resendOtpLink.textContent = "Resend";
                resendOtpLink.style.pointerEvents = "auto";
            }
        });

        // Cooldown function
        function startResendCooldown(seconds) {
            let remaining = seconds;
            resendOtpLink.textContent = `Resend (${remaining}s)`;
            resendOtpLink.style.pointerEvents = "none";

            const interval = setInterval(() => {
                remaining--;
                resendOtpLink.textContent = `Resend (${remaining}s)`;

                if (remaining <= 0) {
                    clearInterval(interval);
                    resendOtpLink.textContent = "Resend";
                    resendOtpLink.style.pointerEvents = "auto";
                }
            }, 1000);
        }

        // ---------- Reset Password Logic ----------
        function initializeResetPassword(email) {
            const reqIds = ["req-length-reset","req-uppercase-reset","req-number-reset","req-symbol-reset"];
            function updateRequirement(id, valid) {
                const el = document.getElementById(id);
                const text = el.getAttribute("data-text") || el.textContent.replace("❌","").replace("✅","").trim();
                el.textContent = (valid ? "✅ " : "❌ ") + text;
                el.style.color = valid ? "green" : "orange";
            }

            function validateResetInputs() {
                const pw = resetPasswordInput.value.trim();
                const confirm = confirmResetInput.value.trim();

                // Show requirements under new password
                document.getElementById("reset-password-requirements").style.display = "block";

                updateRequirement("req-length-reset", pw.length >= 8);
                updateRequirement("req-uppercase-reset", /[A-Z]/.test(pw));
                updateRequirement("req-number-reset", /\d/.test(pw));
                updateRequirement("req-symbol-reset", /[!#\^*_\-]/.test(pw));

                // Show mismatch warning only if user typed something in confirm
                const warning = document.getElementById("reset-confirm-warning");
                if (confirm.length > 0 && pw !== confirm) {
                    warning.style.display = "block";
                } else {
                    warning.style.display = "none";
                }

                // Enable reset button only if all requirements met AND passwords match
                resetBtn.disabled = !(
                    pw.length >= 8 &&
                    /[A-Z]/.test(pw) &&
                    /\d/.test(pw) &&
                    /[!#\^*_\-]/.test(pw) &&
                    pw === confirm
                );
            }

            resetPasswordInput.addEventListener("input", validateResetInputs);
            confirmResetInput.addEventListener("input", validateResetInputs);

            // Toggle password visibility
            document.querySelectorAll('.toggle-password').forEach(icon => {
                icon.addEventListener('click', () => {
                    const targetId = icon.getAttribute('data-target');
                    const target = document.getElementById(targetId);
                    target.type = target.type === "password" ? "text" : "password";
                    icon.textContent = target.type === "text" ? "🙈" : "👁️";
                });
            });

            // Reset Button Click
            resetBtn.addEventListener('click', async () => {
                const newPassword = resetPasswordInput.value.trim();

                if(newPassword === window.oldPassword) { // oldPassword could be fetched when starting reset
                    resetErrorMsg.textContent = "⚠️ You cannot use your previous password.";
                    return;
                }

                resetBtn.disabled = true;
                resetErrorMsg.textContent = '';

                try {
                    const res = await fetch('/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, newPassword })
                    });
                    const data = await res.json();

                    if (res.ok && data.success) {
                        resetStage.style.display = 'none';
                        forgotEmailInput.value = '';
                        otpInput.value = '';
                        resetPasswordInput.value = '';
                        confirmResetInput.value = '';

                        // Show success stage
                        document.getElementById('reset-success-stage').style.display = 'block';
                        toggleCloseButton();

                        // Back to Login button
                        document.getElementById('back-to-login-btn').addEventListener('click', () => {
                            document.getElementById('reset-success-stage').style.display = 'none';
                        });
                    } else {
                        resetErrorMsg.textContent = data.message || "Error resetting password.";
                        resetBtn.disabled = false;
                    }
                } catch (err) {
                    console.error(err);
                    resetErrorMsg.textContent = "Something went wrong. Try again.";
                    resetBtn.disabled = false;
                }
            });
        }

        function toggleCloseButton() {
            const closeBtn = document.getElementById('login-close-btn');
            const otpStage = document.getElementById('otp-stage');
            const successStage = document.getElementById('reset-success-stage');

            // Use getComputedStyle to reliably check if element is visible
            function isVisible(el) {
                return el && window.getComputedStyle(el).display !== 'none';
            }

            if (isVisible(otpStage) || isVisible(resetStage) || isVisible(successStage)) {
                closeBtn.style.display = 'none';
            } else {
                closeBtn.style.display = 'block';
            }
        }

        function showForgotPasswordForm(e) {
            e.preventDefault();
            document.getElementById('login-main-content').style.display = 'none';
            document.getElementById('forgot-password-form').style.display = 'block';
            document.getElementById('forgot-email-stage').style.display = 'block';
            document.getElementById('otp-stage').style.display = 'none';
            document.getElementById('reset-password-stage').style.display = 'none';
            document.getElementById('reset-success-stage').style.display = 'none';
            toggleCloseButton();
        }

        function showLoginForm(e) {
            if (e) e.preventDefault();
            document.getElementById('login-main-content').style.display = 'block';
            document.getElementById('forgot-password-form').style.display = 'none';
            toggleCloseButton(); // ensures close button shows correctly
        }

        const loginCloseBtn = document.getElementById('login-close-btn');
            const otpStage = document.getElementById('otp-stage');
            const successStage = document.getElementById('reset-success-stage');

        document.addEventListener("keydown", (e) => {
            const isOtpVisible = window.getComputedStyle(otpStage).display !== 'none';
            const isResetVisible = window.getComputedStyle(resetStage).display !== 'none';
            const isSuccessVisible = window.getComputedStyle(successStage).display !== 'none';

            // Disable Escape key only for OTP, Reset, Success stages
            if (e.key === "Escape" && (isOtpVisible || isResetVisible || isSuccessVisible)) {
                e.preventDefault();  // prevent default
                e.stopPropagation(); // stop propagation to any modal handler
            }
        });

        // Flag to ignore beforeunload temporarily
        let ignoreBeforeUnload = false;

        window.addEventListener("beforeunload", (e) => {
            if (ignoreBeforeUnload) return; // skip if flag is set

            const otpStage = document.getElementById("otp-stage");
            const resetStage = document.getElementById("reset-password-stage");
            const successStage = document.getElementById("reset-success-stage");

            const isOtpVisible = otpStage && window.getComputedStyle(otpStage).display !== 'none';
            const isResetVisible = resetStage && window.getComputedStyle(resetStage).display !== 'none';
            const isSuccessVisible = successStage && window.getComputedStyle(successStage).display !== 'none';

            if (isOtpVisible || isResetVisible || isSuccessVisible) {
                e.preventDefault();
                e.returnValue = ''; // triggers confirmation
            }
        });

        // Example: when clicking Back to Login in success stage
        const backToLoginBtn = document.getElementById('back-to-login-btn');
        backToLoginBtn.addEventListener('click', () => {
            ignoreBeforeUnload = true;
            window.location.reload();
        });

        // ---------- Update close button visibility ----------
        function toggleCloseButton() {
            const isOtpVisible = window.getComputedStyle(otpStage).display !== 'none';
            const isResetVisible = window.getComputedStyle(resetStage).display !== 'none';
            const isSuccessVisible = window.getComputedStyle(successStage).display !== 'none';

            loginCloseBtn.style.display = (isOtpVisible || isResetVisible || isSuccessVisible) ? 'none' : 'block';
        }

        // Call toggleCloseButton whenever stages change
        const observer = new MutationObserver(toggleCloseButton);
        [otpStage, resetStage, successStage].forEach(stage => observer.observe(stage, { attributes: true, attributeFilter: ['style'] }));
    });
</script>