@model List<SkillBuilder.Models.CourseProjectSubmission>

@{
    var activeProjectTab = ViewData["ActiveProjectTab"] as string ?? "pending";
}

<style>
    .user-projects-section {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .user-projects-header {
        font-size: 1.8rem;
        color: #344AEA;
        margin-bottom: 1rem;
    }

    /* Tabs styling (copied from reference) */
    .user-projects-tabs {
        display: flex;
        gap: 2rem;
        margin-bottom: 1rem;
    }

    .user-projects-tab {
        padding: 0.75rem 1.5rem;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .user-projects-tab.active {
            border-bottom: 3px solid #344AEA;
            color: #344AEA;
        }

        .user-projects-tab:hover {
            color: #344AEA;
        }

    .user-projects-content .user-projects-panel {
        display: none;
    }

        .user-projects-content .user-projects-panel.active {
            display: block;
        }

    /* Grid and cards (same as your original) */
    .user-projects-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
    }

    .user-projects-card {
        width: 200px;
        text-align: center;
    }

        .user-projects-card img {
            width: 100%;
            height: 160px;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        }

    .user-projects-course-name {
        margin-top: 0.5rem;
        font-weight: bold;
        color: #333;
        font-size: 0.95rem;
    }

    .user-projects-empty {
        padding: 2rem;
        text-align: center;
        color: #777;
        font-size: 1rem;
        line-height: 1.6;
        border: 1px dashed #ccc;
        border-radius: 10px;
        background-color: #fafafa;
    }
</style>

<section class="user-projects-section">
    <h2 class="user-projects-header">Projects</h2>

    <!-- Tabs -->
    <div class="user-projects-tabs">
        <button class="user-projects-tab @(activeProjectTab == "pending" ? "active" : "")" data-tab="pending">Pending</button>
        <button class="user-projects-tab @(activeProjectTab == "approved" ? "active" : "")" data-tab="approved">Approved</button>
        <button class="user-projects-tab @(activeProjectTab == "rejected" ? "active" : "")" data-tab="rejected">Rejected</button>
    </div>

    <!-- Panels -->
    <div class="user-projects-content">
        <div class="user-projects-panel @(activeProjectTab == "pending" ? "active" : "")" data-tab="pending">
            @await Html.PartialAsync("Sections/UserNotebooks/MyProjectsNotebooks/_ProjectsNotebookPending", Model.Where(p => p.Status == "Pending").ToList())
        </div>
        <div class="user-projects-panel @(activeProjectTab == "approved" ? "active" : "")" data-tab="approved">
            @await Html.PartialAsync("Sections/UserNotebooks/MyProjectsNotebooks/_ProjectsNotebookApproved", Model.Where(p => p.Status == "Approved").ToList())
        </div>
        <div class="user-projects-panel @(activeProjectTab == "rejected" ? "active" : "")" data-tab="rejected">
            @await Html.PartialAsync("Sections/UserNotebooks/MyProjectsNotebooks/_ProjectsNotebookRejected", Model.Where(p => p.Status == "Rejected").ToList())
        </div>
    </div>
</section>

<script>
    const projectTabs = document.querySelectorAll('.user-projects-tab');
    const projectPanels = document.querySelectorAll('.user-projects-panel');

    projectTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const selected = tab.dataset.tab;

            projectTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');

            projectPanels.forEach(panel => {
                panel.classList.toggle('active', panel.dataset.tab === selected);
            });
        });
    });
</script>