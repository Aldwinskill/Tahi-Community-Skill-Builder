@model SkillBuilder.Models.ViewModels.CourseBuilderViewModel

@{
    var learningObjectives = Model.LearningObjectives ?? new List<string> { "" };
}

<style>
    .basicinfo-form-group {
        margin-bottom: 1.5rem;
    }

        .basicinfo-form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #333;
        }

    .basicinfo-form-control,
    .basicinfo-form-select {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
    }

    .basicinfo-form-row {
        display: flex;
        gap: 2rem;
    }

    .basicinfo-form-col {
        flex: 1;
    }

    .basicinfo-label {
        display: block;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #333;
    }


    .basicinfo-objectives-container {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

        .basicinfo-objectives-container input {
            margin-bottom: 0.75rem;
        }

    .basicinfo-objective-item {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        background-color: #fff;
    }

        .basicinfo-objective-item input {
            flex: 1;
            border: none;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            outline: none;
            background: transparent;
        }

    .basicinfo-delete-btn {
        background-color: transparent;
        border: none;
        color: #333;
        font-size: 1.1rem;
        padding: 0 1rem;
        cursor: pointer;
        transition: color 0.2s ease;
    }

        .basicinfo-delete-btn:hover {
            color: #d00;
        }

    .basicinfo-add-btn {
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        font-weight: 600;
        color: #344AEA;
        background-color: transparent;
        border: 1.5px solid #344AEA;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

        .basicinfo-add-btn:hover {
            background-color: #344AEA;
            color: white;
        }

    .basicinfo-upload-box {
        display: flex;
        gap: 1.5rem;
        align-items: center;
        padding: 1rem;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .basicinfo-upload-preview {
        width: 100px;
        height: 100px;
        background-color: #eee;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        color: #aaa;
    }

    .artisan-work-item {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background: #fafafa;
        position: relative;
    }

    .artisan-work-preview {
        width: 120px;
        height: 120px;
        background: #eee;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 1rem;
        overflow: hidden;
    }

        .artisan-work-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

    .artisan-work-fields {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

        .artisan-work-fields input {
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 1rem;
        }

    .delete-work-btn {
        position: absolute;
        top: 8px;
        right: 8px;
        background: transparent;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: #666;
    }

        .delete-work-btn:hover {
            color: #d00;
        }

    .basicinfo-duration-row {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .duration-value {
        width: 150px;
    }

    .duration-unit {
        flex: 1; 
    }

    .file-error {
        display: block;
        color: red;
        font-size: 0.85rem;
        margin-top: 4px;
        margin-left: 2px;
    }
</style>

<div class="basicinfo-form-wrapper">

    <!-- Course Title & Category -->
    <div class="basicinfo-form-row">
        <div class="basicinfo-form-col basicinfo-form-group">
            <label for="Course_Title">Course Title *</label>
            <input asp-for="Course.Title" class="basicinfo-form-control" placeholder="Enter course title" required />
        </div>
        <div class="basicinfo-form-col basicinfo-form-group">
            <label for="Course_Category">Category *</label>
            <select asp-for="Course.Category" class="basicinfo-form-select" required>
                <option value="">Select category</option>
                <option>Pottery</option>
                <option>Weaving</option>
                <option>Woodcarving</option>
                <option>Paper Crafts</option>
                <option>Shoemaking</option>
                <option>Embroidery</option>
            </select>
        </div>
    </div>

    <!-- Overview -->
    <div class="basicinfo-form-group">
        <label for="Course_Overview">Course Overview *</label>
        <textarea asp-for="Course.Overview" class="basicinfo-form-control" rows="4" placeholder="Write a brief overview..." required></textarea>
    </div>

    <!-- Difficulty & Duration -->
    <div class="basicinfo-form-row">
        <div class="basicinfo-form-col basicinfo-form-group">
            <label for="Course_Difficulty">Difficulty Level *</label>
            <select asp-for="Course.Difficulty" class="basicinfo-form-select" required>
                <option value="">-- Select --</option>
                <option>Beginner</option>
                <option>Intermediate</option>
                <option>Professional</option>
            </select>
        </div>
        <div class="basicinfo-form-col basicinfo-form-group">
            <label>Duration *</label>
            <div class="basicinfo-duration-row">
                <input type="number" name="DurationValue" id="Course_DurationValue" class="basicinfo-form-control duration-value" placeholder="Enter duration" required />
                <select name="DurationUnit" id="Course_DurationUnit" class="basicinfo-form-select duration-unit" required>
                    <option value="minutes">Minutes</option>
                    <option value="hours">Hours</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Requirements -->
    <div class="basicinfo-form-group">
        <label for="Course_Requirements">Requirements *</label>
        <textarea asp-for="Course.Requirements" class="basicinfo-form-control" rows="3" placeholder="List required tools or skills" required></textarea>
    </div>

    <!-- Learning Objectives -->
    <div class="basicinfo-form-group">
        <label>Learning Objectives *</label>
        <div id="objectives-container" class="basicinfo-objectives-container">
            @for (int i = 0; i < learningObjectives.Count; i++)
            {
                <div class="basicinfo-objective-item">
                    <input type="text" name="LearningObjectives[@i]" value="@learningObjectives[i]" class="basicinfo-form-control" placeholder="Objective" required />
                    <button type="button" class="basicinfo-delete-btn" onclick="this.parentElement.remove()">🗑️</button>
                </div>
            }
        </div>
        <button type="button" id="add-objective" class="basicinfo-add-btn">+ Add Objective</button>
    </div>

    <!-- Full Description -->
    <div class="basicinfo-form-group">
        <label for="Course_FullDescription">Full Course Description *</label>
        <textarea asp-for="Course.FullDescription" class="basicinfo-form-control" rows="5" placeholder="Detailed explanation..." required></textarea>
    </div>

    <!-- Image Upload -->
    <div class="basicinfo-form-group">
        <label>Course Image *</label>
        <div class="basicinfo-upload-box">
            <div class="basicinfo-upload-preview">
                <img id="imagePreview" src="#" alt="Preview" style="width: 100px; height: 100px; display: none; object-fit: cover;" />
            </div>
            <div>
                <label for="ImageFile">Upload image</label>
                <input type="file" name="ImageFile" id="ImageFile" accept="image/*" required />
            </div>
        </div>
    </div>

    <!-- Thumbnail Upload -->
    <div class="basicinfo-form-group">
        <label>Video Thumbnail *</label>
        <div class="basicinfo-upload-box">
            <div class="basicinfo-upload-preview">
                <img id="thumbPreview" src="#" alt="Thumbnail" style="width: 100px; height: 100px; display: none; object-fit: cover;" />
            </div>
            <div>
                <label for="ThumbnailFile">Upload thumbnail</label>
                <input type="file" name="ThumbnailFile" id="ThumbnailFile" accept="image/*" required />
            </div>
        </div>
    </div>

    <!-- Video Upload -->
    <div class="basicinfo-form-group">
        <label>Course Intro Video *</label>
        <div class="basicinfo-upload-box">
            <div class="basicinfo-upload-preview">
                <video id="videoPreview" width="100" height="100" controls style="display: none;"></video>
            </div>
            <div>
                <label for="VideoFile">Upload video</label>
                <input type="file" name="VideoFile" id="VideoFile" accept="video/*" required />
            </div>
        </div>
    </div>

</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {

        // -------------------- FILE VALIDATION SETTINGS --------------------
        const fileRules = {
            image: {
                maxSize: 5 * 1024 * 1024, // 5 MB
                allowed: [".jpg", ".jpeg", ".png", ".gif", ".webp"]
            },
            video: {
                maxSize: 200 * 1024 * 1024, // 200 MB
                allowed: [".mp4", ".mov", ".avi"]
            }
        };

        // Add error message containers below each file input
        const fileInputs = [
            { id: "ImageFile", type: "image" },
            { id: "ThumbnailFile", type: "image" },
            { id: "VideoFile", type: "video" }
        ];

        fileInputs.forEach(f => {
            const input = document.getElementById(f.id);
            if (input && !input.parentElement.querySelector(".file-error")) {
                const error = document.createElement("span");
                error.className = "file-error";
                error.style.color = "red";
                error.style.fontSize = "0.85rem";
                error.style.display = "none";
                error.style.marginTop = "4px";
                error.style.marginLeft = "2px";
                error.style.display = "block"; // ensure it's below
                input.insertAdjacentElement("afterend", error);
            }
        });

        function validateFile(input, type) {
            const file = input.files[0];
            const errorEl = input.parentElement.querySelector(".file-error");
            if (!file || !errorEl) return true;

            errorEl.textContent = "";
            errorEl.style.display = "none";

            const { maxSize, allowed } = fileRules[type];
            const ext = file.name.toLowerCase().substring(file.name.lastIndexOf("."));

            // Validate extension
            if (!allowed.includes(ext)) {
                errorEl.textContent = `Invalid file type. Allowed: ${allowed.join(", ")}`;
                errorEl.style.display = "block";
                input.value = "";
                return false;
            }

            // Validate file size
            if (file.size > maxSize) {
                const sizeMB = (maxSize / (1024 * 1024)).toFixed(0);
                errorEl.textContent = `File too large. Max ${sizeMB} MB allowed.`;
                errorEl.style.display = "block";
                input.value = "";
                return false;
            }

            return true;
        }

        // -------------------- IMAGE PREVIEW --------------------
        const imageInput = document.getElementById("ImageFile");
        const imagePreview = document.getElementById("imagePreview");

        imageInput.addEventListener("change", function () {
            const file = this.files[0];
            if (!validateFile(this, "image")) return;

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = "block";
                };
                reader.readAsDataURL(file);
            }
        });

        // -------------------- VIDEO PREVIEW --------------------
        const videoInput = document.getElementById("VideoFile");
        const videoPreview = document.getElementById("videoPreview");

        videoInput.addEventListener("change", function () {
            const file = this.files[0];
            if (!validateFile(this, "video")) return;

            if (file) {
                const videoURL = URL.createObjectURL(file);
                videoPreview.src = videoURL;
                videoPreview.style.display = "block";
            }
        });

        // -------------------- THUMBNAIL PREVIEW --------------------
        const thumbInput = document.getElementById("ThumbnailFile");
        const thumbPreview = document.getElementById("thumbPreview");

        thumbInput.addEventListener("change", function () {
            const file = this.files[0];
            if (!validateFile(this, "image")) return;

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    thumbPreview.src = e.target.result;
                    thumbPreview.style.display = "block";
                };
                reader.readAsDataURL(file);
            }
        });

        // -------------------- OBJECTIVES ADD/REMOVE --------------------
        const container = document.getElementById("objectives-container");
        const addBtn = document.getElementById("add-objective");
        let objectiveIndex = container.children.length; // initial count

        function createObjectiveItem(index) {
            const wrapper = document.createElement("div");
            wrapper.className = "basicinfo-objective-item";

            const input = document.createElement("input");
            input.type = "text";
            input.name = `LearningObjectives[${index}]`;
            input.className = "basicinfo-form-control";
            input.placeholder = "Add learning objective";
            input.required = true;

            const deleteBtn = document.createElement("button");
            deleteBtn.type = "button";
            deleteBtn.className = "basicinfo-delete-btn";
            deleteBtn.innerHTML = "🗑️";
            deleteBtn.title = "Remove Objective";
            deleteBtn.onclick = function () {
                wrapper.remove();
                renumberObjectives();
            };

            wrapper.appendChild(input);
            wrapper.appendChild(deleteBtn);
            return wrapper;
        }

        addBtn.addEventListener("click", function () {
            const newItem = createObjectiveItem(objectiveIndex++);
            container.appendChild(newItem);
        });

        function renumberObjectives() {
            const items = container.querySelectorAll(".basicinfo-objective-item");
            items.forEach((item, i) => {
                const input = item.querySelector("input");
                if (input) {
                    input.name = `LearningObjectives[${i}]`;
                }
            });
            objectiveIndex = items.length;
        }

        // -------------------- BUTTON ENABLE LOGIC --------------------
        const form = document.getElementById("create-course-form");
        const submitBtn = form?.querySelector(".create-course-btn-publish");
        if (!form || !submitBtn) return;

        function checkRequiredFields() {
            const requiredInputs = form.querySelectorAll("input[required], textarea[required], select[required]");
            const allValid = Array.from(requiredInputs).every(field => field.value.trim() !== "");
            submitBtn.disabled = !allValid;
        }

        form.addEventListener("input", checkRequiredFields);
        form.addEventListener("change", checkRequiredFields);
        checkRequiredFields(); // initial check

        // -------------------- DURATION VALIDATION --------------------
        const durationInput = document.getElementById("Course_DurationValue");
        if (durationInput) {
            durationInput.addEventListener("input", () => {
                // Remove non-digit characters
                durationInput.value = durationInput.value.replace(/\D/g, '');
            });
        }

    });
</script>