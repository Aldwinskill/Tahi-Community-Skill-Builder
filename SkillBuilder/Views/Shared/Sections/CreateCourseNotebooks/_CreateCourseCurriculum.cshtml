@model SkillBuilder.Models.ViewModels.CourseBuilderViewModel
@using System.Text.Json

@{
    var safeModules = Model.Modules ?? new List<SkillBuilder.Models.ViewModels.CourseModuleViewModel>();
    var emptyFinalProject = new SkillBuilder.Models.ViewModels.FinalProjectViewModel();
}

<style>
    .curriculum-container {
        margin-bottom: 2rem;
    }

    .curriculum-module {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .curriculum-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .curriculum-form-group {
        margin-bottom: 1rem;
    }

        .curriculum-form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

    .curriculum-form-control, .curriculum-form-select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
    }

    .curriculum-form-row {
        display: flex;
        gap: 2rem;
    }

    .curriculum-form-col {
        flex: 1;
    }

    .curriculum-delete-btn {
        background: none;
        border: none;
        color: #888;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .curriculum-lesson-block {
        border-top: 1px dashed #ccc;
        padding-top: 1rem;
        margin-top: 1rem;
    }

    .curriculum-add-btn {
        margin-bottom: 1rem;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        font-weight: 600;
        color: #344AEA;
        background-color: transparent;
        border: 1.5px solid #344AEA;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

        .curriculum-add-btn:hover {
            background-color: #344AEA;
            color: white;
        }

    .curriculum-add-module-wrapper {
        text-align: right;
        margin-top: 1rem;
    }

    .input-invalid {
        border: 1.5px solid red !important;
    }

    .lesson-duration-row {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .lesson-duration-value {
        width: 150px;
    }

    .lesson-duration-unit {
        flex: 1;
    }

    .curriculum-final-project {
        margin-top: 2rem;
    }

    .curriculum-lesson-header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .quiz-question-header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .quiz-option-error {
        color: red;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

</style>

<div class="curriculum-container" id="curriculum-modules"></div>
<div id="module-warning" style="color:red; margin-bottom:1rem; display:none;">
    You must add at least 2 modules.
</div>

<div class="curriculum-add-module-wrapper">
    <button type="button" class="curriculum-add-btn" onclick="addCurriculumModule()">+ Add Module</button>
</div>

<div class="curriculum-final-project curriculum-module" id="final-project-module">
    <div class="curriculum-header">
        <strong>Final Project</strong>
    </div>

    <div class="curriculum-form-group">
        <label>Title *</label>
        <input type="text" class="curriculum-form-control" name="FinalProject.Title" placeholder="Final project title" required />
    </div>

    <div class="curriculum-form-group">
        <label>Details / Context *</label>
        <textarea class="curriculum-form-control" name="FinalProject.Description" rows="4" placeholder="Describe the final project..." required></textarea>
    </div>
</div>

<script>

    const lessonFileRules = {
        image: {
            maxSize: 5 * 1024 * 1024, // 5 MB
            allowed: [".jpg", ".jpeg", ".png", ".gif", ".webp"]
        },
        video: {
            maxSize: 200 * 1024 * 1024, // 200 MB
            allowed: [".mp4", ".mov", ".avi"]
        }
    };

    function validateLessonFile(input, type) {
        const lessonFileRules = {
            image: { maxSize: 5*1024*1024, allowed: [".jpg",".jpeg",".png",".gif",".webp"] },
            video: { maxSize: 200*1024*1024, allowed: [".mp4",".mov",".avi"] }
        };

        const file = input.files[0];
        if (!file) return true;

        const errorEl = input.parentElement.parentElement.querySelector(".file-error");
        if (!errorEl) return true;

        errorEl.textContent = "";
        errorEl.style.display = "none";

        const { maxSize, allowed } = lessonFileRules[type];
        const ext = file.name.toLowerCase().substring(file.name.lastIndexOf("."));

        if (!allowed.includes(ext)) {
            errorEl.textContent = `Invalid file type. Allowed: ${allowed.join(", ")}`;
            errorEl.style.display = "block";
            input.value = "";
            return false;
        }

        if (file.size > maxSize) {
            errorEl.textContent = `File too large. Max ${(maxSize/(1024*1024)).toFixed(0)} MB allowed.`;
            errorEl.style.display = "block";
            input.value = "";
            return false;
        }

        return true;
    }

    function attachPreviewAndValidation(inputEl, type) {
        if (!inputEl) return;

        const previewEl = inputEl.parentElement.querySelector(".curriculum-upload-preview");
        inputEl.addEventListener("change", function() {
            if (!validateLessonFile(inputEl, type)) return;

            const file = inputEl.files[0];
            if (!file) return;

            if (type === "image") {
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewEl.innerHTML = "";
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.style.width = "100%";
                    img.style.height = "100%";
                    img.style.objectFit = "cover";
                    previewEl.appendChild(img);
                };
                reader.readAsDataURL(file);
            } else if (type === "video") {
                previewEl.src = URL.createObjectURL(file);
                previewEl.style.display = "block";
            }
        });
    }

    let curriculumModuleIndex = 0;
    let sessionLessonExists = false;

    // ------------------ MODULE / LESSON FUNCTIONS ------------------
    function addCurriculumModule() {
        const container = document.getElementById("curriculum-modules");
        const moduleIndex = curriculumModuleIndex++;

        const moduleDiv = document.createElement("div");
        moduleDiv.className = "curriculum-module";
        moduleDiv.setAttribute("data-index", moduleIndex);

        moduleDiv.innerHTML = `
            <div class="curriculum-header">
                <strong class="module-label">Module ${moduleIndex + 1}</strong>
                <button type="button" class="curriculum-delete-btn" onclick="removeCurriculumModule(${moduleIndex})">🗑️</button>
            </div>

            <div class="curriculum-form-row">
                <div class="curriculum-form-col curriculum-form-group">
                    <label>Module Title *</label>
                    <input type="text" class="curriculum-form-control" name="Modules[${moduleIndex}].Title" placeholder="Module title" required />
                </div>
            </div>

            <div class="curriculum-lessons" id="curriculum-lessons-${moduleIndex}"></div>
            <button type="button" class="curriculum-add-btn" onclick="addCurriculumLesson(${moduleIndex})">+ Add Lesson</button>
        `;

        container.appendChild(moduleDiv);
        renumberModules();
        checkRequiredFields();
    }

    function addCurriculumLesson(moduleIndex) {
        const lessonsContainer = document.getElementById(`curriculum-lessons-${moduleIndex}`);
        const lessonIndex = lessonsContainer.children.length;

        const lessonDiv = document.createElement("div");
        lessonDiv.className = "curriculum-lesson-block";

        lessonDiv.innerHTML = `
            <div class="curriculum-lesson-header">
                <button type="button" class="curriculum-delete-btn lesson-delete-btn" onclick="removeCurriculumLesson(${moduleIndex}, this)">🗑️</button>
            </div>

            <div class="curriculum-form-row">
                <div class="curriculum-form-col curriculum-form-group">
                    <label>Lesson Title *</label>
                    <input type="text" class="curriculum-form-control" name="Modules[${moduleIndex}].Lessons[${lessonIndex}].Title" placeholder="Lesson title" required />
                </div>
                <div class="curriculum-form-col curriculum-form-group">
                    <label>Lesson Type *</label>
                    <select class="curriculum-form-select" name="Modules[${moduleIndex}].Lessons[${lessonIndex}].LessonType"
                        onchange="handleLessonTypeChange(this, ${moduleIndex}, ${lessonIndex})" required>
                        <option value="">-- Select Type --</option>
                        <option value="Text">Text</option>
                        <option value="Image + Text">Image + Text</option>
                        <option value="Video">Video</option>
                        <option value="Quiz">Assessment</option>
                        <option value="Session">Session</option>
                    </select>
                </div>
            </div>

            <div class="curriculum-form-row">
                <div class="curriculum-form-col curriculum-form-group">
                    <label>Duration *</label>
                    <div class="lesson-duration-row">
                        <input type="number" min="1" class="curriculum-form-control lesson-duration-value"
                               name="Modules[${moduleIndex}].Lessons[${lessonIndex}].DurationValue"
                               placeholder="Enter duration" required />
                        <select class="curriculum-form-select lesson-duration-unit"
                                name="Modules[${moduleIndex}].Lessons[${lessonIndex}].DurationUnit" required>
                            <option value="minutes">Minutes</option>
                            <option value="hours">Hours</option>
                        </select>
                        <input type="hidden" class="lesson-duration-hidden" name="Modules[${moduleIndex}].Lessons[${lessonIndex}].Duration" />
                    </div>
                </div>
            </div>

            <div class="lesson-config-container"></div>
        `;

        const lessonTypeSelect = lessonDiv.querySelector(`select[name$='.LessonType']`);
        if (sessionLessonExists) {
            const sessionOption = Array.from(lessonTypeSelect.options).find(o => o.value === "Session");
            if (sessionOption) sessionOption.disabled = true;
        }

        lessonsContainer.appendChild(lessonDiv);
        renumberModules();
        checkRequiredFields();
    }

    function removeCurriculumModule(index) {
        const item = document.querySelector(`.curriculum-module[data-index='${index}']`);
        if (item) item.remove();
        renumberModules();
        checkRequiredFields();
    }

    function removeCurriculumLesson(moduleIndex, btn) {
        const lessonDiv = btn.closest(".curriculum-lesson-block");
        if (!lessonDiv) return;

        const lessonTypeSelect = lessonDiv.querySelector("select[name$='.LessonType']");
        if (lessonTypeSelect && lessonTypeSelect.value === "Session") {
            sessionLessonExists = false;

            // Re-enable Session option in all other lesson selects
            const allLessonSelects = document.querySelectorAll(".curriculum-lesson-block select[name$='.LessonType']");
            allLessonSelects.forEach(sel => {
                const sessionOption = Array.from(sel.options).find(o => o.value === "Session");
                if (sessionOption) sessionOption.disabled = false;
            });
        }

        lessonDiv.remove();
        renumberModules();
        checkRequiredFields();
    }

    // ------------------ RENUMBER MODULES / LESSONS ------------------
    function renumberModules() {
        // only regular modules, exclude the final project container
        const modules = document.querySelectorAll('.curriculum-module:not(#final-project-module)');
        modules.forEach((module, newIndex) => {
            module.setAttribute("data-index", newIndex);

            const labelEl = module.querySelector(".module-label");
            if (labelEl) labelEl.textContent = `Module ${newIndex + 1}`;

            const titleInput = module.querySelector("input[name$='.Title']");
            if (titleInput) titleInput.name = `Modules[${newIndex}].Title`;

            const lessonsContainer = module.querySelector(".curriculum-lessons");
            if (lessonsContainer) lessonsContainer.id = `curriculum-lessons-${newIndex}`;

            const addLessonBtn = module.querySelector("button[onclick^='addCurriculumLesson']");
            if (addLessonBtn) addLessonBtn.setAttribute("onclick", `addCurriculumLesson(${newIndex})`);

            const removeModuleBtn = module.querySelector("button[onclick^='removeCurriculumModule']");
            if (removeModuleBtn) removeModuleBtn.setAttribute("onclick", `removeCurriculumModule(${newIndex})`);

            const lessons = module.querySelectorAll(".curriculum-lesson-block");
            lessons.forEach((lesson, lessonIndex) => {
                const lessonTitle = lesson.querySelector("input[name$='.Title']");
                if (lessonTitle) lessonTitle.name = `Modules[${newIndex}].Lessons[${lessonIndex}].Title`;

                const type = lesson.querySelector("select[name$='.LessonType']");
                if (type) type.name = `Modules[${newIndex}].Lessons[${lessonIndex}].LessonType`;

                const duration = lesson.querySelector("input[name$='.Duration']");
                if (duration) duration.name = `Modules[${newIndex}].Lessons[${lessonIndex}].Duration`;

                const deleteBtn = lesson.querySelector(".lesson-delete-btn");
                if (deleteBtn) deleteBtn.setAttribute("onclick", `removeCurriculumLesson(${newIndex}, this)`);

                const configContainer = lesson.querySelector(".lesson-config-container");
                if (configContainer && !configContainer.innerHTML.trim()) {
                    const typeValue = type?.value ?? "";
                    configContainer.innerHTML = getLessonConfigBlock(newIndex, lessonIndex, typeValue);
                }
            });
        });

        // curriculumModuleIndex should only count real modules (exclude final project)
        curriculumModuleIndex = document.querySelectorAll('.curriculum-module:not(#final-project-module)').length;
    }

    // ------------------ LESSON CONFIG ------------------
    function handleLessonTypeChange(selectEl, moduleIndex, lessonIndex) {
        const lessonBlock = selectEl.closest(".curriculum-lesson-block");
        const configContainer = lessonBlock.querySelector(".lesson-config-container");
        configContainer.innerHTML = getLessonConfigBlock(moduleIndex, lessonIndex, selectEl.value);

        // -------------------- FILE PREVIEW --------------------
        if (selectEl.value === "Image + Text") {
            const imgInput = configContainer.querySelector(`input[type='file'][name$='.ImageFile']`);
            attachPreviewAndValidation(imgInput, "image");
        } else if (selectEl.value === "Video") {
            const videoInput = configContainer.querySelector(`input[type='file'][name$='.VideoFile']`);
            attachPreviewAndValidation(videoInput, "video");
        }

        // -------------------- SESSION LESSON LOGIC --------------------
        const allLessonSelects = document.querySelectorAll(".curriculum-lesson-block select[name$='.LessonType']");

        if (selectEl.value === "Session") {
            sessionLessonExists = true;
        } else {
            const prevValue = selectEl.getAttribute("data-prev") || "";
            if (prevValue === "Session") {
                sessionLessonExists = false;

                // Re-enable Session in all other lesson selects
                const allLessonSelects = document.querySelectorAll(".curriculum-lesson-block select[name$='.LessonType']");
                allLessonSelects.forEach(sel => {
                    const sessionOption = Array.from(sel.options).find(o => o.value === "Session");
                    if (sessionOption) sessionOption.disabled = false;
                });
            }
        }

        // Update options visibility
        allLessonSelects.forEach(sel => {
            if (sel === selectEl) return; // skip current select

            const sessionOption = Array.from(sel.options).find(o => o.value === "Session");
            if (sessionOption) sessionOption.disabled = sessionLessonExists;
        });

        // Store current value for next change
        selectEl.setAttribute("data-prev", selectEl.value);
    }

    function getLessonConfigBlock(moduleIndex, lessonIndex, type) {
        const nameBase = `Modules[${moduleIndex}].Lessons[${lessonIndex}]`;
        switch (type) {
            case "Text":
                return `<div class="curriculum-form-group">
                            <label>Lesson Content</label>
                            <textarea class="curriculum-form-control" name="${nameBase}.ContentText" rows="4" required></textarea>
                        </div>`;
            case "Image + Text":
                return `<div class="curriculum-form-group">
                            <label>Lesson Content</label>
                            <textarea class="curriculum-form-control" name="${nameBase}.ContentText" rows="4" required></textarea>
                        </div>
                        <div class="curriculum-form-group">
                            <label>Upload Image</label>
                            <div style="display:flex; gap:1rem; align-items:center;">
                                <input type="file" name="${nameBase}.ImageFile" accept="image/*" class="curriculum-form-control" required />
                                <div class="curriculum-upload-preview" style="width:80px; height:80px; background:#eee; display:flex; align-items:center; justify-content:center; font-size:1.5rem; color:#aaa;">🖼️</div>
                            </div>
                            <span class="file-error" style="color:red; font-size:0.85rem; display:none;"></span>
                        </div>`;
            case "Video":
                return `<div class="curriculum-form-group">
                            <label>Upload Video</label>
                            <div style="display:flex; gap:1rem; align-items:center;">
                                <input type="file" name="${nameBase}.VideoFile" accept="video/*" class="curriculum-form-control" required />
                                <video class="curriculum-upload-preview" width="100" height="80" controls style="display:none;"></video>
                            </div>
                            <span class="file-error" style="color:red; font-size:0.85rem; display:none;"></span>
                        </div>`;
            case "Quiz":
                return `<div class="quiz-builder" data-namebase="${nameBase}">
                            <div class="quiz-questions"></div>
                            <button type="button" class="curriculum-add-btn" onclick="addQuizQuestion(this)">+ Add Question</button>
                        </div>`;
            case "Session":
                return `<div class="curriculum-form-group">
                            <label>This will be a live session learners can request.</label>
                        </div>`;
            default:
                return ``;
        }
    }

    function removeQuizQuestion(btn) {
        const questionBlock = btn.closest(".quiz-question");
        const container = questionBlock.parentElement;
        if (questionBlock) questionBlock.remove();
        renumberQuizQuestions(container);
    }

    function renumberQuizQuestions(container) {
        const questions = container.querySelectorAll(".quiz-question");
        questions.forEach((q, i) => {
            // Update the label
            const label = q.querySelector("label");
            if (label) label.textContent = `Question ${i + 1} *`;

            // Update input names for question text
            const questionInput = q.querySelector("input[name$='QuestionText']");
            if (questionInput) {
                const nameBase = container.closest(".quiz-builder").getAttribute("data-namebase");
                questionInput.name = `${nameBase}.QuizQuestions[${i}].QuestionText`;
            }

            // Update option input names and radio buttons
            ["A","B","C","D"].forEach(letter => {
                const optInput = q.querySelector(`input[name$='Option${letter}']`);
                if (optInput) {
                    const nameBase = container.closest(".quiz-builder").getAttribute("data-namebase");
                    optInput.name = `${nameBase}.QuizQuestions[${i}].Option${letter}`;
                }

                const radio = q.querySelector(`input.correct-answer-radio[value='Option${letter}']`);
                if (radio) {
                    radio.name = `${container.closest(".quiz-builder").getAttribute("data-namebase")}.QuizQuestions[${i}].CorrectAnswer`;
                }
            });
        });
    }

    function addQuizQuestion(button) {
        const container = button.closest(".quiz-builder").querySelector(".quiz-questions");
        const nameBase = button.closest(".quiz-builder").getAttribute("data-namebase");
        const index = container.children.length;

        const questionBlock = document.createElement("div");
        questionBlock.className = "quiz-question";
        questionBlock.style.marginTop = "1rem";

        questionBlock.innerHTML = `
            <div class="quiz-question-header">
                <button type="button" class="curriculum-delete-btn" onclick="removeQuizQuestion(this)">🗑️</button>
            </div>

            <div class="curriculum-form-group">
                <label>Question ${index + 1} *</label>
                <input type="text" name="${nameBase}.QuizQuestions[${index}].QuestionText" class="curriculum-form-control" required />
            </div>
            <div class="curriculum-form-group">
                <label>Options *</label>
                <div class="curriculum-form-row">
                    ${["A","B","C","D"].map(letter => `
                        <div style="flex:1; display:flex; flex-direction: column;">
                            <input type="text" name="${nameBase}.QuizQuestions[${index}].Option${letter}" class="curriculum-form-control quiz-option-input" placeholder="Option ${letter}" oninput="updateRadioValue(this)" required />
                            <label>
                                <input type="radio" name="${nameBase}.QuizQuestions[${index}].CorrectAnswer" class="correct-answer-radio" value="Option${letter}" required /> Correct
                            </label>
                        </div>
                    `).join("")}
                </div>
                <span class="quiz-option-error" style="display:none;">Duplicate options are not allowed!</span>
            </div>
        `;

        container.appendChild(questionBlock);
        renumberQuizQuestions(container);
    }

    function updateRadioValue(textInput) {
        // Update the correct answer radio value
        const container = textInput.closest("div");
        const radio = container.querySelector("input.correct-answer-radio");
        if (radio) radio.value = textInput.value;

        // Check duplicates immediately
        const quizQuestion = textInput.closest(".quiz-question");
        if (quizQuestion) checkDuplicateOptions(quizQuestion);
    }

    function checkDuplicateOptions(quizQuestion) {
        const optionInputs = quizQuestion.querySelectorAll(".quiz-option-input");
        const values = Array.from(optionInputs)
                            .map(input => input.value.trim())
                            .filter(v => v !== ""); // ignore blanks

        // Check for duplicates
        const duplicatesExist = values.some((item, index) => values.indexOf(item) !== index);

        // Find the single error span for this question
        const errorSpan = quizQuestion.querySelector(".quiz-option-error");
        if (errorSpan) {
            errorSpan.style.display = duplicatesExist ? "block" : "none";
        }

        return duplicatesExist;
    }

    document.addEventListener("input", (e) => {
        if (e.target.classList.contains("lesson-duration-value")) {
            e.target.value = e.target.value.replace(/\D/g, '');
        }
    });

    // ------------------ PRELOAD FINAL PROJECT AND MODULES ------------------
    document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("create-course-form");

        // --- Preload Final Project ---
        const finalProjectData = @Html.Raw(JsonSerializer.Serialize(Model.FinalProject ?? emptyFinalProject));
        const fpTitleInput = document.querySelector("input[name='FinalProject.Title']");
        const fpDescTextarea = document.querySelector("textarea[name='FinalProject.Description']");
        if (fpTitleInput) fpTitleInput.value = finalProjectData?.Title ?? "";
        if (fpDescTextarea) fpDescTextarea.value = finalProjectData?.Description ?? "";

        // --- Preload Modules ---
        const preloadModules = @Html.Raw(JsonSerializer.Serialize(Model.Modules ?? new List<SkillBuilder.Models.ViewModels.CourseModuleViewModel>()));
        preloadModules.forEach((module, i) => {
            addCurriculumModule();
            const moduleDiv = document.querySelector(`.curriculum-module[data-index='${i}']`);
            if (!moduleDiv) return;

            moduleDiv.querySelector(`input[name='Modules[${i}].Title']`).value = module.title ?? "";

            if (Array.isArray(module.lessons)) {
                module.lessons.forEach((lesson, j) => {
                    addCurriculumLesson(i);
                    const lessonBlock = moduleDiv.querySelectorAll(".curriculum-lesson-block")[j];
                    if (!lessonBlock) return;

                    lessonBlock.querySelector(`input[name='Modules[${i}].Lessons[${j}].Title']`).value = lesson.title ?? "";
                    lessonBlock.querySelector(`select[name='Modules[${i}].Lessons[${j}].LessonType']`).value = lesson.type ?? "";
                    lessonBlock.querySelector(`input[name='Modules[${i}].Lessons[${j}].Duration']`).value = lesson.duration ?? "";

                    handleLessonTypeChange(lessonBlock.querySelector("select"), i, j);

                    const type = lesson.type ?? "";
                    if (type === "Text" || type === "Image + Text") {
                        const contentEl = lessonBlock.querySelector(`[name='Modules[${i}].Lessons[${j}].ContentText']`);
                        if (contentEl) contentEl.value = lesson.contentText ?? "";
                    }

                    if (type === "Quiz" && Array.isArray(lesson.quizQuestions)) {
                        const builder = lessonBlock.querySelector(".quiz-builder");
                        lesson.quizQuestions.forEach((q, qIndex) => {
                            addQuizQuestion(builder.querySelector("button"));
                            const questionBlock = builder.querySelectorAll(".quiz-question")[qIndex];
                            if (!questionBlock) return;

                            questionBlock.querySelector(`input[name$='QuizQuestions[${qIndex}].QuestionText']`).value = q.questionText ?? "";
                            ["A","B","C","D"].forEach(letter => {
                                const optInput = questionBlock.querySelector(`input[name$='Option${letter}']`);
                                if (optInput) optInput.value = q[`option${letter}`] ?? "";

                                const radio = questionBlock.querySelector(`input[value='Option${letter}']`);
                                if (radio && q.correctAnswer === `Option${letter}`) radio.checked = true;
                            });
                        });
                    }
                });
            }
        });

        checkRequiredFields();

        // --- Update hidden durations on submit ---
        if (form) {
            form.addEventListener("submit", () => {
                document.querySelectorAll(".curriculum-lesson-block").forEach(lesson => {
                    const val = lesson.querySelector(".lesson-duration-value");
                    const unit = lesson.querySelector(".lesson-duration-unit");
                    const hidden = lesson.querySelector(".lesson-duration-hidden");
                    if (val && unit && hidden) hidden.value = `${val.value} ${unit.value}`;
                });
            });
        }
    });
</script>