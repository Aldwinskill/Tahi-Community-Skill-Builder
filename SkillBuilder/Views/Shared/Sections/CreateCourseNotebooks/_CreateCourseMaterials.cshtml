@model SkillBuilder.Models.ViewModels.CourseBuilderViewModel

<style>
    .material-add-btn-wrapper {
        text-align: right;
        margin-top: 1.5rem;
    }

    .material-add-btn {
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
        font-weight: 600;
        color: #344AEA;
        background-color: transparent;
        border: 1.5px solid #344AEA;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

        .material-add-btn:hover {
            background-color: #344AEA;
            color: white;
        }

    .material-entry {
        border: 1px solid #ccc;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border-radius: 8px;
    }

    .material-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .material-title {
        font-size: 1.1rem;
    }

    .material-size {
        font-size: 0.9rem;
        color: #666;
    }

    .material-delete {
        background: none;
        border: none;
        color: #888;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .material-fields {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-bottom: 1rem;
    }

    .material-form-group {
        flex: 1;
    }

        .material-form-group label {
            display: block;
            margin-bottom: 0.3rem;
            font-size: 0.9rem;
            font-weight: 600;
            color: #333;
        }

        .material-form-group input {
            width: 100%;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            border: 1px solid #aaa;
            border-radius: 6px;
        }

    .material-upload-wrapper {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

        .material-upload-wrapper input[type="file"] {
            flex: 1;
        }

        .material-upload-wrapper button {
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
            background-color: #E0EDFF;
            color: #1957D2;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
        }

    .material-description {
        margin-top: 1rem;
    }
</style>

<div class="material-section">
    <div id="material-list">
        @if (Model?.Materials != null && Model.Materials.Any())
        {
            for (int i = 0; i < Model.Materials.Count; i++)
            {
                var item = Model.Materials[i];
                <div class="material-entry" data-index="@i">
                    <div class="material-header">
                        <span class="material-title">Material @(i + 1)</span>
                        <span class="material-size">
                            @(item.FileSize > 0 ? $"{item.FileSize / 1024.0:F1} KB" : "")
                        </span>
                        <span class="material-delete" onclick="removeMaterial(@i)">🗑️</span>
                    </div>

                    <div class="material-fields">
                        <div class="material-form-group">
                            <label>Material Title</label>
                            <input type="text" name="Materials[@i].Title" placeholder="Sample course material.pdf" value="@item.Title" />
                        </div>
                        <div class="material-form-group">
                            <label>Replace File</label>
                            <div class="material-upload-wrapper">
                                <input type="file"
                                       name="Materials[${materialIndex}].UploadFile"
                                       accept=".doc,.docx,.doc,.pdf"
                                       onchange="validateMaterialFile(this)" />
                                <button type="button">Upload</button>
                            </div>
                        </div>
                    </div>

                    <div class="material-form-group material-description">
                        <label>Description</label>
                        <input type="text" name="Materials[@i].Description" placeholder="Add a description..." value="@item.Description" />
                    </div>
                </div>
            }
        }
    </div>

    <div class="material-add-btn-wrapper">
        <button type="button" class="material-add-btn" onclick="addMaterial()">+ Add Material</button>
    </div>
</div>

<script>
    let materialIndex = @Model?.Materials?.Count ?? 0;

    const maxFileSize = 20 * 1024 * 1024; // 20 MB

    function addMaterial() {
        const list = document.getElementById("material-list");

        const container = document.createElement("div");
        container.className = "material-entry";
        container.setAttribute("data-index", materialIndex);

        container.innerHTML = `
            <div class="material-header">
                <span class="material-title">Material ${materialIndex + 1}</span>
                <span class="material-size"></span>
                <span class="material-delete" onclick="removeMaterial(${materialIndex})">🗑️</span>
            </div>

            <div class="material-fields">
                <div class="material-form-group">
                    <label>Material Title</label>
                    <input type="text" name="Materials[${materialIndex}].Title" placeholder="Sample course material.pdf" />
                </div>
                <div class="material-form-group">
                    <label>Upload File</label>
                    <div class="material-upload-wrapper">
                        <input type="file" name="Materials[${materialIndex}].UploadFile"
                               accept=".doc,.docx,.doc,.pdf" onchange="validateMaterialFile(this)" />
                        <button type="button">Upload</button>
                    </div>
                    <span class="file-error" style="color:red; font-size:0.85rem; display:none;"></span>
                </div>
            </div>

            <div class="material-form-group material-description">
                <label>Description</label>
                <input type="text" name="Materials[${materialIndex}].Description" placeholder="Add a description..." />
            </div>
        `;

        list.appendChild(container);
        materialIndex++;
        renumberMaterials();
    }

    function validateMaterialFile(input) {
        const file = input.files[0];
        const errorEl = input.parentElement.parentElement.querySelector(".file-error");

        if (!file) {
            errorEl.style.display = "none";
            return true;
        }

        const ext = file.name.substring(file.name.lastIndexOf(".")).toLowerCase();

        if (file.size > maxFileSize) {
            errorEl.textContent = `File too large. Max ${(maxFileSize / (1024*1024)).toFixed(0)} MB allowed.`;
            errorEl.style.display = "block";
            input.value = "";
            return false;
        }

        errorEl.style.display = "none";
        return true;
    }

    function removeMaterial(index) {
        const item = document.querySelector(`.material-entry[data-index='${index}']`);
        if (item) item.remove();
        renumberMaterials();
    }

    function renumberMaterials() {
        const materials = document.querySelectorAll('.material-entry');
        materials.forEach((entry, i) => {
            entry.setAttribute("data-index", i);
            const titleSpan = entry.querySelector(".material-title");
            if (titleSpan) titleSpan.textContent = `Material ${i + 1}`;

            const titleInput = entry.querySelector("input[name*='Title']");
            const fileInput = entry.querySelector("input[type='file']");
            const descInput = entry.querySelector("input[name*='Description']");
            const deleteBtn = entry.querySelector(".material-delete");

            if (titleInput) titleInput.name = `Materials[${i}].Title`;
            if (fileInput) fileInput.name = `Materials[${i}].UploadFile`;
            if (descInput) descInput.name = `Materials[${i}].Description`;
            if (deleteBtn) deleteBtn.setAttribute("onclick", `removeMaterial(${i})`);
        });

        materialIndex = materials.length;
    }
</script>