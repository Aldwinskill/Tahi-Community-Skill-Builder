@using SkillBuilder.Models.ViewModels
@model AdminProfileViewModel

@{
    var existingCourses = Model.AllSubmittedCourses?.Where(c => !c.IsArchived).ToList() ?? new List<Course>();
    var deletedCourses = Model.AllSubmittedCourses?.Where(c => c.IsArchived).ToList() ?? new List<Course>();
}

<style>
    /* =======================
               Layout / Sections
           ======================== */
    .course-mgmt-section {
        padding: 2rem;
    }

    .course-mgmt-header {
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        color: #344AEA;
        letter-spacing: 0.5px;
    }

    .course-mgmt-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    /* =======================
               Search Bar
           ======================== */
    .course-mgmt-search-bar {
        display: flex;
        width: 100%;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        background: #fff;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

        .course-mgmt-search-bar input {
            flex: 1;
            padding: 0.6rem 1rem;
            border: none;
            outline: none;
            font-size: 1rem;
        }

        .course-mgmt-search-bar button {
            background-color: #344AEA;
            border: none;
            padding: 0.6rem 1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease;
        }

            .course-mgmt-search-bar button:hover {
                background-color: #2a3bcf;
            }

            .course-mgmt-search-bar button img {
                width: 1.2rem;
                height: 1.2rem;
            }

    /* =======================
               Table
           ======================== */
    .course-mgmt-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 1.2rem;
    }

        .course-mgmt-table th {
            text-align: left;
            font-size: 1rem;
            color: #666;
            padding: 0.5rem 1rem;
        }

            .course-mgmt-table th:nth-child(2) {
                text-align: center;
            }

            .course-mgmt-table th:nth-child(3) {
                text-align: right;
            }

    /* Row hover effect */
    .course-mgmt-row {
        background: #fafafa;
        border-radius: 10px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
        transition: background-color 0.25s ease, box-shadow 0.25s ease;
    }

        .course-mgmt-row:hover {
            background-color: #f0f0f0;
            transform: scale(1.01);
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
            transition: background-color 0.25s ease, transform 0.2s ease, box-shadow 0.25s ease;
        }

    /* Cells */
    .course-mgmt-cell {
        padding: 1rem;
        vertical-align: middle;
    }

        .course-mgmt-cell.course-author {
            text-align: center;
            display: table-cell;
            vertical-align: middle;
            font-weight: 600;
        }

        .course-mgmt-cell.course-actions {
            text-align: right;
        }

    .course-mgmt-name {
        font-weight: bold;
        font-size: 1rem;
        color: #333;
    }

        .course-mgmt-name a {
            text-decoration: none;
            color: #7D3C98;
            transition: color 0.2s ease;
        }

    .course-mgmt-author {
        font-size: 0.95rem;
        color: #222;
        text-align: center;
        font-weight: 500;
    }

    /* Actions alignment */
    .course-mgmt-action-buttons {
        display: flex;
        justify-content: flex-end;
    }

    .course-mgmt-action-btn {
        background-color: #FEE4E2;
        color: #B42318;
        padding: 0.8rem 0.8rem;
        border: solid #B42318 1px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: bold;
    }
        .course-mgmt-delete-btn:hover {
            background-color: #e74c3c;
            color: white;
        }

    /* Backdrop */
    .course-mgmt-modal-backdrop {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.55);
        z-index: 2000;
        opacity: 0;
        transition: opacity 0.25s ease;
    }

        .course-mgmt-modal-backdrop.active {
            display: block;
            opacity: 1;
        }

    /* Modal */
    .course-mgmt-modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.95);
        background: #ffffff;
        padding: 1.8rem;
        border-radius: 12px;
        box-shadow: 0 6px 18px rgba(0,0,0,0.25);
        z-index: 2001;
        max-width: 420px;
        width: 90%;
        text-align: center;
        opacity: 0;
        transition: all 0.25s ease;
    }

        .course-mgmt-modal.active {
            display: block;
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
        }

        .course-mgmt-modal h3 {
            margin-bottom: 1rem;
            font-size: 1.4rem;
            font-weight: 700;
            color: #2c3e50;
        }

        .course-mgmt-modal p {
            margin-bottom: 1.6rem;
            font-size: 1rem;
            color: #555;
        }

    .course-mgmt-modal-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

        .course-mgmt-modal-buttons button {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            font-size: 0.95rem;
            transition: background-color 0.2s ease, transform 0.15s ease;
        }

            .course-mgmt-modal-buttons button:hover {
                transform: scale(1.05);
            }

    .course-mgmt-modal-confirm {
        background-color: #e74c3c;
        color: #fff;
    }

        .course-mgmt-modal-confirm:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            opacity: 0.6; 
            transform: none !important;
        }

        .course-mgmt-modal-confirm:not(:disabled):hover {
            transform: scale(1.05);
            background-color: #c0392b;
        }

    .course-mgmt-modal-cancel {
        background-color: #bdc3c7;
        color: #2c3e50;
    }

        .course-mgmt-modal-cancel:hover {
            background-color: #a0a7ad;
        }

    /* Tabs */ .course-mgmt-tabs {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .course-mgmt-tab {
        padding: 0.75rem 1.5rem;
        background-color: transparent;
        border: none;
        border-bottom: 3px solid transparent;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
        color: #555;
    }

        .course-mgmt-tab.active {
            border-bottom-color: #344AEA; /* blue underline */
            color: #344AEA;
        }

        .course-mgmt-tab:hover {
            color: #344AEA;
        }
</style>

<div class="course-mgmt-section">
    <div class="course-mgmt-header">All Course Submissions</div>

    <div class="course-mgmt-controls">
        <div class="course-mgmt-search-bar">
            <input type="text" placeholder="Search by course name or creator..." />
            <button type="button">
                <img src="/assets/Icons/Search.ico" alt="Search" />
            </button>
        </div>
    </div>

    <!-- Tabs -->
    <div class="course-mgmt-tabs" style="display:flex; gap:1rem; margin-bottom:1.5rem;">
        <button class="course-mgmt-tab active" data-tab="existing">Existing</button>
        <button class="course-mgmt-tab" data-tab="deleted">Deleted</button>
    </div>

    <table class="course-mgmt-table">
            <colgroup>
                <col style="width: 33%;">
                <col style="width: 33%; text-align:center;">
                <col style="width: 33%; text-align:right;">
            </colgroup>
        <thead>
            <tr>
                <th>Course Name</th>
                <th style="text-align: center;">Created By</th>
                <th style="text-align: right;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.AllSubmittedCourses != null && Model.AllSubmittedCourses.Any())
            {
                @* Existing courses *@
                @if (existingCourses.Any())
                {
                    foreach (var course in existingCourses)
                    {
                        <tr class="course-mgmt-row" data-tab="existing">
                            <td class="course-mgmt-cell course-mgmt-name">
                                <a href="@Url.Action("CourseCatalog", "Courses", new { selectedCourse = course.Link })">
                                    @course.Title
                                </a>
                            </td>
                            <td class="course-mgmt-cell course-author">
                                @course.Artisan?.User?.FirstName @course.Artisan?.User?.LastName
                            </td>
                            <td class="course-mgmt-cell course-actions">
                                <div class="course-mgmt-action-buttons">
                                    <form asp-action="DeleteCourse"
                                          asp-route-id="@course.Id"
                                          asp-route-adminId="@Model.Admin.UserId"
                                          method="post"
                                          onsubmit="return courseMgmtOpenDeleteModal(this, '@course.Title');">
                                        <button type="submit" class="course-mgmt-action-btn course-mgmt-delete-btn">
                                            Delete
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="course-mgmt-row" data-tab="existing">
                        <td colspan="3" class="course-mgmt-cell" style="text-align:center; font-style:italic; color:#888;">
                            No existing courses yet.
                        </td>
                    </tr>
                }

                @* Deleted courses *@
                @if (deletedCourses.Any())
                {
                    foreach (var course in deletedCourses)
                    {
                        <tr class="course-mgmt-row" data-tab="deleted" style="display:none; opacity:0.6;">
                            <td class="course-mgmt-cell course-mgmt-name">
                                <a href="@Url.Action("CourseCatalog", "Courses", new { selectedCourse = course.Link })">
                                    @course.Title
                                </a>
                            </td>
                            <td class="course-mgmt-cell course-author">
                                @course.Artisan?.User?.FirstName @course.Artisan?.User?.LastName
                            </td>
                            <td class="course-mgmt-cell course-actions">
                                <div class="course-mgmt-action-buttons" style="opacity:0.6;">
                                    Deleted
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr class="course-mgmt-row" data-tab="deleted" style="display:none;">
                        <td colspan="3" class="course-mgmt-cell" style="text-align:center; font-style:italic; color:#888;">
                            No deleted courses yet.
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<!-- Backdrop -->
<div class="course-mgmt-modal-backdrop" id="courseMgmtModalBackdrop"></div>

<!-- Delete confirmation modal -->
<div class="course-mgmt-modal" id="courseMgmtDeleteModal">
    <h3>Confirm Deletion</h3>
    <p id="courseMgmtDeleteMessage"></p>
    <textarea id="courseMgmtDeleteReason" placeholder="Enter reason for deletion (optional)"
              style="width:100%; min-height:80px; margin-bottom:1rem; padding:0.5rem; border-radius:6px; border:1px solid #ccc; resize: none;"></textarea>
    <div class="course-mgmt-modal-buttons">
        <button class="course-mgmt-modal-cancel" onclick="courseMgmtCloseModal()">Cancel</button>
        <button class="course-mgmt-modal-confirm" id="courseMgmtConfirmDelete" disabled>Delete</button>
    </div>
</div>

<script>
    const courseTabs = document.querySelectorAll(".course-mgmt-tab");
    const courseRows = document.querySelectorAll(".course-mgmt-row");

    const courseSearchInput = document.querySelector(".course-mgmt-search-bar input");
    const courseSearchButton = document.querySelector(".course-mgmt-search-bar button");

    // Add a "No courses found" row
    const tbody = courseRows[0]?.parentElement;
    let noCoursesRow = document.getElementById("noCoursesMessage");
    if (!noCoursesRow) {
        noCoursesRow = document.createElement("tr");
        noCoursesRow.id = "noCoursesMessage";
        noCoursesRow.style.display = "none";
        noCoursesRow.innerHTML = `<td colspan="3" class="course-mgmt-cell" style="text-align:center; font-style:italic; color:#888;">
            No courses found.
        </td>`;
        tbody.appendChild(noCoursesRow);
    }

    function filterCourses() {
        const filter = courseSearchInput.value.toLowerCase().trim();
        const activeTab = document.querySelector(".course-mgmt-tab.active").dataset.tab;

        let anyVisible = false;

        courseRows.forEach(row => {
            if (row.dataset.tab !== activeTab) {
                row.style.display = "none";
                return;
            }

            // Skip placeholder rows like "No existing courses yet"
            const isEmptyRow = row.querySelector(".course-mgmt-cell")?.innerText.includes("No");
            if (isEmptyRow) {
                row.style.display = !filter ? "table-row" : "none";
                return;
            }

            const title = row.querySelector(".course-mgmt-name")?.innerText.toLowerCase() || "";
            const author = row.querySelector(".course-author")?.innerText.toLowerCase() || "";
            if (!filter || title.includes(filter) || author.includes(filter)) {
                row.style.display = "table-row";
                anyVisible = true;
            } else {
                row.style.display = "none";
            }
        });

        noCoursesRow.style.display = filter && !anyVisible ? "table-row" : "none";
    }

    // Trigger search on Enter
    courseSearchInput.addEventListener("keydown", e => {
        if (e.key === "Enter") {
            e.preventDefault();
            filterCourses();
        }
    });

    // Trigger search on button click
    courseSearchButton.addEventListener("click", filterCourses);

    // Tab switching
    courseTabs.forEach(tab => {
        tab.addEventListener("click", () => {
            // Highlight active tab
            courseTabs.forEach(t => t.classList.remove("active"));
            tab.classList.add("active");

            const selectedTab = tab.dataset.tab;

            // Show/hide rows
            courseRows.forEach(row => {
                row.style.display = (row.dataset.tab === selectedTab) ? "table-row" : "none";
            });

            filterCourses(); // Apply search after switching tab
        });
    });

    const courseReasonInput = document.getElementById("courseMgmtDeleteReason");
    const courseConfirmBtn = document.getElementById("courseMgmtConfirmDelete");

    courseReasonInput.addEventListener("input", () => {
        courseConfirmBtn.disabled = courseReasonInput.value.trim() === "";
    });

    let courseMgmtCurrentForm = null;

    function courseMgmtOpenDeleteModal(form, courseTitle) {
        courseMgmtCurrentForm = form;
        document.getElementById("courseMgmtDeleteMessage").innerText =
            `Are you sure you want to delete the course "${courseTitle}"?`;

        courseReasonInput.value = "";         // clear previous reason
        courseConfirmBtn.disabled = true;     // disable confirm button

        document.getElementById("courseMgmtModalBackdrop").classList.add("active");
        document.getElementById("courseMgmtDeleteModal").classList.add("active");
        return false;
    }

    function courseMgmtConfirmDeleteAction() {
        if (!courseMgmtCurrentForm) return;

        // Add reason to the form
        let reasonInput = courseMgmtCurrentForm.querySelector("input[name='reason']");
        if (!reasonInput) {
            reasonInput = document.createElement("input");
            reasonInput.type = "hidden";
            reasonInput.name = "reason";
            courseMgmtCurrentForm.appendChild(reasonInput);
        }
        reasonInput.value = document.getElementById("courseMgmtDeleteReason").value;

        courseMgmtCurrentForm.submit();
    }

    function courseMgmtCloseModal() {
        document.getElementById("courseMgmtModalBackdrop").classList.remove("active");
        document.getElementById("courseMgmtDeleteModal").classList.remove("active");
        courseMgmtCurrentForm = null;
    }

    // Backdrop click
    document.getElementById("courseMgmtModalBackdrop").addEventListener("click", courseMgmtCloseModal);

    // ESC key closes modal
    document.addEventListener("keydown", function (e) {
        if (e.key === "Escape") {
            courseMgmtCloseModal();
        }
    });

    // Confirm delete
    document.getElementById("courseMgmtConfirmDelete").addEventListener("click", courseMgmtConfirmDeleteAction);
</script>