@model List<SkillBuilder.Models.SupportSessionRequest>

<style>
    .artisan-support-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .artisan-support-card {
        background: #fff;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .artisan-support-user {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .artisan-support-user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
    }

    .artisan-support-user-info {
        display: flex;
        flex-direction: column;
    }

    .artisan-support-user-name {
        font-weight: bold;
    }

    .artisan-support-user-course {
        font-size: 0.85rem;
        color: #666;
    }

    .artisan-support-title {
        font-size: 1rem;
        font-weight: 600;
        margin-top: 0.75rem;
    }

    .artisan-support-message {
        font-size: 0.9rem;
        margin: 0.5rem 0;
        color: #444;
    }

    .artisan-support-schedule {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #555;
        border-top: 1px solid #eee;
        margin-top: 0.75rem;
        padding-top: 0.5rem;
    }

    .artisan-support-actions {
        margin-top: 0.75rem;
        display: flex;
        gap: 0.5rem;
    }

    .artisan-btn-confirm {
        background: #28a745;
        color: #fff;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .artisan-btn-decline {
        background: #dc3545;
        color: #fff;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1001;
    }

    /* Modal content */
    .modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 360px;
        max-width: 90%;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        display: flex;
        flex-direction: column;
        gap: 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .modal-content h3 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            color: #111;
        }

        .modal-content p {
            margin: 0;
            font-size: 0.95rem;
            color: #555;
        }

        /* Form controls */
        .modal-content label {
            font-size: 0.85rem;
            color: #333;
            margin-bottom: 0.25rem;
        }

        .modal-content select,
        .modal-content input[type="text"] {
            width: 100%;
            padding: 0.6rem 0.75rem;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 0.95rem;
            outline: none;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

            .modal-content select:focus,
            .modal-content input[type="text"]:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
            }

    /* Buttons */
    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        margin-top: 1rem;
    }

        .modal-actions .btn-cancel {
            background: #f3f3f3;
            color: #555;
            border: none;
            padding: 0.55rem 1.2rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.95rem;
            transition: background 0.2s;
        }

            .modal-actions .btn-cancel:hover {
                background: #e5e5e5;
            }

        .modal-actions .btn-confirm {
            background: #3b82f6;
            color: #fff;
            border: none;
            padding: 0.55rem 1.2rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.95rem;
            transition: background 0.2s;
        }

            .modal-actions .btn-confirm:hover {
                background: #2563eb;
            }

    #declineReason {
        resize: none;
    }

    #declineConfirmBtn:disabled {
        background-color: #ccc !important;
        color: #666 !important;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: none; /* hidden by default */
    }
</style>

<div id="pendingSupportContainer">
    @if (!Model.Any())
    {
        <div class="artisan-support-empty">
            No support session requests at the moment.<br />
            When learners request assistance, they’ll appear here.
        </div>
    }
    else
    {
        <div class="artisan-support-list">
            @foreach (var request in Model)
            {
                <div class="artisan-support-card" id="support-@request.Id">
                    <div class="artisan-support-user">
                        <img src="@request.User.UserAvatar" class="artisan-support-user-avatar" />
                        <div class="artisan-support-user-info">
                            <div class="artisan-support-user-name">@request.User.FirstName @request.User.LastName</div>
                            <div class="artisan-support-user-course">@request.Course.Title</div>
                        </div>
                    </div>

                    <div class="artisan-support-title">@request.Title</div>
                    <div class="artisan-support-message">@request.Message</div>

                    <div class="artisan-support-schedule">
                        <span><i class="fas fa-calendar-alt"></i> @request.SessionDate.ToString("MMMM d, yyyy")</span>
                        <span><i class="fas fa-clock"></i> @request.SessionTime.ToString(@"hh\:mm")</span>
                    </div>

                    <div class="artisan-support-actions">
                        <button class="artisan-btn-confirm" onclick="openConfirmModal(@request.Id)">
                            <i class="fas fa-check"></i> Confirm
                        </button>
                        <button class="artisan-btn-decline" onclick="declineSession(@request.Id)">
                            <i class="fas fa-times"></i> Decline
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal for Confirm -->
<div id="sessionLinkModal" class="modal" style="display:none;">
    <div class="modal-content">
        <h3>Add Meeting Details</h3>
        <p>Paste the meeting link for this session:</p>
        <input type="text" id="meetingLink" class="curriculum-form-control" placeholder="https://..." />
        <span id="meetingLinkError" class="error-message" style="display:none; color:red; font-size:0.85rem; margin-top:0.25rem;"></span>
        <input type="hidden" id="confirmSessionId" />

        <div class="modal-actions">
            <button id="modalCancelBtn" class="btn-cancel">Cancel</button>
            <button onclick="submitSessionLink()" class="btn-confirm">Confirm Session</button>
        </div>
    </div>
</div>

<!-- Modal for Decline -->
<div id="declineSessionModal" class="modal" style="display:none;">
    <div class="modal-content">
        <h3>Decline Session</h3>
        <p>Please provide a reason for declining this session:</p>
        <textarea id="declineReason" rows="4" placeholder="Type reason here..." style="width:100%; padding:0.6rem 0.75rem; border:1px solid #ccc; border-radius:8px; resize:none;"></textarea>
        <input type="hidden" id="declineSessionId" />

        <div class="modal-actions">
            <button id="declineCancelBtn" class="btn-cancel">Cancel</button>
            <button id="declineConfirmBtn" class="btn-confirm" disabled>Decline Session</button>
        </div>
    </div>
</div>

<script>
    let currentSessionId = null;
    let isModalOpen = false;
    let currentDeclineId = null;
    let isDeclineModalOpen = false;

    // ===== OPEN DECLINE MODAL =====
    function openDeclineModal(id) {
        currentDeclineId = id;
        const reasonInput = document.getElementById('declineReason');
        reasonInput.value = '';
        document.getElementById('declineConfirmBtn').disabled = true;
        document.getElementById('declineSessionId').value = id;
        document.getElementById('declineSessionModal').style.display = 'flex';
        reasonInput.focus();

        reasonInput.oninput = () => {
            document.getElementById('declineConfirmBtn').disabled = reasonInput.value.trim() === '';
        };
        isDeclineModalOpen = true;
    }

    // ===== CLOSE DECLINE MODAL =====
    function closeDeclineModal() {
        const modal = document.getElementById('declineSessionModal');
        if (!modal) return;
        modal.style.display = 'none';
        currentDeclineId = null;
        document.getElementById('declineReason').value = '';
        isDeclineModalOpen = false;
    }

    // ===== ENABLE/DISABLE DECLINE BUTTON =====
    document.getElementById('declineReason').addEventListener('input', function() {
        const btn = document.getElementById('declineConfirmBtn');
        btn.disabled = this.value.trim() === '';
    });

    // ===== SUBMIT DECLINE =====
    async function submitDecline() {
        if (!currentDeclineId) return;
        const reason = document.getElementById('declineReason').value.trim();
        if (!reason) return;

        try {
            const res = await fetch('/SupportSession/Decline', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ Id: currentDeclineId, Reason: reason })
            });
            if (!res.ok) throw new Error('Failed to decline session.');

            closeDeclineModal();
            await refreshPendingRequests();
            await refreshDeclinedSessions();
        } catch (err) {
            console.error(err);
            alert('Something went wrong. Please try again.');
        }
    }

    // ===== MODAL & BUTTON EVENTS =====
    document.getElementById('declineCancelBtn').addEventListener('click', closeDeclineModal);
    document.getElementById('declineConfirmBtn').addEventListener('click', submitDecline);

    // Close modal when clicking outside
    document.getElementById('declineSessionModal').addEventListener('click', function(e){
        if(e.target === this) closeDeclineModal();
    });

    // ===== MODAL FUNCTIONS =====
    function openConfirmModal(id) {
        currentSessionId = id;
        document.getElementById('confirmSessionId').value = id;
        document.getElementById('sessionLinkModal').style.display = 'flex';
        isModalOpen = true;
        document.getElementById('meetingLink').focus();
    }

    function closeSessionModal() {
        const modal = document.getElementById('sessionLinkModal');
        if (!modal) return;

        modal.style.display = 'none';
        currentSessionId = null;
        document.getElementById('meetingLink').value = '';
        isModalOpen = false;
    }

    async function submitSessionLink() {
        if (!currentSessionId) return;

        const linkInput = document.getElementById('meetingLink');
        const errorSpan = document.getElementById('meetingLinkError');
        const link = linkInput.value.trim();

        // Reset previous error
        errorSpan.style.display = 'none';
        errorSpan.textContent = '';

        if (!link) {
            errorSpan.textContent = 'Please enter a meeting link.';
            errorSpan.style.display = 'block';
            linkInput.focus();
            return;
        }

        // ===== URL validation =====
        try {
            const url = new URL(link); // will throw if invalid
            if (!['http:', 'https:'].includes(url.protocol)) {
                throw new Error('Invalid protocol');
            }
        } catch (err) {
            errorSpan.textContent = 'Please enter a valid URL.';
            errorSpan.style.display = 'block';
            linkInput.focus();
            return;
        }

        try {
            const res = await fetch('/SupportSession/Confirm', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ Id: currentSessionId, Link: link })
            });
            if (!res.ok) throw new Error('Failed to confirm session.');

            closeSessionModal();

            await refreshPendingRequests();
            await refreshUpcomingSessions();
        } catch (err) {
            console.error(err);
            errorSpan.textContent = 'Something went wrong. Please try again.';
            errorSpan.style.display = 'block';
            linkInput.focus();
        }
    }

    // ===== DECLINE SESSION =====
    function declineSession(id) {
        openDeclineModal(id);
    }

    // ===== COMPLETE SESSION =====
    async function completeSession(id) {
        try {
            const res = await fetch('/SupportSession/Complete', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ Id: id })
            });
            if (!res.ok) throw new Error('Failed to complete session.');

            await refreshUpcomingSessions();
            await refreshCompletedSessions();
        } catch (err) {
            console.error(err);
            alert('Something went wrong while completing the session.');
        }
    }

    // ===== REFRESH FUNCTIONS =====
    async function refreshPendingRequests() {
        try {
            const res = await fetch('/SupportSession/PendingRequestsPartial');
            if (!res.ok) throw new Error('Failed to load pending requests');
            const html = await res.text();
            document.getElementById('pendingSupportContainer').innerHTML = html;
        } catch (err) {
            console.error(err);
        }
    }

    async function refreshUpcomingSessions() {
        try {
            const res = await fetch('/SupportSession/UpcomingPartial');
            if (!res.ok) throw new Error('Failed to load upcoming sessions');
            const html = await res.text();
            document.getElementById('upcomingSessionsContainer').innerHTML = html;
        } catch (err) {
            console.error(err);
        }
    }

    async function refreshDeclinedSessions() {
        try {
            const res = await fetch('/SupportSession/DeclinedPartial');
            if (!res.ok) throw new Error('Failed to load declined sessions');
            const html = await res.text();
            document.getElementById('declinedSessionsContainer').innerHTML = html;
        } catch (err) {
            console.error(err);
        }
    }

    async function refreshCompletedSessions() {
        try {
            const res = await fetch('/SupportSession/CompletedRequestsPartial');
            if (!res.ok) throw new Error('Failed to load completed sessions');
            const html = await res.text();
            document.getElementById('completedSupportContainer').innerHTML = html;
        } catch (err) {
            console.error(err);
        }
    }

    // ===== MODAL & CARD DELEGATION =====
    document.addEventListener('click', function(e) {
        // Confirm session card button
        if (e.target.closest('.artisan-btn-confirm')) {
            const id = e.target.closest('.artisan-support-card').id.replace('support-', '');
            openConfirmModal(id);
        }

        // Decline session card button
        if (e.target.closest('.artisan-btn-decline')) {
            const id = e.target.closest('.artisan-support-card').id.replace('support-', '');
            declineSession(id);
        }

        // Decline modal cancel button
        if (e.target.closest('#declineCancelBtn')) {
            closeDeclineModal();
        }

        // Click outside decline modal content
        if (e.target.id === 'declineSessionModal') {
            closeDeclineModal();
        }

        // Confirm decline button
        if (e.target.closest('#declineConfirmBtn')) {
            submitDecline();
        }

        // Complete session button
        if (e.target.closest('.complete-session-btn')) {
            const id = e.target.closest('.artisan-support-card').id.replace('support-', '');
            completeSession(id);
        }

        // Cancel button inside modal
        if (e.target.closest('#modalCancelBtn')) {
            closeSessionModal();
        }

        // Click outside modal content to close
        if (e.target.id === 'sessionLinkModal') {
            closeSessionModal();
        }

        // Confirm session inside modal
        if (e.target.closest('.btn-confirm') && e.target.closest('#sessionLinkModal')) {
            submitSessionLink();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (isModalOpen) {
                closeSessionModal();
            }
            if (isDeclineModalOpen) {
                closeDeclineModal();
            }
        }
    });

    // ===== MODAL LISTENER =====
    function attachModalListeners() {
        const cancelBtn = document.getElementById('modalCancelBtn');
        if (cancelBtn) cancelBtn.addEventListener('click', closeSessionModal);

        const modal = document.getElementById('sessionLinkModal');
        if (modal) modal.onclick = e => { if (e.target === modal) closeSessionModal(); };
    }

    attachModalListeners();

    // ===== AUTO REFRESH EVERY 10 SECONDS =====
    setInterval(() => {
        if (!isModalOpen && !isDeclineModalOpen) {
            refreshPendingRequests();
            refreshUpcomingSessions();
            refreshDeclinedSessions();
            refreshCompletedSessions();
        }
    }, 10000);

    // ===== INITIAL LOAD =====
    refreshPendingRequests();
    refreshUpcomingSessions();
    refreshDeclinedSessions();
    refreshCompletedSessions();

    // Expose globally if needed
    window.refreshPendingRequests = refreshPendingRequests;
    window.refreshUpcomingSessions = refreshUpcomingSessions;
    window.refreshDeclinedSessions = refreshDeclinedSessions;
    window.refreshCompletedSessions = refreshCompletedSessions;
</script>