@using SkillBuilder.Models.ViewModels
@model ArtisanProfileViewModel

<style>
    .artisan-portfolio-section {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .artisan-portfolio-heading {
        font-size: 1.5rem;
        font-weight: bold;
        color: #222;
    }

    .artisan-portfolio-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1.5rem;
    }

    .artisan-portfolio-card {
        max-width: 250px;
        background: #fff;
        border-radius: 12px;
        overflow: hidden;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        display: flex;
        flex-direction: column;
    }

        .artisan-portfolio-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }

        .artisan-portfolio-card img {
            width: 100%;
            height: 180px;
            object-fit: cover;
        }

    .artisan-portfolio-card-body {
        padding: 0.8rem 1rem;
    }

        .artisan-portfolio-card-body h3 {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.2rem;
        }

        .artisan-portfolio-card-body p {
            font-size: 0.9rem;
            color: #555;
            margin: 0;
        }

    /* Add Work card */
    .artisan-portfolio-add {
        border: 2px dashed #c3c3ff;
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: #344AEA;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s ease;
        min-height: 260px;
    }

        .artisan-portfolio-add:hover {
            background: #f8f9ff;
        }

        .artisan-portfolio-add span {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

    /* Modal */
    .artisan-portfolio-modal {
        display: none;
        position: fixed;
        inset: 0;
        z-index: 10000;
        background: rgba(0, 0, 0, 0.6);
        justify-content: center;
        align-items: center;
    }

    .artisan-portfolio-modal-content {
        background: #fff;
        border-radius: 10px;
        padding: 1.5rem;
        max-width: 500px;
        width: 100%;
        animation: fadeIn 0.2s ease;
    }

    .artisan-portfolio-modal-header {
        font-size: 1.3rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #344AEA;
    }

    .artisan-portfolio-form-group {
        margin-bottom: 1rem;
    }

        .artisan-portfolio-form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.3rem;
        }

        .artisan-portfolio-form-group input,
        .artisan-portfolio-form-group textarea {
            width: 100%;
            padding: 0.6rem;
            border-radius: 6px;
            border: 1px solid #ccc;
            font-size: 0.95rem;
        }

    .artisan-portfolio-modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.8rem;
        margin-top: 1.2rem;
    }

    .artisan-portfolio-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 6px;
        border: none;
        cursor: pointer;
        font-weight: 600;
    }

    .artisan-portfolio-btn-cancel {
        background: #ddd;
    }

    .artisan-portfolio-btn-submit {
        background: #344AEA;
        color: #fff;
        opacity: 0.6;
        cursor: not-allowed;
    }

        .artisan-portfolio-btn-submit.enabled {
            opacity: 1;
            cursor: pointer;
        }

    .artisan-portfolio-card-actions {
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        align-items: center;
        padding: 0.8rem 1rem;
    }

        .artisan-portfolio-card-actions button {
            background-color: #FEE4E2;
            color: #B42318;
            padding: 0.8rem 0.8rem;
            border: solid #B42318 1px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: bold;
            max-width: 110px;
            min-width: 110px;
        }

    .artisan-portfolio-btn-edit {
        background-color: #e9feff !important;
        border: solid #344AEA 1px !important;
    }

        .artisan-portfolio-btn-edit:hover {
            background-color: #344AEA !important;
            color: white;
        }

    .artisan-portfolio-btn-deleten {
        background-color: #e74c3c;
    }

        .artisan-portfolio-btn-delete:hover {
            background-color: #c0392b;
            color: white;
        }

    /* Edit modal image preview */
    .artisan-portfolio-edit-preview {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 6px;
        margin-top: 0.5rem;
        border: 1px solid #ccc;
    }

    .delete-btn-disabled {
        background-color: #e74c3c;
        color: white;
        cursor: pointer;
        opacity: 1;
    }

        .delete-btn-disabled:hover {
            background-color: #c0392b;
        }
</style>

<div class="artisan-portfolio-section">
    <div class="artisan-portfolio-heading">My Works</div>

    <div class="artisan-portfolio-grid">
        @if (Model.ArtisanWorks != null && Model.ArtisanWorks.Any())
        {
            @foreach (var work in Model.ArtisanWorks)
            {
                <div class="artisan-portfolio-card" data-work-id="@work.Id">
                    <img src="@work.ImageUrl" alt="@work.Title" />
                    <div class="artisan-portfolio-card-body">
                        <h3>@work.Title</h3>
                        <p>@work.Caption</p>
                    </div>
                    <div class="artisan-portfolio-card-actions">
                        <button class="artisan-portfolio-btn-edit" data-work-id="@work.Id">Edit</button>
                        <button class="artisan-portfolio-btn-delete" data-work-id="@work.Id">Delete</button>
                    </div>
                </div>
            }
        }

        <!-- Add Work Card -->
        <div class="artisan-portfolio-add" id="artisan-portfolio-openAddWorkModal">
            <span>+</span>
            Add your work
        </div>
    </div>
</div>

<!-- Add Work Modal -->
<div id="artisan-portfolio-addModal" class="artisan-portfolio-modal">
    <div class="artisan-portfolio-modal-content">
        <div class="artisan-portfolio-modal-header">Add New Work</div>

        <form asp-action="AddWork" asp-controller="Artisan" method="post" enctype="multipart/form-data" id="artisan-portfolio-addForm">
            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-addTitle">Add Title</label>
                <input type="text" id="artisan-portfolio-addTitle" name="Title" required />
            </div>

            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-addCaption">Add Description</label>
                <textarea id="artisan-portfolio-addCaption" name="Caption" rows="3" required></textarea>
            </div>

            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-addImage">Upload Image</label>
                <input type="file" id="artisan-portfolio-addImage" name="ImageFile" accept="image/*" required />
            </div>

            <div class="artisan-portfolio-modal-actions">
                <button type="button" class="artisan-portfolio-btn artisan-portfolio-btn-cancel" id="artisan-portfolio-cancelAdd">Cancel</button>
                <button type="submit" class="artisan-portfolio-btn artisan-portfolio-btn-submit" id="artisan-portfolio-submitAdd" disabled>Add Work</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Work Modal -->
<div id="artisan-portfolio-editModal" class="artisan-portfolio-modal">
    <div class="artisan-portfolio-modal-content">
        <div class="artisan-portfolio-modal-header">Edit Work</div>

        <form id="artisan-portfolio-editForm" enctype="multipart/form-data">
            <input type="hidden" id="artisan-portfolio-editWorkId" name="WorkId" />

            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-editTitle">Title</label>
                <input type="text" id="artisan-portfolio-editTitle" name="Title" required />
            </div>

            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-editCaption">Description</label>
                <textarea id="artisan-portfolio-editCaption" name="Caption" rows="3" required></textarea>
            </div>

            <div class="artisan-portfolio-form-group">
                <label for="artisan-portfolio-editImage">Image</label>
                <input type="file" id="artisan-portfolio-editImage" name="ImageFile" accept="image/*" />
                <img id="artisan-portfolio-editPreview" class="artisan-portfolio-edit-preview" src="" alt="Current image" />
            </div>

            <div class="artisan-portfolio-modal-actions">
                <button type="button" class="artisan-portfolio-btn artisan-portfolio-btn-cancel" id="artisan-portfolio-cancelEdit">Cancel</button>
                <button type="submit" class="artisan-portfolio-btn artisan-portfolio-btn-submit" id="artisan-portfolio-submitEdit" disabled>Save Changes</button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Work Modal -->
<div id="artisan-portfolio-deleteModal" class="artisan-portfolio-modal">
    <div class="artisan-portfolio-modal-content">
        <div class="artisan-portfolio-modal-header">Confirm Delete</div>
        <p>Are you sure you want to delete this work? This action cannot be undone.</p>
        <div class="artisan-portfolio-modal-actions">
            <button type="button" class="artisan-portfolio-btn artisan-portfolio-btn-cancel" id="artisan-portfolio-cancelDelete">Cancel</button>
            <button type="button" class="artisan-portfolio-btn artisan-portfolio-btn-submit delete-btn-disabled" id="artisan-portfolio-confirmDelete">Delete</button>
        </div>
    </div>
</div>

<!-- Work Detail Modal -->
<div id="portfolioWorkModal" class="artisan-portfolio-modal">
    <div class="artisan-portfolio-modal-content">
        <span class="portfolio-work-close" style="position:absolute; top:10px; right:15px; font-size:1.5rem; font-weight:bold; cursor:pointer;">&times;</span>
        <div class="work-modal-body" style="text-align:center;">
            <img id="portfolioModalImage" class="artisan-portfolio-edit-preview" src="" alt="Work Image" />
            <div class="modal-details" style="text-align:left; margin-top:1rem;">
                <h2 id="portfolioModalTitle" style="color:#344AEA;"></h2>
                <p id="portfolioModalDate" style="color:#555;"></p>
                <p id="portfolioModalCaption" style="color:#444;"></p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {

        const fileRules = {
            image: {
                maxSize: 5 * 1024 * 1024, // 5 MB
                allowed: [".jpg", ".jpeg", ".png", ".gif", ".webp"]
            }
        };

        function validateFile(input, type) {
            const file = input.files[0];
            if (!file) return true;

            let errorEl = input.parentElement.querySelector(".file-error");
            if (!errorEl) {
                errorEl = document.createElement("span");
                errorEl.className = "file-error";
                errorEl.style.color = "red";
                errorEl.style.fontSize = "0.85rem";
                errorEl.style.marginTop = "4px";
                input.insertAdjacentElement("afterend", errorEl);
            }

            const { maxSize, allowed } = fileRules[type];
            const ext = file.name.toLowerCase().substring(file.name.lastIndexOf("."));

            if (!allowed.includes(ext)) {
                errorEl.textContent = `Invalid file type. Allowed: ${allowed.join(", ")}`;
                errorEl.style.display = "block";
                input.value = "";
                return false;
            }

            if (file.size > maxSize) {
                const sizeMB = (maxSize / (1024 * 1024)).toFixed(0);
                errorEl.textContent = `File too large. Max ${sizeMB} MB allowed.`;
                errorEl.style.display = "block";
                input.value = "";
                return false;
            }

            errorEl.textContent = "";
            errorEl.style.display = "none";
            return true;
        }

        // --- Modals & Forms ---
        const addModal = document.getElementById("artisan-portfolio-addModal");
        const editModal = document.getElementById("artisan-portfolio-editModal");
        const deleteModal = document.getElementById("artisan-portfolio-deleteModal");
        const portfolioModal = document.getElementById("portfolioWorkModal");

        const openAddBtn = document.getElementById("artisan-portfolio-openAddWorkModal");
        const cancelAddBtn = document.getElementById("artisan-portfolio-cancelAdd");
        const addForm = document.getElementById("artisan-portfolio-addForm");
        const submitAddBtn = document.getElementById("artisan-portfolio-submitAdd");
        const addTitle = document.getElementById("artisan-portfolio-addTitle");
        const addCaption = document.getElementById("artisan-portfolio-addCaption");
        const addImage = document.getElementById("artisan-portfolio-addImage");

        const editForm = document.getElementById("artisan-portfolio-editForm");
        const editTitle = document.getElementById("artisan-portfolio-editTitle");
        const editCaption = document.getElementById("artisan-portfolio-editCaption");
        const editImage = document.getElementById("artisan-portfolio-editImage");
        const editPreview = document.getElementById("artisan-portfolio-editPreview");
        const submitEditBtn = document.getElementById("artisan-portfolio-submitEdit");
        const cancelEditBtn = document.getElementById("artisan-portfolio-cancelEdit");
        const editWorkIdInput = document.getElementById("artisan-portfolio-editWorkId");

        const cancelDeleteBtn = document.getElementById("artisan-portfolio-cancelDelete");
        const confirmDeleteBtn = document.getElementById("artisan-portfolio-confirmDelete");
        let workToDeleteId = null;

        const portfolioModalImage = document.getElementById("portfolioModalImage");
        const portfolioModalTitle = document.getElementById("portfolioModalTitle");
        const portfolioModalDate = document.getElementById("portfolioModalDate");
        const portfolioModalCaption = document.getElementById("portfolioModalCaption");
        const portfolioCloseBtn = document.querySelector(".portfolio-work-close");

        // --- Validate Add Form ---
        function validateAddForm() {
            if (addTitle.value.trim() && addCaption.value.trim() && addImage.files.length > 0) {
                submitAddBtn.disabled = false;
                submitAddBtn.classList.add("enabled");
            } else {
                submitAddBtn.disabled = true;
                submitAddBtn.classList.remove("enabled");
            }
        }

        [addTitle, addCaption, addImage].forEach(input => {
            input.addEventListener("input", validateAddForm);
            input.addEventListener("change", () => {
                validateFile(addImage, "image");
                validateAddForm();
            });
        });

        openAddBtn.addEventListener("click", () => addModal.style.display = "flex");
        cancelAddBtn.addEventListener("click", () => {
            addModal.style.display = "none";
            addForm.reset();
            validateAddForm();
        });

        addModal.addEventListener("click", (e) => {
            if (e.target === addModal) {
                addModal.style.display = "none";
                addForm.reset();
                validateAddForm();
            }
        });

        // --- Click Delegation for Edit/Delete ---
        document.querySelector(".artisan-portfolio-grid").addEventListener("click", async (e) => {
            const editBtn = e.target.closest(".artisan-portfolio-btn-edit");
            const deleteBtn = e.target.closest(".artisan-portfolio-btn-delete");

            if (editBtn) {
                const workId = editBtn.dataset.workId;
                const res = await fetch(`/Artisan/GetWork/${workId}`);
                const data = await res.json();

                editForm.reset();
                editTitle.value = data.title;
                editCaption.value = data.caption;
                editPreview.src = data.imageUrl;
                editWorkIdInput.value = workId;

                editTitle.dataset.original = data.title;
                editCaption.dataset.original = data.caption;

                submitEditBtn.disabled = true;
                submitEditBtn.classList.remove("enabled");

                editModal.style.display = "flex";
                return;
            }

            if (deleteBtn) {
                workToDeleteId = deleteBtn.dataset.workId;
                deleteModal.style.display = "flex";
            }
        });

        // --- Edit Form ---
        function checkEditChanges() {
            if (
                editTitle.value.trim() !== "" &&
                (
                    editTitle.value !== editTitle.dataset.original ||
                    editCaption.value !== editCaption.dataset.original ||
                    editImage.files.length > 0
                )
            ) {
                submitEditBtn.disabled = false;
                submitEditBtn.classList.add("enabled");
            } else {
                submitEditBtn.disabled = true;
                submitEditBtn.classList.remove("enabled");
            }
        }

        [editTitle, editCaption, editImage].forEach(el => {
            el.addEventListener("input", checkEditChanges);
            el.addEventListener("change", () => {
                validateFile(editImage, "image");
                checkEditChanges();
                if (editImage.files && editImage.files[0]) {
                    const reader = new FileReader();
                    reader.onload = e => editPreview.src = e.target.result;
                    reader.readAsDataURL(editImage.files[0]);
                }
            });
        });

        addForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(addForm);

            try {
                const res = await fetch(`/Artisan/AddWork`, {
                    method: "POST",
                    body: formData
                });

                const data = await res.json();

                if (data.success) {
                    // ✅ Reload page after successful add
                    location.reload();
                } else {
                    alert(data.message || "Failed to add work.");
                }
            } catch (err) {
                console.error(err);
                alert("An error occurred while adding the work.");
            }
        });

        editForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const workId = editWorkIdInput.value;
            if (!workId) return alert("No work selected to edit.");

            const formData = new FormData();
            formData.append("Title", editTitle.value);
            formData.append("Caption", editCaption.value);
            if (editImage.files.length > 0) formData.append("ImageFile", editImage.files[0]);

            try {
                const res = await fetch(`/Artisan/EditWork/${workId}`, { method: "POST", body: formData });
                const data = await res.json();

                if (data.success) {
                    // ✅ Reload page after successful edit
                    location.reload();
                } else {
                    alert(data.message || "Failed to update work.");
                }
            } catch (err) {
                console.error(err);
                alert("An error occurred while updating the work.");
            }
        });

        cancelEditBtn.addEventListener("click", () => editModal.style.display = "none");

        confirmDeleteBtn.addEventListener("click", async () => {
            if (!workToDeleteId) return;

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            const formData = new FormData();
            if (token) formData.append("__RequestVerificationToken", token);

            try {
                const res = await fetch(`/Artisan/DeleteWork/${workToDeleteId}`, { method: "POST", body: formData });
                const data = await res.json();

                if (data.success) {
                    // ✅ Reload page after successful delete
                    location.reload();
                } else {
                    alert(data.message || "Failed to delete work.");
                }
            } catch (err) {
                console.error(err);
                alert("An error occurred while deleting the work.");
            }
        });

        cancelDeleteBtn.addEventListener("click", () => deleteModal.style.display = "none");

        // --- Close Modals on Outside Click ---
        [editModal, deleteModal, addModal, portfolioModal].forEach(modal => {
            modal.addEventListener("click", e => { if (e.target === modal) modal.style.display = "none"; });
        });

        portfolioCloseBtn.addEventListener("click", () => portfolioModal.style.display = "none");

    });
</script>