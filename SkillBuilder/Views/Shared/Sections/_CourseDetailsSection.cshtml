@model SkillBuilder.Models.Course

@{
    var userId = User.FindFirst("UserId")?.Value;
    var userRole = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
    var isVerified = User.FindFirst("IsVerified")?.Value == "True";
    var isDeactivated = User.FindFirst("IsDeactivated")?.Value == "True";

    var userEnrollment = Model.Enrollments.FirstOrDefault(e => e.UserId == userId);
    var isEnrolled = userEnrollment != null;
    var projectStatus = userEnrollment?.FinalProjectStatus;
    var signatureUrl = userEnrollment?.DigitalSignatureUrl;

    // ✅ Show completion button if enrollment exists and is marked completed
    bool showCompletionBtn = userEnrollment != null && userEnrollment.IsCompleted;
}

<style>
    .course-detail-section {
        background-color: #f9f9f9;
        padding-bottom: 4rem;
    }

    .course-detail-top-section {
        padding: 6.5rem 13rem 2rem;
    }

    .course-detail-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 2rem;
    }

    .course-detail-left {
        width: 80%;
    }

    .course-detail-right {
        width: 20%;
        background-color: #fff;
        padding: 2rem;
        margin-left: 5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        text-align: center;
    }

    .course-detail-level {
        display: inline-block;
        background-color: #FFEB3B;
        color: #222;
        font-weight: bold;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .course-detail-title {
        font-size: 2.2rem;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .course-detail-creator {
        font-size: 1rem;
        margin-bottom: 1.5rem;
        color: #555;
    }

    .course-detail-description {
        font-size: 1rem;
        color: #444;
        margin-bottom: 2rem;
        line-height: 1.6;
    }

    .course-detail-meta-box {
        display: flex;
        justify-content: space-between;
        background-color: #E0F2FF;
        border: 2px solid #4A90E2;
        padding: 1.5rem;
        border-radius: 12px;
        gap: 1.5rem;
    }

    .course-detail-meta-col {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        font-size: 0.95rem;
        color: #333;
        gap: 0.5rem;
    }

        .course-detail-meta-col img {
            width: 24px;
            height: 24px;
        }

    .course-detail-free-label {
        color: #344AEA;
        font-size: 2rem;
        margin-bottom: 1.5rem;
    }

    .course-detail-enroll-btn {
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: bold;
        background-color: #344AEA;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .course-detail-enroll-btn:hover {
            background-color: #2A3EC1;
        }

    .course-detail-notebook {
        margin: 2rem 36.5rem 2rem 13rem;
    }

    .course-detail-notebook-tabs {
        display: flex;
        gap: 2rem;
        border-bottom: 2px solid #ddd;
        margin-bottom: 1rem;
    }

    .notebook-tab {
        padding: 0.75rem 1rem;
        cursor: pointer;
        font-weight: 600;
        color: #333;
        text-decoration: none;
        border-bottom: 3px solid transparent;
        transition: all 0.2s ease;
    }

        .notebook-tab:hover {
            color: #344AEA;
        }

        .notebook-tab.active {
            color: #344AEA;
            border-bottom-color: #344AEA;
        }

    .course-detail-tab-contents {
        background-color: #fff;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .course-detail-cc {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .course-detail-cc-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        max-width: 500px;
        width: 90%;
        text-align: center;
        position: relative;
    }

    .course-detail-cc-close {
        position: absolute;
        top: 0.5rem;
        right: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .course-detail-button-group {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: stretch; /* ensure same width for all buttons */
    }

    .enroll-modal-content {
        max-width: 450px;
        padding: 2rem 1.5rem;
        border-radius: 12px;
        background-color: #fff;
        text-align: center;
        position: relative;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }

    .enroll-modal-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
    }

        .enroll-modal-buttons .course-detail-enroll-btn {
            flex: 1;
            padding: 0.8rem 1rem;
            font-weight: bold;
            font-size: 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .enroll-modal-buttons .course-detail-enroll-btn:hover {
                opacity: 0.9;
            }

        .enroll-modal-buttons .cancel-btn {
            background-color: #ccc;
            color: #333;
        }

    .course-detail-delete-btn {
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: bold;
        background-color: #FF4B4B;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .course-detail-delete-btn:hover {
            background-color: #C12D2D;
        }

    /* Delete Modal */
    .course-detail-delete-cc {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1100;
    }

    .course-detail-delete-cc-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        max-width: 450px;
        width: 90%;
        text-align: center;
        position: relative;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }

    .course-detail-delete-cc-close {
        position: absolute;
        top: 0.5rem;
        right: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
    }

    /* Align buttons evenly side by side */
    .delete-modal-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
    }

        .delete-modal-buttons button {
            flex: 1;
            padding: 0.8rem 1rem;
            font-weight: bold;
            font-size: 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
        }

    /* Red delete button */
    #confirm-delete-btn {
        background-color: #FF4B4B;
        color: #fff;
    }

        #confirm-delete-btn:hover {
            background-color: #C12D2D;
        }

    /* White cancel button with border */
    #cancel-delete-btn {
        background-color: #fff;
        color: #333;
        border: 2px solid #ccc;
    }

        #cancel-delete-btn:hover {
            background-color: #f2f2f2;
            border-color: #999;
        }

    .course-detail-report-cc {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.6);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1100;
    }

    .course-detail-report-cc-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        max-width: 450px;
        width: 90%;
        text-align: center;
        position: relative;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
    }

    .course-detail-report-cc-close {
        position: absolute;
        top: 0.5rem;
        right: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .report-textarea {
        width: 100%;
        margin-top: 1rem;
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        resize: none;
    }

    .report-modal-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    #confirm-report-btn {
        background-color: #344AEA;
        color: #fff;
        border: none;
        padding: 0.8rem 1rem;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        #confirm-report-btn:hover {
            background-color: #2A3EC1;
        }

    #cancel-report-btn {
        background-color: #fff;
        color: #333;
        border: 2px solid #ccc;
        border-radius: 8px;
        font-weight: bold;
        padding: 0.8rem 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        #cancel-report-btn:hover {
            background-color: #f2f2f2;
            border-color: #999;
        }

    /* Report button under course */
    .course-detail-report-btn {
        padding: 1rem 2rem;
        font-size: 1rem;
        font-weight: bold;
        background-color: #FF4B4B;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        margin-top: 1rem;
    }

        .course-detail-report-btn:hover {
            background-color: red;
        }

    #confirm-report-btn:disabled {
        background-color: #ccc;
        color: #666;
        cursor: not-allowed;
    }
</style>

<section class="course-detail-section">
    <!-- Top Detail Section -->
    <div class="course-detail-top-section">
        <div class="course-detail-wrapper">
            <div class="course-detail-left">
                <span class="course-detail-level">@Model.Difficulty</span>
                <h1 class="course-detail-title">@Model.Title</h1>
                <h5 class="course-detail-creator">A course by @Model.Artisan.FirstName @Model.Artisan.LastName, @Model.Artisan.Profession from @Model.Artisan.Hometown</h5>
                <p class="course-detail-description">@Model.Overview</p>

                <div class="course-detail-meta-box">
                    <div class="course-detail-meta-col">
                        <img src="/assets/Icons/Star.ico" alt="Rating" />
                        <span>@Model.AverageRating.ToString("0.0")</span>
                    </div>
                    <div class="course-detail-meta-col">
                        <img src="/assets/Icons/Course.ico" alt="Modules" />
                        <span>@Model</span>
                    </div>
                    <div class="course-detail-meta-col">
                        <img src="/assets/Icons/Time.ico" alt="Duration" />
                        <span>@Model.Duration</span>
                    </div>
                    <div class="course-detail-meta-col">
                        <img src="/assets/Icons/Medal.ico" alt="Certification" />
                        <span>Certificate Included</span>
                    </div>
                </div>
            </div>

            @if (userRole == "Artisan" && Model.Artisan?.UserId == userId)
            {
                <div class="course-detail-right">
                    <button class="course-detail-delete-btn" onclick="showDeleteModal(@Model.Id)">
                        Delete Course
                    </button>
                </div>
            }

            <!-- Delete Confirmation Modal -->
            <div id="delete-course-modal" class="course-detail-delete-cc" style="display:none;">
                <div class="course-detail-delete-cc-content">
                    <span class="course-detail-delete-cc-close" id="delete-modal-close">&times;</span>
                    <h2>Confirm Course Deletion</h2>
                    <p>Are you sure you want to delete this course? It will no longer be visible in the catalog.</p>
                    <div class="delete-modal-buttons">
                        <button class="course-detail-delete-btn" id="confirm-delete-btn">Yes, Delete</button>
                        <button class="course-detail-cancel-btn" id="cancel-delete-btn">Cancel</button>
                    </div>
                </div>
            </div>

            @if (userRole != "Admin")
            {
                @if (User.Identity.IsAuthenticated)
                {
                    if (userRole != "Artisan")
                    {
                        <div class="course-detail-right">
                            <h1 class="course-detail-free-label">FREE COURSE</h1>

                            @if (!isVerified)
                            {
                                <button class="course-detail-enroll-btn" disabled>Verify Email First</button>
                                <p style="color:#d00;font-size:0.85rem;margin-top:0.5rem;">
                                    You need to verify your email before enrolling in this course.
                                </p>
                            }
                            else if (isDeactivated)
                            {
                                <button class="course-detail-enroll-btn" disabled>Account Deactivated</button>
                                <p style="color:#d00;font-size:0.85rem;margin-top:0.5rem;">
                                    Your account is deactivated. Please contact support.
                                </p>
                            }
                            else if (!isEnrolled)
                            {
                                <button class="course-detail-enroll-btn" onclick="enrollCourse(@Model.Id)">Enroll Now</button>
                            }
                            else
                            {
                                <form method="get" action="/Courses/CourseModule/@Model.Id" class="course-detail-button-group">
                                    <button type="submit" class="course-detail-enroll-btn">Start Course</button>

                                    @if (showCompletionBtn)
                                    {
                                        <button type="button" class="course-detail-enroll-btn" id="view-completion-btn">Receive Completion</button>
                                    }
                                </form>
                            }

                            <!-- Report Course button (for normal users) -->
                            <button class="course-detail-report-btn" onclick="showReportModal(@Model.Id)">Report Course</button>

                            <!-- Report Course Modal -->
                            <div id="report-course-modal" class="course-detail-report-cc" style="display:none;">
                                <div class="course-detail-report-cc-content">
                                    <span class="course-detail-report-cc-close" id="report-modal-close">&times;</span>
                                    <h2>Report This Course</h2>
                                    <p>Please tell us the reason for reporting this course:</p>
                                    <textarea id="report-reason" class="report-textarea" placeholder="Describe the issue..." rows="4"></textarea>

                                    <div class="report-modal-buttons">
                                        <button id="confirm-report-btn">Submit Report</button>
                                        <button id="cancel-report-btn">Cancel</button>
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                }
                else
                {
                    <div class="course-detail-right">
                        <h1 class="course-detail-free-label">FREE COURSE</h1>
                        <button class="course-detail-enroll-btn" onclick="showLoginReminder()">Enroll Now</button>
                    </div>
                }
            }
        </div>
    </div>

    <div id="completion-status-modal" class="course-detail-cc" style="display:none;">
        <div class="course-detail-cc-content">
            <span class="course-detail-cc-close" id="completion-modal-close">&times;</span>
            <h2 class="course-detail-cc-title">Course Completion Status</h2>

            @if (userEnrollment?.IsCompleted == true && projectStatus == "Approved")
            {
                <p style="text-align:center; font-size:1rem; margin-top:1rem; margin-bottom: 2rem;">
                    🎉 Congratulations! Your final project has been approved.
                </p>
                <a href="/Courses/DownloadCertificate/@Model.Id" class="course-detail-enroll-btn" style="text-decoration: none;">
                    Download Certificate
                </a>
            }
            else if (userEnrollment?.IsCompleted == true && projectStatus != "Approved")
            {
                <p style="text-align:center; font-size:1rem; margin-top:1rem;">
                    Your final project is submitted but not yet approved. Please wait for approval to download the certificate.
                </p>
            }
            else
            {
                <p style="text-align:center; font-size:1rem; margin-top:1rem;">
                    You have not completed the course yet.
                </p>
            }
        </div>
    </div>

    <!-- Notebook Navigation -->
    <div class="course-detail-notebook">
        <nav class="course-detail-notebook-tabs">
            <a class="notebook-tab active" data-tab="info">Information</a>
            <a class="notebook-tab" data-tab="modules">Modules</a>
            <a class="notebook-tab" data-tab="materials">Materials</a>
            <a class="notebook-tab" data-tab="mentor">Mentor</a>
            <a class="notebook-tab" data-tab="reviews">Reviews</a>
        </nav>

        <div class="course-detail-tab-contents">
            <div class="tab-content active" data-tab="info">
                @Html.Partial("Sections/CourseNotebooks/_CourseNotebookInformation", Model)
            </div>
            <div class="tab-content" data-tab="modules">
                @Html.Partial("Sections/CourseNotebooks/_CourseNotebookModule", Model)
            </div>
            <div class="tab-content" data-tab="materials">
                @Html.Partial("Sections/CourseNotebooks/_CourseNotebookMaterials", Model)
            </div>
            <div class="tab-content" data-tab="mentor">
                @Html.Partial("Sections/CourseNotebooks/_CourseNotebookMentor", Model)
            </div>
            <div class="tab-content" data-tab="reviews">
                @Html.Partial("Sections/CourseNotebooks/_CourseNotebookReviews", Model)
            </div>
        </div>
    </div>

    <div id="enroll-confirmation-modal" class="course-detail-cc" style="display:none;">
        <div class="course-detail-cc-content enroll-modal-content">
            <span class="course-detail-cc-close" id="enroll-modal-close">&times;</span>
            <h2 class="course-detail-cc-title">Confirm Enrollment</h2>
            <p style="text-align:center; font-size:1rem; margin-top:1rem;">
                Are you sure you want to enroll in this course?
            </p>
            <div class="enroll-modal-buttons">
                <button class="course-detail-enroll-btn" id="confirm-enroll-btn">Yes, Enroll</button>
                <button class="course-detail-enroll-btn cancel-btn" id="cancel-enroll-btn">Cancel</button>
            </div>
        </div>
    </div>
</section>

<script>
    function showLoginReminder() {
        openModal("login-modal");
    }
    const tabs = document.querySelectorAll(".notebook-tab");
    const contents = document.querySelectorAll(".tab-content");

    tabs.forEach(tab => {
        tab.addEventListener("click", () => {
            // Update tab styles
            tabs.forEach(t => t.classList.remove("active"));
            tab.classList.add("active");

            // Show corresponding content
            const selectedTab = tab.getAttribute("data-tab");
            contents.forEach(content => {
                content.classList.toggle("active", content.getAttribute("data-tab") === selectedTab);
            });
        });
    });

    const urlParams = new URLSearchParams(window.location.search);
    const tabParam = urlParams.get("tab");

    if (tabParam) {
        const targetTab = document.querySelector(`.notebook-tab[data-tab="${tabParam}"]`);
        const targetContent = document.querySelector(`.tab-content[data-tab="${tabParam}"]`);

        if (targetTab && targetContent) {
            // Deactivate all first
            tabs.forEach(t => t.classList.remove("active"));
            contents.forEach(c => c.classList.remove("active"));

            // Activate requested tab
            targetTab.classList.add("active");
            targetContent.classList.add("active");
        }
    }

    function enrollCourse(courseId) {
        fetch("/Courses/Enroll", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            credentials: "include",
            body: JSON.stringify({ courseId: courseId })
        })
        .then(res => {
            if (!res.ok) {
                console.error("Failed to enroll:", res.status);
                return;
            }
            return res.json();
        })
        .then(data => {
            if (!data) return;

            if (data.success) {
                if (data.showAchievement) {
                    const firstAchievement = data.achievements[0];
                    document.querySelector(".celebration-title").textContent = `🎉 ${firstAchievement}`;
                    document.querySelector(".celebration-text").textContent =
                        firstAchievement === "Lifelong Learner"
                            ? "You've enrolled in 3 courses — keep going!"
                            : "You’ve successfully enrolled in your first course.";
                    showAchievementCelebration();
                } else {
                    location.reload();
                }
            }
        });
    }

    function showAchievementCelebration() {
        confetti({
            particleCount: 200,
            spread: 80,
            origin: { y: 0.6 }
        });

        const modal = document.getElementById("celebration-modal");
        modal.classList.add("show");

        // Disable navbar
        document.querySelector("nav").classList.add("celebration-navbar-disabled");
    }

    function hideCelebrationModal() {
        const modal = document.getElementById("celebration-modal");
        modal.classList.remove("show");

        document.querySelector("nav").classList.remove("celebration-navbar-disabled");

        if (window.afterCelebrationRedirect) {
            window.location.href = window.afterCelebrationRedirect;
        } else {
            location.reload();
        }
    }

    const completionBtn = document.getElementById("view-completion-btn");
    const completionModal = document.getElementById("completion-status-modal");
    const completionClose = document.getElementById("completion-modal-close");

    if (completionBtn && completionModal) {
        completionBtn.addEventListener("click", () => {
            completionModal.style.display = "flex";
        });
    }

    if (completionClose && completionModal) {
        completionClose.addEventListener("click", () => {
            completionModal.style.display = "none";
        });
    }

    if (completionModal) {
        completionModal.addEventListener("click", e => {
            if (e.target === completionModal) completionModal.style.display = "none";
        });
    }

    function enrollCourse(courseId) {
        const modal = document.getElementById("enroll-confirmation-modal");
        modal.style.display = "flex";

        const confirmBtn = document.getElementById("confirm-enroll-btn");
        const cancelBtn = document.getElementById("cancel-enroll-btn");
        const closeBtn = document.getElementById("enroll-modal-close");

        // Remove old listeners to prevent duplicates
        confirmBtn.onclick = null;
        cancelBtn.onclick = null;
        closeBtn.onclick = null;

        confirmBtn.addEventListener("click", () => {
            fetch("/Courses/Enroll", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ courseId: courseId })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    // 🔥 Hide confirmation modal first
                    modal.style.display = "none";

                    if (data.showAchievement) {
                        const firstAchievement = data.achievements[0];
                        document.querySelector(".celebration-title").textContent = `🎉 ${firstAchievement}`;
                        document.querySelector(".celebration-text").textContent =
                            firstAchievement === "Lifelong Learner"
                                ? "You've enrolled in 3 courses — keep going!"
                                : "You’ve successfully enrolled in your first course.";

                        showAchievementCelebration();
                        window.afterCelebrationRedirect = `/Courses/CourseModule/${courseId}`;
                    } else {
                        window.location.href = `/Courses/CourseModule/${courseId}`;
                    }
                } else {
                    console.error("Enrollment failed");
                }
            });
        });

        cancelBtn.addEventListener("click", () => {
            modal.style.display = "none";
        });

        closeBtn.addEventListener("click", () => {
            modal.style.display = "none";
        });

        modal.addEventListener("click", e => {
            if (e.target === modal) modal.style.display = "none";
        });

        // ESC key listener
        const escHandler = (e) => {
            if (e.key === "Escape") closeModal();
        };
        document.addEventListener("keydown", escHandler);
    }

    function showDeleteModal(courseId) {
        const modal = document.getElementById("delete-course-modal");
        modal.style.display = "flex";

        const confirmBtn = document.getElementById("confirm-delete-btn");
        const cancelBtn = document.getElementById("cancel-delete-btn");
        const closeBtn = document.getElementById("delete-modal-close");

        // Remove old listeners
        confirmBtn.onclick = null;
        cancelBtn.onclick = null;
        closeBtn.onclick = null;

        // ESC handler
        const escHandler = (e) => {
            if (e.key === "Escape") modal.style.display = "none";
            document.removeEventListener("keydown", escHandler);
        };
        document.addEventListener("keydown", escHandler);

        confirmBtn.addEventListener("click", () => {
            fetch(`/Courses/Delete/${courseId}`, {
                method: "DELETE",
                credentials: "include",
                headers: { "Content-Type": "application/json" }
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirectUrl;
                } else {
                    alert("Failed to delete course: " + (data.message || ""));
                }
            });
        });

        cancelBtn.addEventListener("click", () => modal.style.display = "none");
        closeBtn.addEventListener("click", () => modal.style.display = "none");
        modal.addEventListener("click", e => { if (e.target === modal) modal.style.display = "none"; });
    }

    function showReportModal(courseId) {
        const modal = document.getElementById("report-course-modal");
        modal.style.display = "flex";

        const confirmBtn = document.getElementById("confirm-report-btn");
        const cancelBtn = document.getElementById("cancel-report-btn");
        const closeBtn = document.getElementById("report-modal-close");
        const reasonInput = document.getElementById("report-reason");

        confirmBtn.onclick = null;
        cancelBtn.onclick = null;
        closeBtn.onclick = null;

        // 🔒 Disable submit button initially
        confirmBtn.disabled = true;
        confirmBtn.style.opacity = "0.6";
        confirmBtn.style.cursor = "not-allowed";

        // 🧠 Enable submit when reason has text
        reasonInput.addEventListener("input", () => {
            const hasText = reasonInput.value.trim().length > 0;
            confirmBtn.disabled = !hasText;
            confirmBtn.style.opacity = hasText ? "1" : "0.6";
            confirmBtn.style.cursor = hasText ? "pointer" : "not-allowed";
        });

        confirmBtn.addEventListener("click", () => {
            const reason = reasonInput.value.trim();
            if (!reason) return;

            fetch(`/Courses/Report/${courseId}`, {
                method: "POST",
                credentials: "include",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ courseId, reason, details: "" })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    modal.style.display = "none";
                    location.reload();
                } else {
                    alert("Failed to submit report.");
                }
            })
            .catch(() => alert("Error submitting report."));
        });

        cancelBtn.addEventListener("click", () => modal.style.display = "none");
        closeBtn.addEventListener("click", () => modal.style.display = "none");
        modal.addEventListener("click", e => { if (e.target === modal) modal.style.display = "none"; });
    }

</script>