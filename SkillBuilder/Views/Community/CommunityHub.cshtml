@model SkillBuilder.Models.ViewModels.CommunityHubViewModel

@{
    ViewData["Title"] = "Community Hub";
    var isDeactivated = User.FindFirst("IsDeactivated")?.Value == "True";
}

<style>
    /* Wrapper for the page */  
    .community-page-wrapper {
        margin: 5.5rem 10%;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Header */
    .community-header h1 {
        font-size: 2rem;
        margin-bottom: 0.25rem;
        font-weight: bold;
    }

    .community-header h5 {
        color: #555;
        font-size: 1rem;
    }

    /* Search + Create Post row */
    .community-top-row {
        display: flex;
        justify-content: space-between;
        margin-top: 1rem;
    }

    .community-search {
        width: 85%;
        display: flex;
        gap: 0.5rem;
    }

        .community-search input {
            flex: 1;
            padding: 0.5rem 1rem;
            border: 1px solid #ccc;
            border-radius: 6px;
        }

        .community-search button {
            background-color: #3182ce;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
        }

    .create-post-btn {
        width: 12%;
        background-color: white;
        color: black;
        font-weight: 600;
        border: 1px solid;
        border-radius: 6px;
        cursor: pointer;
        padding: 0.5rem;
    }

    /* Left + Right sections */
    .community-body {
        display: flex;
        gap: 2rem;
    }

    .left-section {
        width: 70%;
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .right-section {
        width: 30%;
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Tabs */
    .community-tabs {
        display: flex;
        gap: 2rem;
        border-bottom: 1px solid #ccc;
        margin-bottom: 1rem;
    }

    .community-tab {
        padding: 0.6rem 1.25rem;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        background: none;
        border: none;
        border-bottom: 3px solid transparent;
        transition: all 0.2s ease;
        color: #333;
    }

        .community-tab.active {
            border-bottom-color: #3182ce;
            background-color: #e6f0ff;
            color: #3182ce;
        }

    /* Tab panels */
    .community-tab-panel {
        display: none;
    }

        .community-tab-panel.active {
            display: block;
        }

    /* Full-width community details */
    .community-details-fullpage {
        width: 100%;
        margin: 0 auto;
        padding: 1rem 10%;
    }

    /* Right section cards */
    .right-card {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .popular-communities,
    .user-communities {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

        .popular-communities li,
        .user-communities li {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

    .community-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #d3d3e0;
    }

    .members-count {
        font-size: 0.85rem;
        color: #555;
    }

    .see-more-btn {
        background: none;
        border: 1px solid #4c6ef5;
        color: #4c6ef5;
        border-radius: 6px;
        padding: 0.5rem;
        cursor: pointer;
    }

    /* Create community card */
    .create-community-card {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem;
        border: 1px dashed #aaa;
        border-radius: 6px;
        cursor: pointer;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        inset: 0;
        background-color: rgba(0,0,0,0.4);
        z-index: 1001;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }

    .modal-content {
        background: #fff;
        border-radius: 12px;
        width: 100%;
        max-width: 800px;
        padding: 2rem;
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        position: relative;
    }

    .modal-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
        color: #555;
    }

    .modal h2 {
        margin-top: 0;
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
    }

    .modal-subtitle {
        margin-bottom: 1.5rem;
        color: #555;
        font-size: 0.95rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 1rem;
    }

        .form-group label {
            margin-bottom: 0.25rem;
            font-weight: 600;
            font-size: 0.95rem;
        }

    .required {
        color: red;
    }

    .form-group input,
    .form-group textarea {
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        width: 100%;
        resize: none;
        box-sizing: border-box;
    }

    textarea {
        min-height: 120px;
    }

    .char-count {
        text-align: right;
        font-size: 0.75rem;
        color: #888;
        margin-top: 0.25rem;
    }

    .modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }

    .cancel-btn {
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 0.5rem 1.25rem;
        cursor: pointer;
        font-weight: 600;
    }

    .next-btn {
        background: #3182ce;
        border: none;
        color: white;
        padding: 0.5rem 1.25rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
    }

        .next-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .category-card {
        padding: 1rem 1.5rem;
        background-color: #f1f1f1;
        border-radius: 8px;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
        flex: 1 0 18%; /* roughly 5 cards horizontally */
        text-align: center;
        font-weight: 600;
    }

        .category-card.selected {
            background-color: #3182ce;
            color: white;
            transform: scale(1.05);
        }

    .community-posts-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }

    .community-posts-modal-content {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        width: 600px;
        max-width: 95%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .community-posts-title {
        font-size: 1.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: .25rem;
    }

    .community-posts-subtitle {
        text-align: center;
        color: #555;
        margin-bottom: 1.5rem;
    }

    .community-posts-field {
        margin-bottom: 1.5rem;
    }

        .community-posts-field label {
            display: block;
            font-weight: 600;
            margin-bottom: .5rem;
        }

        .community-posts-field input,
        .community-posts-field textarea {
            width: 100%;
            padding: .75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: .95rem;
        }

        .community-posts-field textarea {
            min-height: 120px;
            resize: vertical;
        }

    .community-posts-charcount {
        font-size: .8rem;
        color: #888;
        float: right;
        margin-top: .25rem;
    }

    .community-posts-categories {
        display: flex;
        gap: .5rem;
        flex-wrap: wrap;
        margin: .5rem 0;
    }

    .community-posts-category {
        border: 1px solid #ccc;
        background: #f9f9f9;
        padding: .5rem 1rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all .2s;
    }

        .community-posts-category:hover {
            background: #eee;
        }

        .community-posts-category.active {
            border-color: #344AEA;
            background: #e6ecff;
            color: #344AEA;
            font-weight: 600;
        }

    .community-posts-other {
        display: inline-block;
        margin-top: .5rem;
        font-size: .9rem;
        color: #344AEA;
        text-decoration: none;
    }

        .community-posts-other:hover {
            text-decoration: underline;
        }

    .community-posts-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .community-posts-btn {
        padding: .6rem 1.2rem;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        border: none;
    }

        .community-posts-btn.primary {
            background: #344AEA;
            color: #fff;
        }

        .community-posts-btn.secondary {
            background: #f0f0f0;
            color: #333;
        }

        .community-posts-btn:disabled {
            background-color: #ccc;
            color: #666;
            cursor: not-allowed;
            opacity: 0.7;
        }
</style>

<div class="community-page-wrapper">

    @if (Model.SelectedCommunity != null)
    {
        <div class="community-details-fullpage">
            @{
                var community = Model.SelectedCommunity;
                var currentUserId = User.FindFirst("UserId")?.Value;
                var detailsVm = new SkillBuilder.Models.ViewModels.CommunityDetailsViewModel
                {
                    SelectedCommunity = community,
                    IsOwner = community.CreatorId == currentUserId,
                    IsJoined = community.Memberships.Any(m => m.UserId == currentUserId),
                    Posts = Model.Posts // optional, if you want posts here
                };
            }

            @Html.Partial("~/Views/Shared/Sections/_CommunityDetailsSection.cshtml", detailsVm)
        </div>
    }
    else
    {
        <div class="community-header">
            <h1>Community Hub</h1>
            <h5>Connect with fellow artisans, students, and enthusiasts to share experiences, showcase your work, and learn together.</h5>
        </div>

        <div class="community-top-row">
            <div class="community-search">
                <input type="text" placeholder="Search Tahi" />
                <button><img src="/assets/Icons/Search.ico" width="20" height="20" /></button>
            </div>
            <button class="create-post-btn">＋ Create Post</button>
        </div>

        <div class="community-body">
            <div class="left-section">
                <div class="community-tabs">
                    <button type="button" class="community-tab active" data-tab="posts">Posts</button>
                    <button type="button" class="community-tab" data-tab="communities">Communities</button>
                </div>

                <div class="community-tab-panel active" data-tab="posts">
                    <partial name="Sections/CommunityNotebooks/_CommunityNotebookPosts" model="Model.Posts" />
                </div>

                <div class="community-tab-panel" data-tab="communities">
                    <partial name="Sections/CommunityNotebooks/_CommunityNotebookCommunities" model="Model" />
                </div>
            </div>

            <div class="right-section">
                <div class="right-card">
                    <h4>Popular Communities</h4>
                    <ul class="popular-communities">
                        <li>
                            <div class="community-avatar"></div>
                            <div class="community-info">
                                <span>Community name</span>
                                <span class="members-count">100 members</span>
                            </div>
                        </li>
                        <li>
                            <div class="community-avatar"></div>
                            <div class="community-info">
                                <span>Community name</span>
                                <span class="members-count">100 members</span>
                            </div>
                        </li>
                        <li>
                            <div class="community-avatar"></div>
                            <div class="community-info">
                                <span>Community name</span>
                                <span class="members-count">100 members</span>
                            </div>
                        </li>
                        <li>
                            <div class="community-avatar"></div>
                            <div class="community-info">
                                <span>Community name</span>
                                <span class="members-count">100 members</span>
                            </div>
                        </li>
                    </ul>
                    <button class="see-more-btn">See more communities</button>
                </div>

                @if (isDeactivated)
                {
                    <div class="create-community-card" style="opacity:0.5; pointer-events:none; cursor:not-allowed;">
                        <p style="color:#d00; font-size:0.85rem; margin-top:0.5rem;">
                            Can't Create Community, Your account is deactivated.
                        </p>
                    </div>
                }
                else
                {
                    <div class="create-community-card" id="openCreateCommunityModal">
                        <span class="plus-icon">＋</span>
                        Create a community
                    </div>
                }

                <div class="right-card">
                    <h4>Your Communities</h4>
                    <ul class="user-communities">
                        <li>
                            <div class="community-avatar"></div>
                            <span>Community name</span>
                        </li>
                        <li>
                            <div class="community-avatar"></div>
                            <span>Community name</span>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Create Post Modal -->
            <div id="communityPostsCreateModal" class="community-posts-modal-overlay" style="display:none;">
                <div class="community-posts-modal-content">
                    <h2 class="community-posts-title">Create a Post</h2>
                    <p class="community-posts-subtitle">
                        Start a new topic or ask the community—someone might just have the answer or the same idea!
                    </p>

                    <form id="communityPostsForm" method="post" action="/Community/CreatePost"
                          enctype="multipart/form-data" novalidate>

                        <!-- Hidden fields -->
                        <input type="hidden" name="Category" id="communityPostsCategory" />

                        <!-- Title -->
                        <div class="community-posts-field">
                            <label for="communityPostsTitle">Start with a title.</label>
                            <input type="text" name="Title" id="communityPostsTitle" maxlength="100"
                                   placeholder="Please enter an appropriate Title :)" />
                            <small class="community-posts-charcount" id="communityPostsTitleCount">
                                0/100 maximum characters
                            </small>
                        </div>

                        <!-- Content -->
                        <div class="community-posts-field">
                            <label for="communityPostsContent">Provide more details.</label>
                            <textarea name="Content" id="communityPostsContent" maxlength="1000"
                                  placeholder="Provide more details"></textarea>
                            <small class="community-posts-charcount" id="communityPostsContentCount">
                                0/1000 maximum characters
                            </small>
                        </div>

                        <!-- Image -->
                        <div class="community-posts-field">
                            <label for="communityPostsImage">Attach an image (optional)</label>
                            <input type="file" name="Image" id="communityPostsImage" accept="image/*" />
                            <div id="communityPostsImagePreviewContainer" style="margin-top:0.5rem;">
                                <img id="communityPostsImagePreview" style="max-width:100%; border-radius:8px; display:none;" />
                            </div>
                        </div>

                        <!-- Category -->
                        <div class="community-posts-field">
                            <label>Select a category.</label>
                            <div class="community-posts-categories">
                                <button type="button" class="community-posts-category" data-value="Weaving">Weaving</button>
                                <button type="button" class="community-posts-category" data-value="Pottery">Pottery</button>
                                <button type="button" class="community-posts-category" data-value="Wood Carving">Wood Carving</button>
                                <button type="button" class="community-posts-category" data-value="Shoemaking">Shoemaking</button>
                            </div>
                            <a href="#" class="community-posts-other">Choose a different category →</a>
                        </div>

                        <!-- Actions -->
                        <div class="community-posts-actions">
                            <button type="submit" class="community-posts-btn primary" id="communityPostsSubmit" disabled>
                                Post
                            </button>
                            <button type="button" class="community-posts-btn secondary" id="communityPostsCancel">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Modal -->
            <div id="createCommunityModal" class="modal">
                <div class="modal-content">
                    <span id="closeModal" class="modal-close">×</span>

                    <form id="createCommunityForm" asp-action="Create" asp-controller="Community" method="post" enctype="multipart/form-data">

                        <!-- Step 1: Community Info -->
                        <div class="modal-step" id="step1">
                            <h2>Tell us about your community</h2>
                            <p class="modal-subtitle">A name and description help people understand what your community is all about.</p>

                            <div class="form-group">
                                <label for="communityName">Community name <span class="required">*</span></label>
                                <input type="text" name="Name" id="communityName" maxlength="100" placeholder="Community name" required />
                                <small class="char-count"><span id="nameCount">0</span>/100 maximum characters</small>
                            </div>

                            <div class="form-group">
                                <label for="communityDescription">Community description <span class="required">*</span></label>
                                <textarea name="Description" id="communityDescription" maxlength="1000" placeholder="Community description" required></textarea>
                                <small class="char-count"><span id="descCount">0</span>/1000 maximum characters</small>
                            </div>

                            <div class="modal-buttons">
                                <button type="button" class="cancel-btn">Cancel</button>
                                <button type="button" class="next-btn" disabled id="toStep2">Next</button>
                            </div>
                        </div>

                        <!-- Step 2: Style your community -->
                        <div class="modal-step" id="step2" style="display:none;">
                            <h2>Style your community</h2>
                            <p class="modal-subtitle">Customize your community's look to make it stand out.</p>

                            <div class="form-group">
                                <label>Banner</label>
                                <input type="file" name="Banner" id="bannerInput" accept="image/*" />
                                <div id="bannerPreviewContainer" style="position: relative; margin-top:0.5rem;">
                                    <img id="bannerPreview" style="max-width:100%; border-radius:8px; display:none;" />
                                    <button id="bannerDeleteBtn" style="display:none; position:absolute; top:5px; right:5px; background:red; color:white; border:none; border-radius:50%; width:25px; height:25px; cursor:pointer;">×</button>
                                </div>
                            </div>

                            <div class="form-group">
                                <label>Profile</label>
                                <input type="file" name="Avatar" id="profileInput" accept="image/*" />
                                <div id="profilePreviewContainer" style="position: relative; margin-top:0.5rem;">
                                    <img id="profilePreview" style="width:60px; height:60px; border-radius:50%; display:none;" />
                                    <button id="profileDeleteBtn" style="display:none; position:absolute; top:0; right:0; background:red; color:white; border:none; border-radius:50%; width:25px; height:25px; cursor:pointer;">×</button>
                                </div>
                            </div>

                            <div class="modal-buttons">
                                <button type="button" class="cancel-btn">Cancel</button>
                                <button type="button" class="next-btn" id="finishBtn">Next</button>
                            </div>
                        </div>

                        <!-- Step 3: Choose Category -->
                        <div class="modal-step" id="step3" style="display:none;">
                            <h2>Choose your category</h2>
                            <p class="modal-subtitle">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>

                            <div id="categoryCards" style="display:flex; gap:1rem; flex-wrap:wrap; margin-bottom:2rem;">
                                <div class="category-card" data-category="Pottery">Pottery</div>
                                <div class="category-card" data-category="Weaving">Weaving</div>
                                <div class="category-card" data-category="Wood Crafts">Wood Crafts</div>
                                <div class="category-card" data-category="Embroidery">Embroidery</div>
                                <div class="category-card" data-category="Paper Crafts">Paper Crafts</div>
                            </div>

                            <input type="hidden" name="Category" id="selectedCategory" />

                            <div style="display:flex; justify-content:flex-end; gap:0.5rem;">
                                <button type="button" class="cancel-btn">Cancel</button>
                                <button type="submit" class="next-btn" id="createCommunityBtn" disabled>Create Community</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // ================== CREATE COMMUNITY MODAL ==================
        const modal = document.getElementById("createCommunityModal");
        const openModalBtn = document.getElementById("openCreateCommunityModal");
        const closeModalBtn = document.querySelector(".modal-close");
        const cancelBtns = document.querySelectorAll(".cancel-btn");

        // Step elements
        const step1 = document.getElementById("step1");
        const step2 = document.getElementById("step2");
        const step3 = document.getElementById("step3");
        const toStep2 = document.getElementById("toStep2");

        const nameInput = document.getElementById("communityName");
        const descInput = document.getElementById("communityDescription");
        const nameCount = document.getElementById("nameCount");
        const descCount = document.getElementById("descCount");

        const bannerInput = document.getElementById("bannerInput");
        const profileInput = document.getElementById("profileInput");
        const bannerPreview = document.getElementById("bannerPreview");
        const profilePreview = document.getElementById("profilePreview");

        const finishBtn = document.getElementById("finishBtn");
        const finalCommunityName = document.getElementById("finalCommunityName");
        const finalCommunityDescription = document.getElementById("finalCommunityDescription");
        const finalBannerPreview = document.getElementById("finalBannerPreview");
        const finalProfilePreview = document.getElementById("finalProfilePreview");

        // ---- MODAL LOGIC ----
        if (modal && openModalBtn && closeModalBtn && step1 && step2 && step3) {
            // Open modal
            openModalBtn.addEventListener("click", () => modal.style.display = "flex");

            // Close modal function
            const closeModal = () => {
                modal.style.display = "none";
                step1.style.display = "block";
                step2.style.display = "none";
                step3.style.display = "none";

                // Reset form fields
                if (nameInput) nameInput.value = "";
                if (descInput) descInput.value = "";
                if (bannerInput) bannerInput.value = "";
                if (profileInput) profileInput.value = "";

                if (bannerPreview) {
                    bannerPreview.src = "";
                    bannerPreview.style.display = "none";
                }
                if (profilePreview) {
                    profilePreview.src = "";
                    profilePreview.style.display = "none";
                }
                if (toStep2) toStep2.disabled = true;
            };

            // Attach close events
            closeModalBtn.addEventListener("click", closeModal);
            cancelBtns.forEach(btn => btn.addEventListener("click", closeModal));
            window.addEventListener("click", e => { if (e.target === modal) closeModal(); });
            window.addEventListener("keydown", e => { if (e.key === "Escape") closeModal(); });

            // ---- STEP 1: Character counting ----
            if (nameInput && descInput && nameCount && descCount && toStep2) {
                const updateCharCount = () => {
                    nameCount.textContent = nameInput.value.length;
                    descCount.textContent = descInput.value.length;
                    toStep2.disabled = !(nameInput.value.trim() && descInput.value.trim());
                };
                nameInput.addEventListener("input", updateCharCount);
                descInput.addEventListener("input", updateCharCount);
                updateCharCount();
            }

            // ---- STEP 1 -> STEP 2 ----
            if (toStep2) {
                toStep2.addEventListener("click", () => {
                    step1.style.display = "none";
                    step2.style.display = "block";
                    checkStep2Ready();
                });
            }

            // ---- STEP 2: Handle image upload ----
            const handleImageUpload = (input, previewImg, deleteBtn) => {
                if (!input || !previewImg || !deleteBtn) return;

                input.addEventListener("change", e => {
                    const file = e.target.files[0];
                    if (!file) return;

                    if (!file.type.startsWith("image/")) {
                        alert("Only image files are allowed!");
                        input.value = "";
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = () => {
                        previewImg.src = reader.result;
                        previewImg.style.display = "block";
                        deleteBtn.style.display = "block";
                        checkStep2Ready();
                    };
                    reader.readAsDataURL(file);
                });

                deleteBtn.addEventListener("click", () => {
                    input.value = "";
                    previewImg.src = "";
                    previewImg.style.display = "none";
                    deleteBtn.style.display = "none";
                    checkStep2Ready();
                });
            };

            handleImageUpload(bannerInput, bannerPreview, document.getElementById("bannerDeleteBtn"));
            handleImageUpload(profileInput, profilePreview, document.getElementById("profileDeleteBtn"));

            // ---- STEP 2: Enable Finish only if both images selected ----
            const checkStep2Ready = () => {
                if (finishBtn) {
                    finishBtn.disabled = !(bannerInput?.files?.length && profileInput?.files?.length);
                }
            };
            checkStep2Ready();

            // ---- STEP 2 -> STEP 3 ----
            if (finishBtn) {
                finishBtn.addEventListener("click", () => {
                    if (!(bannerInput?.files?.length && profileInput?.files?.length)) return;

                    step2.style.display = "none";
                    step3.style.display = "block";
                });
            }

            // ---- STEP 3: Category selection ----
            const categoryCards = document.querySelectorAll(".category-card");
            const createCommunityBtn = document.getElementById("createCommunityBtn");
            const hiddenCategoryInput = document.getElementById("selectedCategory");

            if (categoryCards.length && createCommunityBtn && hiddenCategoryInput) {
                categoryCards.forEach(card => {
                    card.addEventListener("click", () => {
                        categoryCards.forEach(c => c.classList.remove("selected"));
                        card.classList.add("selected");
                        hiddenCategoryInput.value = card.dataset.category;
                        createCommunityBtn.disabled = false;
                    });
                });
            }
        }

        // ================== CREATE POST MODAL ==================
        const createPostBtn = document.querySelector(".create-post-btn");
        const postModal = document.getElementById("communityPostsCreateModal");
        const cancelPostBtn = document.getElementById("communityPostsCancel");
        const submitPostBtn = document.getElementById("communityPostsSubmit");
        const titleInputPost = document.getElementById("communityPostsTitle");
        const contentInputPost = document.getElementById("communityPostsContent");
        const titleCountPost = document.getElementById("communityPostsTitleCount");
        const contentCountPost = document.getElementById("communityPostsContentCount");
        const imageInput = document.getElementById("communityPostsImage");
        const imagePreview = document.getElementById("communityPostsImagePreview");
        const categoriesPost = document.querySelectorAll(".community-posts-category");
        let selectedCategoryPost = null;

        // Open modal
        if (createPostBtn && postModal) {
            createPostBtn.addEventListener("click", () => {
                postModal.style.display = "flex";
            });
        }

        // Close modal helper
        const closePostModal = () => {
            if (postModal) postModal.style.display = "none";
            if (titleInputPost) titleInputPost.value = "";
            if (contentInputPost) contentInputPost.value = "";
            if (titleCountPost) titleCountPost.textContent = "0/100 maximum characters";
            if (contentCountPost) contentCountPost.textContent = "0/1000 maximum characters";
            categoriesPost.forEach(c => c.classList.remove("active"));
            selectedCategoryPost = null;
            if (submitPostBtn) submitPostBtn.disabled = true; // reset
        };

        // Close events
        if (cancelPostBtn) cancelPostBtn.addEventListener("click", closePostModal);
        if (postModal) {
            postModal.addEventListener("click", e => { if (e.target === postModal) closePostModal(); });
        }
        window.addEventListener("keydown", e => { if (e.key === "Escape") closePostModal(); });

        // Character counters
        if (titleInputPost && titleCountPost) {
            titleInputPost.addEventListener("input", () => {
                titleCountPost.textContent = `${titleInputPost.value.length}/100 maximum characters`;
                validatePostForm();
            });
        }

        if (contentInputPost && contentCountPost) {
            contentInputPost.addEventListener("input", () => {
                contentCountPost.textContent = `${contentInputPost.value.length}/1000 maximum characters`;
                validatePostForm();
            });
        }

        // Image preview
        if (imageInput && imagePreview) {
            imageInput.addEventListener("change", e => {
                const file = e.target.files[0];
                if (!file) return;

                if (!file.type.startsWith("image/")) {
                    alert("Only image files are allowed!");
                    imageInput.value = "";
                    return;
                }

                const reader = new FileReader();
                reader.onload = () => {
                    imagePreview.src = reader.result;
                    imagePreview.style.display = "block";
                };
                reader.readAsDataURL(file);
            });
        }

        // Category selection
        categoriesPost.forEach(cat => {
            cat.addEventListener("click", () => {
                categoriesPost.forEach(c => c.classList.remove("active"));
                cat.classList.add("active");
                selectedCategoryPost = cat.dataset.value; // use data-value
                document.getElementById("communityPostsCategory").value = selectedCategoryPost;
                validatePostForm(); // enable only if title/content are valid
            });
        });

        // Validation & enabling submit
        const validatePostForm = () => {
            const title = titleInputPost.value.trim();
            const content = contentInputPost.value.trim();
            const category = selectedCategoryPost;
            submitPostBtn.disabled = !(title && content && category);
        };

        document.querySelectorAll(".community-posts-category").forEach(btn => {
            btn.addEventListener("click", () => {
                document.getElementById("communityPostsCategory").value = btn.dataset.value;
                document.getElementById("communityPostsSubmit").disabled = false; // enable submit
            });
        });

        // Form submit with fetch
        document.getElementById("communityPostsForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);

            try {
                const response = await fetch(form.action, {
                    method: "POST",
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    // ✅ Create new post element
                    const newPost = document.createElement("div");
                    newPost.classList.add("post-card"); // match your Razor class
                    newPost.innerHTML = `
                        <div class="post-card-header">
                            <div class="avatar" style="background-image:url('${result.post.authorAvatarUrl || '/assets/Images/default-avatar.png'}')"></div>
                            <div class="community-info">
                                <h5>${result.post.authorName}</h5>
                                <h6>${result.post.communityName} • ${new Date(result.post.submittedAt).toLocaleDateString('en-US', { month: 'short', day: '2-digit', year: 'numeric' })}</h6>
                            </div>
                        </div>
                        <div class="post-card-content">
                            <p>${result.post.content}</p>
                            ${result.post.imageUrl ? `<img src="${result.post.imageUrl}" alt="Post image" />` : ""}
                            <div class="community-meta">
                                <span>❤️ 0</span>
                                <span>💬 0</span>
                            </div>
                        </div>
                    `;

                    // ✅ Insert into the Razor-generated container
                    const postsContainer = document.querySelector('.community-posts-list');
                    if (postsContainer) {
                        // If "No posts" message exists, remove it first
                        const noPosts = postsContainer.querySelector('.no-posts');
                        if (noPosts) noPosts.remove();

                        postsContainer.prepend(newPost);
                    }

                    // ✅ Reset form and close modal
                    form.reset();
                    closePostModal();
                } else {
                    alert(result.message || "Something went wrong while creating the post.");
                }
            } catch (error) {
                console.error("Error creating post:", error);
                alert("Failed to create post. Please try again.");
            }
        });


        // Initial disable state
        if (submitPostBtn) submitPostBtn.disabled = true;
    });

    // ================== TAB SWITCHING LOGIC ==================
    const tabs = document.querySelectorAll(".community-tab");
    const tabPanels = document.querySelectorAll(".community-tab-panel");

    if (tabs.length && tabPanels.length) {
        tabs.forEach(tab => {
            tab.addEventListener("click", () => {
                tabs.forEach(t => t.classList.remove("active"));
                tabPanels.forEach(panel => panel.classList.remove("active"));

                tab.classList.add("active");
                const selectedTab = tab.getAttribute("data-tab");
                const targetPanel = document.querySelector(`.community-tab-panel[data-tab="${selectedTab}"]`);
                if (targetPanel) targetPanel.classList.add("active");
            });
        });
    }
</script>